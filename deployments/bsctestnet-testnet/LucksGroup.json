{
  "address": "0xF71293ef83730Fa0b48668f85981611E111A81Dd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_maxSeat",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "seat",
          "type": "uint16"
        }
      ],
      "name": "CreateGroup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        }
      ],
      "name": "JoinGroup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXECUTOR",
      "outputs": [
        {
          "internalType": "contract ILucksExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SEAT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "seat",
          "type": "uint16"
        }
      ],
      "name": "createGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getGroupUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groupIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groupSeat",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "seat",
          "type": "uint16"
        }
      ],
      "name": "joinGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksExecutor",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x43f4464024b59eaf200042a4b10d862032440e34237146bd9060e500a27bc458",
  "receipt": {
    "to": null,
    "from": "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
    "contractAddress": "0xF71293ef83730Fa0b48668f85981611E111A81Dd",
    "transactionIndex": 1,
    "gasUsed": "1316216",
    "logsBloom": "0x
    "blockHash": "0x8e47a927e8cb41c369559d04ed9f348bec6e9759b1c5e620c30b1842c3d4bd3c",
    "transactionHash": "0x43f4464024b59eaf200042a4b10d862032440e34237146bd9060e500a27bc458",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 19705545,
        "transactionHash": "0x43f4464024b59eaf200042a4b10d862032440e34237146bd9060e500a27bc458",
        "address": "0xF71293ef83730Fa0b48668f85981611E111A81Dd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b770f460978c456d69bc46463dfda71feee60ad"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x8e47a927e8cb41c369559d04ed9f348bec6e9759b1c5e620c30b1842c3d4bd3c"
      }
    ],
    "blockNumber": 19705545,
    "cumulativeGasUsed": "3022734",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x314a051Fe16Cd23043F4Dd38940C4A62e6e87faC",
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "f9d7730f5d0306f217e16898eef50083",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxSeat\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"seat\",\"type\":\"uint16\"}],\"name\":\"CreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"JoinGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"contract ILucksExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SEAT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"seat\",\"type\":\"uint16\"}],\"name\":\"createGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getGroupUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupSeat\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"seat\",\"type\":\"uint16\"}],\"name\":\"joinGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksExecutor\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Openluck LucksGroup\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setExecutor(address)\":{\"notice\":\"set operator\"}},\"notice\":\"It is the contract for LucksGroup\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucks/LucksGroup.sol\":\"LucksGroup\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);\\r\\n    event MinWaitPeriodUpdated(uint256 oldMinWaitPeriod, uint256 newMinWaitPeriod);\\r\\n\\r\\n    event RevertInvoke(uint256 taskId, bytes reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\",\"keccak256\":\"0xac2ced661bf25c3c6f56c924fe63ff2b342aa08d1f077e6e8873df73596a855e\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n    bytes zroPaymentAddr; //  the address of the ZRO token holder who would pay for the transaction\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n\\r\\n    // ============= Task functions ====================\\r\\n\\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,\\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateCreateTaskFee(\\r\\n        uint16 _dstChainId,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateWithdrawNFTsFee(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n}\\r\\n\",\"keccak256\":\"0xeba9f5dfb8e3e81f546689fae3b00e24cee2fc65c8c341a16f4ddac1f47c147e\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\nstruct TaskInfo {\\r\\n    uint256 lastTID;\\r\\n    uint256 closeTime;\\r\\n    uint256 finalNo;\\r\\n}\\r\\n \\r\\nstruct UserState {\\r\\n    uint256 num; // user buyed tickets count\\r\\n    bool claimed;  // user claimed\\r\\n}\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint256 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);\\r\\n    \\r\\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\\r\\n    function isFail(uint256 taskId) external view returns(bool);\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xac826f689b2177ae52cfdfdc2cc9a34c66fde5bc3d8bbd2ce43d5c84d1d55a97\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksGroup {    \\r\\n\\r\\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\\r\\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\\r\\n   \\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\\r\\n    function createGroup(uint256 taskId, uint16 seat) external;\\r\\n}\",\"keccak256\":\"0x0f80c646005b1eb282e864517e9effd2f2a54411aec731e73fbd539808d6c38f\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksVRF} from \\\"./ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"./ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"./ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"./ILucksAuto.sol\\\";\\r\\n\\r\\ninterface ILucksHelper {\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\r\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\r\\n    function checkNFTContract(address addr) external view returns (bool);\\r\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\r\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\r\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\r\\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\r\\n\\r\\n    function getProtocolFeeRecipient() external view returns (address);\\r\\n    function getProtocolFee() external view returns (uint256);\\r\\n    function getMinTargetLimit(address token) external view returns (uint256);\\r\\n    function getDrawDelay() external view returns (uint32);\\r\\n\\r\\n    function getVRF() external view returns (ILucksVRF);\\r\\n    function getGROUPS() external view returns (ILucksGroup);\\r\\n    // function getREWARDS() external view returns (ILucksRewards);\\r\\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\\r\\n    function getAutoClose() external view returns (ILucksAuto);\\r\\n    function getAutoDraw() external view returns (ILucksAuto);\\r\\n}\\r\\n\",\"keccak256\":\"0x63a0408bc27abb14b326faf40dd9156c855c71a954d950de1a707efeebc51c31\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface ILucksPaymentStrategy {\\r\\n    \\r\\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\\r\\n}\",\"keccak256\":\"0xfb95b42ebb7f656c8373266c15d91659333f1ef508bba71429ea0932fe1dcdad\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILucksVRF {\\r\\n\\r\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\r\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \\r\\n\\r\\n    /**\\r\\n     * Requests randomness from a user-provided max\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\r\\n\\r\\n    /**\\r\\n     * Views random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\r\\n}\",\"keccak256\":\"0x8039f261810e00db42828632a5deba8a11613357d9c63b33c5d342abb6d6da0e\",\"license\":\"MIT\"},\"contracts/lucks/LucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksGroup} from \\\"../interfaces/ILucksGroup.sol\\\";\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksGroup\\r\\n * @notice It is the contract for LucksGroup\\r\\n */\\r\\ncontract LucksGroup is ILucksGroup, Ownable {\\r\\n\\r\\n    using Counters for Counters.Counter;    \\r\\n\\r\\n    ILucksExecutor public EXECUTOR;\\r\\n\\r\\n    uint32 public MAX_SEAT = 10;\\r\\n    \\r\\n    mapping(uint256 => uint256) public groupIds;               // groupId counter (taskId => groupId)\\r\\n    mapping(uint256 => mapping(uint256 => address[])) public groups;     // store task groups (taskId => groupId => group member address)\\r\\n    mapping(address => mapping(uint256 => uint256)) public userGroups;   // store user joined groups (user => taskId => groupId)\\r\\n    mapping(uint256 => mapping(uint256 => uint16)) public groupSeat;     // store group setting(task=> groupId = > group seat)\\r\\n\\r\\n    constructor(address _executor, uint32 _maxSeat) {\\r\\n        EXECUTOR =  ILucksExecutor(_executor);        \\r\\n        MAX_SEAT = _maxSeat;\\r\\n    }\\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address user) override view public returns (address[] memory){                \\r\\n        return groups[taskId][userGroups[user][taskId]];\\r\\n    }\\r\\n\\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) override public {   \\r\\n        address user = msg.sender;                  \\r\\n        require(groupId > 0 && groupId <= groupIds[taskId], \\\"Invalid groupId\\\");\\r\\n        require(seat <= MAX_SEAT, \\\"Invalid seat\\\");\\r\\n        require(userGroups[user][taskId] == 0, \\\"Already join a group\\\");\\r\\n        require(address(EXECUTOR)!=address(0), \\\"EXECUTOR not set\\\");\\r\\n            \\r\\n        TaskItem memory item = EXECUTOR.getTask(taskId);        \\r\\n        require(block.timestamp <= item.endTime, \\\"Invalid time range\\\");    \\r\\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \\\"Invalid status\\\");\\r\\n\\r\\n        // join\\r\\n        if (groups[taskId][groupId].length < MAX_SEAT) {            \\r\\n            groups[taskId][groupId].push(user);\\r\\n            userGroups[user][taskId] = groupId;\\r\\n\\r\\n            emit JoinGroup(user, taskId, groupId);\\r\\n        }\\r\\n        else {\\r\\n            if (seat > 1) {\\r\\n                // over seat, create new group\\r\\n                _createGroup(user, taskId, seat); \\r\\n            }\\r\\n            else {\\r\\n                revert(\\\"Exceed seat\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createGroup(uint256 taskId, uint16 seat) override public {  \\r\\n        _createGroup(msg.sender, taskId, seat);\\r\\n    }\\r\\n\\r\\n    function _createGroup(address user, uint256 taskId, uint16 seat) internal {            \\r\\n                 \\r\\n        require(seat <= MAX_SEAT && seat > 1, \\\"Invalid seat\\\");\\r\\n        require(userGroups[user][taskId] == 0, \\\"Already join a group\\\");\\r\\n        require(address(EXECUTOR)!=address(0), \\\"EXECUTOR not set\\\");\\r\\n            \\r\\n        TaskItem memory item = EXECUTOR.getTask(taskId);        \\r\\n        require(block.timestamp <= item.endTime, \\\"Invalid time range\\\");    \\r\\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \\\"Invalid status\\\");\\r\\n        \\r\\n        uint256 groupId = groupIds[taskId] + 1;\\r\\n        groupIds[taskId] = groupId;\\r\\n\\r\\n        groups[taskId][groupId].push(user);\\r\\n        userGroups[user][taskId] = groupId;\\r\\n\\r\\n        emit CreateGroup(user, taskId, groupId, seat);\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n    @notice set operator\\r\\n     */\\r\\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x94cdde68782076a3def93e45f0623e37b78c7e46d254f7eda44269737b46f85d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001805463ffffffff60a01b1916600560a11b17905534801561002657600080fd5b50604051611756380380611756833981016040819052610045916100d3565b61004e33610083565b6001805463ffffffff909216600160a01b026001600160c01b03199092166001600160a01b0390931692909217179055610122565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100e657600080fd5b82516001600160a01b03811681146100fd57600080fd5b602084015190925063ffffffff8116811461011757600080fd5b809150509250929050565b611625806101316000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806360a9e0971161008c57806376e5066e1161006657806376e5066e1461021a5780638da5cb5b1461025c578063dead6c1e1461027a578063f2fde38b1461029a57600080fd5b806360a9e097146101c7578063630dc7cb146101f2578063715018a61461021257600080fd5b80632d027f75116100bd5780632d027f751461014e57806338c1cdb2146101615780634093d7a11461019957600080fd5b806313cedac8146100e457806317a0a232146101265780631c3c0ea81461013b575b600080fd5b60015461010c9074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b610139610134366004611437565b6102ad565b005b610139610149366004611200565b610839565b61013961015c3660046113f0565b610901565b61017461016f366004611470565b610910565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011d565b6101b96101a73660046113a7565b60026020526000908152604090205481565b60405190815260200161011d565b6101b96101d5366004611224565b600460209081526000928352604080842090915290825290205481565b6001546101749073ffffffffffffffffffffffffffffffffffffffff1681565b610139610962565b610249610228366004611415565b600560209081526000928352604080842090915290825290205461ffff1681565b60405161ffff909116815260200161011d565b60005473ffffffffffffffffffffffffffffffffffffffff16610174565b61028d6102883660046113c0565b6109ef565b60405161011d919061149c565b6101396102a8366004611200565b610a99565b3382158015906102cb57506000848152600260205260409020548311155b610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c69642067726f75704964000000000000000000000000000000000060448201526064015b60405180910390fd5b60015474010000000000000000000000000000000000000000900463ffffffff1661ffff831611156103c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420736561740000000000000000000000000000000000000000604482015260640161032d565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602090815260408083208784529091529020541561045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416c7265616479206a6f696e20612067726f7570000000000000000000000000604482015260640161032d565b60015473ffffffffffffffffffffffffffffffffffffffff166104db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4558454355544f52206e6f742073657400000000000000000000000000000000604482015260640161032d565b6001546040517f1d65e77e0000000000000000000000000000000000000000000000000000000081526004810186905260009173ffffffffffffffffffffffffffffffffffffffff1690631d65e77e9060240160006040518083038186803b15801561054657600080fd5b505afa15801561055a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105a09190810190611250565b9050806101000151421115610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e67650000000000000000000000000000604482015260640161032d565b60008160c0015160058111156106295761062961155f565b148061064a575060018160c0015160058111156106485761064861155f565b145b6106b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420737461747573000000000000000000000000000000000000604482015260640161032d565b60015460008681526003602090815260408083208884529091529020547401000000000000000000000000000000000000000090910463ffffffff1611156107b3576000858152600360209081526040808320878452825280832080546001810182559084528284200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871690811790915580845260048352818420898552835292819020879055805192835290820187905281018590527f9ded7a3449a7d51e28eafa621e5ed2137c3aa3778b53065e2d07bf5078893edc9060600160405180910390a1610832565b60018361ffff1611156107d0576107cb828685610bc9565b610832565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4578636565642073656174000000000000000000000000000000000000000000604482015260640161032d565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032d565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61090c338383610bc9565b5050565b6003602052826000526040600020602052816000526040600020818154811061093857600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032d565b6109ed6000611047565b565b600082815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452600483528184208685528352818420548452825291829020805483518184028101840190945280845260609392830182828015610a8c57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610a61575b5050505050905092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032d565b73ffffffffffffffffffffffffffffffffffffffff8116610bbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161032d565b610bc681611047565b50565b60015474010000000000000000000000000000000000000000900463ffffffff1661ffff821611801590610c01575060018161ffff16115b610c67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420736561740000000000000000000000000000000000000000604482015260640161032d565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260046020908152604080832085845290915290205415610cff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416c7265616479206a6f696e20612067726f7570000000000000000000000000604482015260640161032d565b60015473ffffffffffffffffffffffffffffffffffffffff16610d7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4558454355544f52206e6f742073657400000000000000000000000000000000604482015260640161032d565b6001546040517f1d65e77e0000000000000000000000000000000000000000000000000000000081526004810184905260009173ffffffffffffffffffffffffffffffffffffffff1690631d65e77e9060240160006040518083038186803b158015610de957600080fd5b505afa158015610dfd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e439190810190611250565b9050806101000151421115610eb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e67650000000000000000000000000000604482015260640161032d565b60008160c001516005811115610ecc57610ecc61155f565b1480610eed575060018160c001516005811115610eeb57610eeb61155f565b145b610f53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420737461747573000000000000000000000000000000000000604482015260640161032d565b600083815260026020526040812054610f6d906001611520565b600085815260026020908152604080832084905560038252808320848452825280832080546001810182559084528284200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8b16908117909155808452600483528184208985528352928190208490558051928352908201879052810182905261ffff851660608201529091507f5c23ecf7d35b727b39000e452236d77f421afe8aa28e32d120085c0b3a8f16b69060800160405180910390a15050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516110c7816115bd565b919050565b600082601f8301126110dd57600080fd5b8151602067ffffffffffffffff808311156110fa576110fa61158e565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561113d5761113d61158e565b6040528481528381019250868401828801850189101561115c57600080fd5b600092505b8583101561117f578051845292840192600192909201918401611161565b50979650505050505050565b8051600681106110c757600080fd5b6000604082840312156111ac57600080fd5b6040516040810181811067ffffffffffffffff821117156111cf576111cf61158e565b806040525080915082516111e2816115bd565b8152602092830151920191909152919050565b80516110c7816115df565b60006020828403121561121257600080fd5b813561121d816115bd565b9392505050565b6000806040838503121561123757600080fd5b8235611242816115bd565b946020939093013593505050565b60006020828403121561126257600080fd5b815167ffffffffffffffff8082111561127a57600080fd5b90830190610200828603121561128f57600080fd5b6112976114f6565b6112a0836110bc565b81526112ae602084016111f5565b60208201526112bf604084016110bc565b60408201526060830151828111156112d657600080fd5b6112e2878286016110cc565b6060830152506080830151828111156112fa57600080fd5b611306878286016110cc565b60808301525061131860a084016110bc565b60a082015261132960c0840161118b565b60c082015260e0838101519082015261010080840151908201526101208084015190820152610140808401519082015261016091506113698284016111f5565b82820152610180915061137e8683850161119a565b828201526101c09150818301516101a08201526101e08301518282015280935050505092915050565b6000602082840312156113b957600080fd5b5035919050565b600080604083850312156113d357600080fd5b8235915060208301356113e5816115bd565b809150509250929050565b6000806040838503121561140357600080fd5b8235915060208301356113e5816115df565b6000806040838503121561142857600080fd5b50508035926020909101359150565b60008060006060848603121561144c57600080fd5b83359250602084013591506040840135611465816115df565b809150509250925092565b60008060006060848603121561148557600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b818110156114ea57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016114b8565b50909695505050505050565b6040516101e0810167ffffffffffffffff8111828210171561151a5761151a61158e565b60405290565b6000821982111561155a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610bc657600080fd5b61ffff81168114610bc657600080fdfea26469706673582212202391ed7f9d1fa36088fdaab671682208f962eba012dc319b4e625d50b83d47fe64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806360a9e0971161008c57806376e5066e1161006657806376e5066e1461021a5780638da5cb5b1461025c578063dead6c1e1461027a578063f2fde38b1461029a57600080fd5b806360a9e097146101c7578063630dc7cb146101f2578063715018a61461021257600080fd5b80632d027f75116100bd5780632d027f751461014e57806338c1cdb2146101615780634093d7a11461019957600080fd5b806313cedac8146100e457806317a0a232146101265780631c3c0ea81461013b575b600080fd5b60015461010c9074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b610139610134366004611437565b6102ad565b005b610139610149366004611200565b610839565b61013961015c3660046113f0565b610901565b61017461016f366004611470565b610910565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011d565b6101b96101a73660046113a7565b60026020526000908152604090205481565b60405190815260200161011d565b6101b96101d5366004611224565b600460209081526000928352604080842090915290825290205481565b6001546101749073ffffffffffffffffffffffffffffffffffffffff1681565b610139610962565b610249610228366004611415565b600560209081526000928352604080842090915290825290205461ffff1681565b60405161ffff909116815260200161011d565b60005473ffffffffffffffffffffffffffffffffffffffff16610174565b61028d6102883660046113c0565b6109ef565b60405161011d919061149c565b6101396102a8366004611200565b610a99565b3382158015906102cb57506000848152600260205260409020548311155b610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c69642067726f75704964000000000000000000000000000000000060448201526064015b60405180910390fd5b60015474010000000000000000000000000000000000000000900463ffffffff1661ffff831611156103c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420736561740000000000000000000000000000000000000000604482015260640161032d565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602090815260408083208784529091529020541561045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416c7265616479206a6f696e20612067726f7570000000000000000000000000604482015260640161032d565b60015473ffffffffffffffffffffffffffffffffffffffff166104db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4558454355544f52206e6f742073657400000000000000000000000000000000604482015260640161032d565b6001546040517f1d65e77e0000000000000000000000000000000000000000000000000000000081526004810186905260009173ffffffffffffffffffffffffffffffffffffffff1690631d65e77e9060240160006040518083038186803b15801561054657600080fd5b505afa15801561055a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105a09190810190611250565b9050806101000151421115610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e67650000000000000000000000000000604482015260640161032d565b60008160c0015160058111156106295761062961155f565b148061064a575060018160c0015160058111156106485761064861155f565b145b6106b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420737461747573000000000000000000000000000000000000604482015260640161032d565b60015460008681526003602090815260408083208884529091529020547401000000000000000000000000000000000000000090910463ffffffff1611156107b3576000858152600360209081526040808320878452825280832080546001810182559084528284200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871690811790915580845260048352818420898552835292819020879055805192835290820187905281018590527f9ded7a3449a7d51e28eafa621e5ed2137c3aa3778b53065e2d07bf5078893edc9060600160405180910390a1610832565b60018361ffff1611156107d0576107cb828685610bc9565b610832565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4578636565642073656174000000000000000000000000000000000000000000604482015260640161032d565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032d565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61090c338383610bc9565b5050565b6003602052826000526040600020602052816000526040600020818154811061093857600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032d565b6109ed6000611047565b565b600082815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452600483528184208685528352818420548452825291829020805483518184028101840190945280845260609392830182828015610a8c57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610a61575b5050505050905092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032d565b73ffffffffffffffffffffffffffffffffffffffff8116610bbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161032d565b610bc681611047565b50565b60015474010000000000000000000000000000000000000000900463ffffffff1661ffff821611801590610c01575060018161ffff16115b610c67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420736561740000000000000000000000000000000000000000604482015260640161032d565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260046020908152604080832085845290915290205415610cff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416c7265616479206a6f696e20612067726f7570000000000000000000000000604482015260640161032d565b60015473ffffffffffffffffffffffffffffffffffffffff16610d7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4558454355544f52206e6f742073657400000000000000000000000000000000604482015260640161032d565b6001546040517f1d65e77e0000000000000000000000000000000000000000000000000000000081526004810184905260009173ffffffffffffffffffffffffffffffffffffffff1690631d65e77e9060240160006040518083038186803b158015610de957600080fd5b505afa158015610dfd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e439190810190611250565b9050806101000151421115610eb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e67650000000000000000000000000000604482015260640161032d565b60008160c001516005811115610ecc57610ecc61155f565b1480610eed575060018160c001516005811115610eeb57610eeb61155f565b145b610f53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420737461747573000000000000000000000000000000000000604482015260640161032d565b600083815260026020526040812054610f6d906001611520565b600085815260026020908152604080832084905560038252808320848452825280832080546001810182559084528284200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8b16908117909155808452600483528184208985528352928190208490558051928352908201879052810182905261ffff851660608201529091507f5c23ecf7d35b727b39000e452236d77f421afe8aa28e32d120085c0b3a8f16b69060800160405180910390a15050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516110c7816115bd565b919050565b600082601f8301126110dd57600080fd5b8151602067ffffffffffffffff808311156110fa576110fa61158e565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561113d5761113d61158e565b6040528481528381019250868401828801850189101561115c57600080fd5b600092505b8583101561117f578051845292840192600192909201918401611161565b50979650505050505050565b8051600681106110c757600080fd5b6000604082840312156111ac57600080fd5b6040516040810181811067ffffffffffffffff821117156111cf576111cf61158e565b806040525080915082516111e2816115bd565b8152602092830151920191909152919050565b80516110c7816115df565b60006020828403121561121257600080fd5b813561121d816115bd565b9392505050565b6000806040838503121561123757600080fd5b8235611242816115bd565b946020939093013593505050565b60006020828403121561126257600080fd5b815167ffffffffffffffff8082111561127a57600080fd5b90830190610200828603121561128f57600080fd5b6112976114f6565b6112a0836110bc565b81526112ae602084016111f5565b60208201526112bf604084016110bc565b60408201526060830151828111156112d657600080fd5b6112e2878286016110cc565b6060830152506080830151828111156112fa57600080fd5b611306878286016110cc565b60808301525061131860a084016110bc565b60a082015261132960c0840161118b565b60c082015260e0838101519082015261010080840151908201526101208084015190820152610140808401519082015261016091506113698284016111f5565b82820152610180915061137e8683850161119a565b828201526101c09150818301516101a08201526101e08301518282015280935050505092915050565b6000602082840312156113b957600080fd5b5035919050565b600080604083850312156113d357600080fd5b8235915060208301356113e5816115bd565b809150509250929050565b6000806040838503121561140357600080fd5b8235915060208301356113e5816115df565b6000806040838503121561142857600080fd5b50508035926020909101359150565b60008060006060848603121561144c57600080fd5b83359250602084013591506040840135611465816115df565b809150509250925092565b60008060006060848603121561148557600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b818110156114ea57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016114b8565b50909695505050505050565b6040516101e0810167ffffffffffffffff8111828210171561151a5761151a61158e565b60405290565b6000821982111561155a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610bc657600080fd5b61ffff81168114610bc657600080fdfea26469706673582212202391ed7f9d1fa36088fdaab671682208f962eba012dc319b4e625d50b83d47fe64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Openluck LucksGroup",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setExecutor(address)": {
        "notice": "set operator"
      }
    },
    "notice": "It is the contract for LucksGroup",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 917,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13978,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "EXECUTOR",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILucksExecutor)9861"
      },
      {
        "astId": 13981,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "MAX_SEAT",
        "offset": 20,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 13985,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "groupIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13992,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "groups",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 13998,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "userGroups",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 14004,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "groupSeat",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint16))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(ILucksExecutor)9861": {
        "encoding": "inplace",
        "label": "contract ILucksExecutor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint16))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint16)"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
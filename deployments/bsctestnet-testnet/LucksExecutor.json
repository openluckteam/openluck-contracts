{
  "address": "0x486eB7D45626FDae26DE504fc24244F297290D1B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILucksHelper",
          "name": "_helper",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_allowTask",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "CancelTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "acceptToken",
          "type": "address"
        }
      ],
      "name": "ClaimToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum TaskStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "CloseTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TaskItem",
          "name": "item",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "note",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct TaskExt",
          "name": "ext",
          "type": "tuple"
        }
      ],
      "name": "CreateTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "start",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "end",
          "type": "uint32"
        }
      ],
      "name": "CreateTickets",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "number",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "JoinTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "number",
          "type": "uint32"
        }
      ],
      "name": "PickWinner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BRIDGE",
      "outputs": [
        {
          "internalType": "contract ILucksBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HELPER",
      "outputs": [
        {
          "internalType": "contract ILucksHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_NFT",
      "outputs": [
        {
          "internalType": "contract IProxyNFTStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_TOKEN",
      "outputs": [
        {
          "internalType": "contract IProxyTokenStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "cancelTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "taskIds",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "claimNFTs",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "taskIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "closeTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "closeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskItem",
          "name": "item",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "note",
              "type": "string"
            }
          ],
          "internalType": "struct TaskExt",
          "name": "ext",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "createTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAllowTask",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "joinTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastTIDs",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "functionType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "onLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "pickWinner",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setAllowTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksBridge",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "contract IProxyTokenStation",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IProxyNFTStation",
          "name": "_nft",
          "type": "address"
        }
      ],
      "name": "setBridgeAndProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksHelper",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setLucksHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tasks",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "nftChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acceptToken",
          "type": "address"
        },
        {
          "internalType": "enum TaskStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "paymentStrategy",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExclusiveToken",
          "name": "exclusiveToken",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountCollected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ticketIds",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "number",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "count",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userClaimeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userTickets",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winTickets",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f3fe1721a5f5741b651f0e83a3e5e1797b5b20e5150e3ce4e4d6df0e4ea9ab4",
  "receipt": {
    "to": null,
    "from": "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
    "contractAddress": "0x486eB7D45626FDae26DE504fc24244F297290D1B",
    "transactionIndex": 1,
    "gasUsed": "5229582",
    "logsBloom": "0x
    "blockHash": "0xdf7fa1b53c0b3061fdc0476b1f04a6dddff54e07cce27a68db7cd85d81dab9db",
    "transactionHash": "0x7f3fe1721a5f5741b651f0e83a3e5e1797b5b20e5150e3ce4e4d6df0e4ea9ab4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 18972371,
        "transactionHash": "0x7f3fe1721a5f5741b651f0e83a3e5e1797b5b20e5150e3ce4e4d6df0e4ea9ab4",
        "address": "0x486eB7D45626FDae26DE504fc24244F297290D1B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b770f460978c456d69bc46463dfda71feee60ad"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xdf7fa1b53c0b3061fdc0476b1f04a6dddff54e07cce27a68db7cd85d81dab9db"
      }
    ],
    "blockNumber": 18972371,
    "cumulativeGasUsed": "5999746",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    10002,
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "c901f1a063d05d2c0029f9800f4d2c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILucksHelper\",\"name\":\"_helper\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_allowTask\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"CancelTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"CloseTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TaskItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct TaskExt\",\"name\":\"ext\",\"type\":\"tuple\"}],\"name\":\"CreateTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"}],\"name\":\"CreateTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"JoinTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"}],\"name\":\"PickWinner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"contract ILucksBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HELPER\",\"outputs\":[{\"internalType\":\"contract ILucksHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_NFT\",\"outputs\":[{\"internalType\":\"contract IProxyNFTStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_TOKEN\",\"outputs\":[{\"internalType\":\"contract IProxyTokenStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"cancelTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"taskIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"claimNFTs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"taskIds\",\"type\":\"uint256[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"closeTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"closeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"internalType\":\"struct TaskExt\",\"name\":\"ext\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllowTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"joinTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastTIDs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"functionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setAllowTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksBridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"contract IProxyTokenStation\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IProxyNFTStation\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setBridgeAndProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksHelper\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLucksHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketIds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"count\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTickets\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winTickets\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_allowTask\":\"allow running task\",\"_chainId\":\"layerZero chainId\",\"_helper\":\"protocol helper address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Openluck LucksTrade.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelTask(uint256,(uint256,uint256,bytes))\":{\"notice\":\"seller cancel the task, only when task status equal to 'Pending' or no funds amount\"},\"claimNFTs(uint256[],(uint256,uint256,bytes))\":{\"notice\":\"when taskItem Fail, user can claim NFTs back (cross-chain case)\"},\"claimTokens(uint256[])\":{\"notice\":\"when taskItem Fail, user can claim tokens back \"},\"closeTask(uint256,(uint256,uint256,bytes))\":{\"notice\":\"finish a Task,  case 1: reach target crowd amount, status success, and start to pick a winner case 2: time out and not reach the target amount, status close, and returns funds to claimable pool\"},\"constructor\":{\"notice\":\"Constructor\"},\"joinTask(uint256,uint32,string)\":{\"notice\":\"buyer join a task num: how many ticket\"},\"pickWinner(uint256,(uint256,uint256,bytes))\":{\"notice\":\"start to picker a winner via chainlink VRF\"}},\"notice\":\"It is the core contract for crowd funds to buy NFTs result to one lucky winner randomness provided externally.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LucksExecutor.sol\":\"LucksExecutor\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/LucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// imports\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskExt, TaskStatus, Ticket} from \\\"./interfaces/ILucksExecutor.sol\\\";\\r\\nimport {IProxyNFTStation} from \\\"./interfaces/IProxyNFTStation.sol\\\";\\r\\nimport {IProxyTokenStation} from \\\"./interfaces/IProxyTokenStation.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./interfaces/ILucksHelper.sol\\\";\\r\\nimport {ILucksBridge, lzTxObj} from \\\"./interfaces/ILucksBridge.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksTrade.\\r\\n * @notice It is the core contract for crowd funds to buy NFTs result to one lucky winner\\r\\n * randomness provided externally.\\r\\n */\\r\\ncontract LucksExecutor is ILucksExecutor, ReentrancyGuard, Ownable \\r\\n{\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private ids;\\r\\n\\r\\n    // ============ Openluck interfaces ============\\r\\n    \\r\\n    ILucksHelper public HELPER;    \\r\\n    IProxyNFTStation public PROXY_NFT;\\r\\n    IProxyTokenStation public PROXY_TOKEN;\\r\\n    ILucksBridge public BRIDGE;\\r\\n    \\r\\n    uint16 public immutable lzChainId;\\r\\n    bool public isAllowTask; // this network allow running task or not (ethereum & Rinkeby not allow)\\r\\n\\r\\n    // ============ Public Mutable Storage ============\\r\\n\\r\\n    // VARIABLES    \\r\\n    mapping(uint256 => TaskItem) public tasks; // store tasks info by taskId    \\r\\n    mapping(uint256 => mapping(uint32 => Ticket)) public tickets; // store tickets (taskId => ticketId => ticket)    \\r\\n    mapping(uint256 => uint32[]) public ticketIds; // store ticket ids (taskId => lastTicketIds)    \\r\\n    mapping(uint256 => uint32) public lastTIDs; // Keeps track of number of ticket per unique combination for each taskId (taskId=>last TicketId)    \\r\\n    mapping(uint256 => uint256) public closeTime; // store task close time (taksId=>blocktime)    \\r\\n    mapping(uint256 => uint32) public winTickets; // store the winner ticket (taskId=>ticketId)\\r\\n    mapping(address => mapping(uint256 => uint32)) public userTickets; // Keep track of user ticket ids for a given taskId (user => taskId => ticket count)    \\r\\n    mapping(address => mapping(uint256 => uint256)) public userClaimeds; // store user claimable token amount (user=>taskId=>amount)\\r\\n\\r\\n    // ======== Constructor =========\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     * @param _helper protocol helper address\\r\\n     * @param _chainId layerZero chainId\\r\\n     * @param _allowTask allow running task\\r\\n     */\\r\\n    constructor(ILucksHelper _helper, uint16 _chainId, bool _allowTask) {\\r\\n        HELPER = _helper;        \\r\\n        lzChainId = _chainId;\\r\\n        isAllowTask = _allowTask;\\r\\n    }\\r\\n\\r\\n    //  ============ Modifiers  ============\\r\\n\\r\\n    // MODIFIERS\\r\\n    modifier onlyBridge() {\\r\\n        require(msg.sender == address(BRIDGE), \\\"onlyBridge\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isExists(uint256 taskId) {\\r\\n        require(exists(taskId), \\\"Task not exists\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Public functions ============\\r\\n\\r\\n    function count() public view override returns (uint256) {\\r\\n        return ids.current();\\r\\n    }\\r\\n\\r\\n    function exists(uint256 taskId) public view override returns (bool) {\\r\\n        return taskId > 0 && taskId <= ids.current();\\r\\n    }\\r\\n\\r\\n    function getTask(uint256 taskId) public view override returns (TaskItem memory) {\\r\\n        return tasks[taskId];\\r\\n    }\\r\\n\\r\\n    function getChainId() external view override returns (uint16) {\\r\\n        return lzChainId;\\r\\n    }\\r\\n    \\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable override nonReentrant {\\r\\n        \\r\\n        require(lzChainId == item.nftChainId, \\\"Invalid chainId\\\"); // action must start from NFTChain   \\r\\n        require(address(PROXY_NFT) != address(0), \\\"ProxyNFT unset\\\");\\r\\n\\r\\n        // inputs validation\\r\\n        HELPER.checkNewTask(msg.sender, item);\\r\\n        HELPER.checkNewTaskExt(ext);\\r\\n\\r\\n        // Transfer nfts to proxy station (NFTChain) \\r\\n        // in case of dst chain transection fail, enable user redeem nft back, after endTime\\r\\n        uint256 depositId = PROXY_NFT.deposit(msg.sender, item.nftContract, item.tokenIds, item.tokenAmounts, item.endTime);\\r\\n        item.depositId = depositId;\\r\\n             \\r\\n        // Create Task Item           \\r\\n        if (ext.chainId == item.nftChainId) { // same chain creation    \\r\\n            _createTask(item, ext);\\r\\n        }\\r\\n        else {\\r\\n            // cross chain creation\\r\\n            require(address(BRIDGE) != address(0), \\\"Bridge unset\\\");\\r\\n            BRIDGE.sendCreateTask{value: msg.value}(ext.chainId, payable(msg.sender), item, ext, _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice buyer join a task\\r\\n    num: how many ticket\\r\\n    */\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable override isExists(taskId) nonReentrant \\r\\n    {\\r\\n        // check inputs and task\\r\\n        HELPER.checkJoinTask(msg.sender, taskId, num, note);\\r\\n\\r\\n        // Calculate number of TOKEN to this contract\\r\\n        uint256 amount = tasks[taskId].price * num;\\r\\n\\r\\n        // deposit payment to token station.        \\r\\n        PROXY_TOKEN.deposit{value: msg.value}(msg.sender, tasks[taskId].acceptToken, amount);\\r\\n\\r\\n        // create tickets\\r\\n        uint32 lastTKID = _createTickets(taskId, num, msg.sender);\\r\\n\\r\\n        // update task item info\\r\\n        if (tasks[taskId].status == TaskStatus.Pending) {\\r\\n            tasks[taskId].status = TaskStatus.Open; \\r\\n        }\\r\\n        tasks[taskId].amountCollected += amount;    \\r\\n\\r\\n        emit JoinTask(taskId, msg.sender, amount, num, lastTKID, note);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice seller cancel the task, only when task status equal to 'Pending' or no funds amount\\r\\n    */\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \\r\\n    {                                \\r\\n        require((tasks[taskId].status == TaskStatus.Pending || tasks[taskId].status == TaskStatus.Open) && lastTIDs[taskId] <= 0, \\\"Opening or canceled\\\");        \\r\\n        require(tasks[taskId].seller == msg.sender, \\\"Invalid auth\\\"); // only seller can cancel\\r\\n        \\r\\n        // update status\\r\\n        tasks[taskId].status = TaskStatus.Close;\\r\\n        \\r\\n        _withdrawNFTs(taskId, payable(tasks[taskId].seller), true, _param);\\r\\n\\r\\n        // remove auto close Queue\\r\\n        if (address(HELPER.getAutoClose()) != address(0)) {\\r\\n            HELPER.getAutoClose().removeTask(taskId);\\r\\n        }\\r\\n\\r\\n        emit CancelTask(taskId, msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice finish a Task, \\r\\n    case 1: reach target crowd amount, status success, and start to pick a winner\\r\\n    case 2: time out and not reach the target amount, status close, and returns funds to claimable pool\\r\\n    */\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \\r\\n    {        \\r\\n        require(tasks[taskId].status == TaskStatus.Open, \\\"Not Open\\\");\\r\\n        require(tasks[taskId].amountCollected >= tasks[taskId].targetAmount || block.timestamp > tasks[taskId].endTime, \\\"Not reach target or not expired\\\");\\r\\n\\r\\n        // mark operation time\\r\\n        closeTime[taskId] = block.timestamp;\\r\\n\\r\\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {    \\r\\n            // Reached task target        \\r\\n            // update task, Task Close & start to draw\\r\\n            tasks[taskId].status = TaskStatus.Close; \\r\\n\\r\\n            // Request a random number from the generator based on a seed(max ticket number)\\r\\n            HELPER.getVRF().reqRandomNumber(taskId, lastTIDs[taskId]);\\r\\n\\r\\n            // add to auto draw Queue\\r\\n            if (address(HELPER.getAutoDraw()) != address(0)) {\\r\\n                HELPER.getAutoDraw().addTask(taskId, block.timestamp + HELPER.getDrawDelay());\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            // Task Fail & Expired\\r\\n            // update task\\r\\n            tasks[taskId].status = TaskStatus.Fail; \\r\\n\\r\\n            // NFTs back to seller            \\r\\n            _withdrawNFTs(taskId, payable(tasks[taskId].seller), false, _param);                            \\r\\n        }\\r\\n\\r\\n        // // remove auto close Queue\\r\\n        // if (address(HELPER.getAutoClose()) != address(0)) {\\r\\n        //     HELPER.getAutoClose().removeTask(taskId);\\r\\n        // }\\r\\n\\r\\n        emit CloseTask(taskId, msg.sender, tasks[taskId].status);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice start to picker a winner via chainlink VRF\\r\\n    */\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant\\r\\n    {                \\r\\n        require(tasks[taskId].status == TaskStatus.Close, \\\"Not Close\\\");\\r\\n        require(block.timestamp >= closeTime[taskId] + HELPER.getDrawDelay(), \\\"Delay limit\\\");\\r\\n         \\r\\n        // // Calculate the finalNumber based on the randomResult generated by ChainLink's fallback\\r\\n        uint32 finalNumber = HELPER.getVRF().viewRandomResult(taskId);\\r\\n        require(finalNumber > 0, \\\"Not Drawn\\\");\\r\\n        \\r\\n        Ticket memory ticket = _findWinnerTicket(taskId, finalNumber);    \\r\\n        require(ticket.number > 0, \\\"Can't find winner\\\");\\r\\n        \\r\\n        // update store item\\r\\n        tasks[taskId].status = TaskStatus.Success;      \\r\\n        winTickets[taskId] = ticket.number;\\r\\n        \\r\\n        // withdraw NFTs to winner (maybe cross chain)         \\r\\n        _withdrawNFTs(taskId, payable(ticket.owner), true, _param);\\r\\n\\r\\n        // dispatch Payment\\r\\n        _transferPayment(taskId, ticket.owner);    \\r\\n        \\r\\n        emit PickWinner(taskId, ticket.owner, finalNumber);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim tokens back \\r\\n    */\\r\\n    function claimTokens(uint256[] memory taskIds) override external nonReentrant\\r\\n    {\\r\\n        for (uint256 i = 0; i < taskIds.length; i++) {\\r\\n            _claimToken(taskIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim NFTs back (cross-chain case)\\r\\n    */\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) override external payable nonReentrant\\r\\n    {  \\r\\n        for (uint256 i = 0; i < taskIds.length; i++) {\\r\\n            _claimNFTs(taskIds[i], _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Remote(destination) functions ============\\r\\n    \\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) override external onlyBridge {\\r\\n\\r\\n        if (functionType == 1) { //TYPE_CREATE_TASK\\r\\n            (\\r\\n                ,\\r\\n                TaskItem memory item,\\r\\n                TaskExt memory ext\\r\\n            ) = abi.decode(_payload, (uint256, TaskItem, TaskExt));\\r\\n\\r\\n             _createTask(item, ext);\\r\\n                    \\r\\n        } else if (functionType == 2) { //TYPE_WITHDRAW_NFT\\r\\n\\r\\n            (, address user, uint256 depositId) = abi.decode(_payload, (uint8, address, uint256));            \\r\\n            \\r\\n            PROXY_NFT.withdraw(depositId, user); \\r\\n        }\\r\\n    }    \\r\\n\\r\\n    // ============ Internal functions ============\\r\\n\\r\\n    /**\\r\\n    @notice seller create a crowdluck task\\r\\n    returns: new taskId\\r\\n     */\\r\\n    function _createTask(TaskItem memory item, TaskExt memory ext) internal \\r\\n    {        \\r\\n        require(isAllowTask, \\\"Chain not allow task\\\");\\r\\n        HELPER.checkNewTaskRemote(item);\\r\\n\\r\\n        //create TaskId\\r\\n        ids.increment();\\r\\n        uint256 taskId = ids.current();        \\r\\n\\r\\n        // start now\\r\\n        if (item.status == TaskStatus.Open) {\\r\\n            item.startTime = item.startTime < block.timestamp ? item.startTime : block.timestamp;\\r\\n        } else {\\r\\n            require(block.timestamp <= item.startTime && item.startTime < item.endTime, \\\"Invalid time range\\\");\\r\\n            // start in future\\r\\n            item.status = TaskStatus.Pending;\\r\\n        }\\r\\n\\r\\n        //store taskItem\\r\\n        tasks[taskId] = item;\\r\\n\\r\\n        // add to auto close Queue\\r\\n        if (address(HELPER.getAutoClose()) != address(0)) {\\r\\n            HELPER.getAutoClose().addTask(taskId, item.endTime);\\r\\n        }\\r\\n\\r\\n        emit CreateTask(taskId, item, ext);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice join task succes. create tickets for buyer\\r\\n     * @param taskId task id\\r\\n     * @param num how many ticket\\r\\n     * @param buyer buery\\r\\n     */\\r\\n    function _createTickets(uint256 taskId, uint32 num, address buyer) internal returns (uint32) \\r\\n    {\\r\\n        uint32 start = lastTIDs[taskId] + 1;\\r\\n        uint32 lastTKID = start + num - 1;\\r\\n\\r\\n        tickets[taskId][lastTKID] = Ticket(lastTKID, num, buyer);\\r\\n        ticketIds[taskId].push(lastTKID);\\r\\n\\r\\n        userTickets[buyer][taskId] += num;\\r\\n        lastTIDs[taskId] = lastTKID;\\r\\n\\r\\n        emit CreateTickets(taskId, buyer, num, start, lastTKID);\\r\\n        return lastTKID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice search a winner ticket by number\\r\\n     * @param taskId task id\\r\\n     * @param number final number\\r\\n     */\\r\\n    function _findWinnerTicket(uint256 taskId, uint32 number) internal view returns (Ticket memory)\\r\\n    {\\r\\n        // find by ticketId\\r\\n        Ticket memory ticket = tickets[taskId][number];\\r\\n\\r\\n        if (ticket.number == 0) {\\r\\n            // find by ticket range (lastTKID array)\\r\\n            uint32[] memory tks = ticketIds[taskId];\\r\\n            for (uint256 i = 0; i < tks.length; i++) {\\r\\n                uint32 lastTKID = tks[i];\\r\\n                if (number < lastTKID) {\\r\\n                    ticket = tickets[taskId][lastTKID];\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return ticket;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim token back  \\r\\n    */\\r\\n    function _claimToken(uint256 taskId) internal isExists(taskId)\\r\\n    {\\r\\n        TaskItem memory item = tasks[taskId];\\r\\n        require(item.status == TaskStatus.Fail, \\\"Not Fail\\\");\\r\\n        require(userClaimeds[msg.sender][taskId] == 0, \\\"Claimed\\\");\\r\\n\\r\\n        // Calculate the funds buyer payed\\r\\n        uint256 amount = item.price * userTickets[msg.sender][taskId];\\r\\n        \\r\\n        // update claim info\\r\\n        userClaimeds[msg.sender][taskId] = amount;\\r\\n        \\r\\n        // Transfer\\r\\n        _transferOut(item.acceptToken, msg.sender, amount);\\r\\n\\r\\n        emit ClaimToken(taskId, msg.sender, amount, item.acceptToken);\\r\\n    }\\r\\n\\r\\n    function _claimNFTs(uint256 taskId, lzTxObj memory _param) internal isExists(taskId)\\r\\n    {\\r\\n        address seller = tasks[taskId].seller;\\r\\n        require(tasks[taskId].status == TaskStatus.Fail, \\\"Not Fail\\\");\\r\\n        require(userClaimeds[seller][taskId] == 0, \\\"Claimed\\\");\\r\\n        \\r\\n        // update claim info\\r\\n        userClaimeds[seller][taskId] = 1;\\r\\n        \\r\\n        // withdraw NFTs to winner (maybe cross chain)     \\r\\n        _withdrawNFTs(taskId, payable(seller), true, _param);\\r\\n    }\\r\\n\\r\\n    function _withdrawNFTs(uint256 taskId, address payable user, bool enableCrossChain, lzTxObj memory _param) internal\\r\\n    {\\r\\n        if (lzChainId == tasks[taskId].nftChainId) { // same chain\\r\\n            PROXY_NFT.withdraw(tasks[taskId].depositId, user);\\r\\n        }\\r\\n        else if (enableCrossChain){ // cross chain            \\r\\n            BRIDGE.sendWithdrawNFTs{value: msg.value}(tasks[taskId].nftChainId, user, tasks[taskId].depositId, _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice transfer protocol fee and funds\\r\\n     * @param taskId taskId\\r\\n     * @param winner winner address\\r\\n     * paymentStrategy for winner share is up to 50% (500 = 5%, 5,000 = 50%)\\r\\n     */\\r\\n    function _transferPayment(uint256 taskId, address winner) internal\\r\\n    {\\r\\n        // inner variables\\r\\n        address acceptToken = tasks[taskId].acceptToken;\\r\\n\\r\\n        // Calculate amount to seller\\r\\n        uint256 collected = tasks[taskId].amountCollected;\\r\\n        uint256 sellerAmount = collected;\\r\\n\\r\\n        // 1. Calculate protocol fee\\r\\n        uint256 fee = (collected * HELPER.getProtocolFee()) / 10000;\\r\\n        address feeRecipient = HELPER.getProtocolFeeRecipient();\\r\\n        require(fee >= 0, \\\"Invalid fee\\\");\\r\\n        sellerAmount -= fee;\\r\\n\\r\\n        // 2. Calculate winner share amount with payment stragey (up to 50%)\\r\\n        uint256 winnerAmount = 0;\\r\\n        uint256 winnerShare = 0;\\r\\n        uint256[] memory splitShare;\\r\\n        address[] memory splitAddr;\\r\\n        if (tasks[taskId].paymentStrategy > 0) {\\r\\n            (winnerShare, splitShare, splitAddr) = HELPER.getSTRATEGY().viewPaymentShares(tasks[taskId].paymentStrategy, winner, taskId);\\r\\n            require(winnerShare >= 0 && winnerShare <= 5000, \\\"Invalid strategy\\\");\\r\\n            require(splitShare.length <= 10, \\\"Invalid splitShare\\\"); // up to 10 splitter\\r\\n            if (winnerShare > 0) {\\r\\n                winnerAmount = (collected * winnerShare) / 10000;\\r\\n                sellerAmount -= winnerAmount;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // 3. transfer funds\\r\\n\\r\\n        // transfer funds to seller\\r\\n        _transferOut(acceptToken, tasks[taskId].seller, sellerAmount);\\r\\n\\r\\n        // transfer protocol fee\\r\\n        _transferOut(acceptToken, feeRecipient, fee);\\r\\n\\r\\n        // transfer winner share\\r\\n        if (winnerAmount > 0) {\\r\\n            if (splitShare.length > 0 && splitShare.length == splitAddr.length) {  \\r\\n                // split winner share for strategy case\\r\\n                uint256 splited = 10000;                \\r\\n                for (uint i=0; i < splitShare.length; i++) {   \\r\\n                    // make sure spliter cannot overflow\\r\\n                    if ((splited - splitShare[i]) >=0 && splitShare[i] > 0) { \\r\\n                        _transferOut(acceptToken, splitAddr[i], (winnerAmount * splitShare[i] / 10000));\\r\\n                        splited -= splitShare[i];\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            else {                \\r\\n                _transferOut(acceptToken, winner, winnerAmount);\\r\\n            }\\r\\n        }                         \\r\\n    }\\r\\n\\r\\n    function _transferOut(address token, address to, uint256 amount) internal {        \\r\\n        PROXY_TOKEN.withdraw(to, token, amount);\\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n\\r\\n    function setAllowTask(bool enable) external onlyOwner {\\r\\n        isAllowTask = enable;\\r\\n    }\\r\\n\\r\\n    function setLucksHelper(ILucksHelper addr) external onlyOwner {\\r\\n        HELPER = addr;\\r\\n    }\\r\\n\\r\\n    function setBridgeAndProxy(ILucksBridge _bridge, IProxyTokenStation _token, IProxyNFTStation _nft) external onlyOwner {\\r\\n        // require(address(BRIDGE) == address(0x0) && address(PROXY_TOKEN) == address(0x0) && address(PROXY_NFT) == address(0x0),\\r\\n        //  \\\"Lucks: BRIDGE and factory already initialized\\\"); // 1 time only\\r\\n        require(address(_bridge) != address(0x0), \\\"Invalid bridge\\\");\\r\\n        if (isAllowTask) {\\r\\n            require(address(_token) != address(0x0), \\\"Invalid token\\\");\\r\\n        }\\r\\n        require(address(_nft) != address(0x0), \\\"Invalid nft\\\");\\r\\n\\r\\n        BRIDGE = _bridge;\\r\\n        PROXY_TOKEN = _token;\\r\\n        PROXY_NFT = _nft;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x763cd2a75c6b6c095fdd5e1648bbb19cb2f16d00d05d9050655b233567e175db\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILucksAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);\\r\\n    event MinWaitPeriodUpdated(uint256 oldMinWaitPeriod, uint256 newMinWaitPeriod);\\r\\n\\r\\n    event RevertInvoke(uint256 taskId, bytes reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\",\"keccak256\":\"0x7075663be9f94c9aa04bf9b3ed9e32768ad48e7c06fffd9790e783127c45899a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILucksBridge.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem,TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n\\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n    event Revert(uint8 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce, bytes reason);\\r\\n    event RetryResult(uint8 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce, bool result);\\r\\n    \\r\\n    // ============= Task functions ====================\\r\\n    \\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable user,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams) \\r\\n    external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(        \\r\\n        uint16 _dstChainId,\\r\\n        address payable user,\\r\\n        uint256 depositId, \\r\\n        lzTxObj memory _lzTxParams) \\r\\n    external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,        \\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256, uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xbaa87b71d6b223308f2b3a830d0bcb08d7ce9b46ab6a94320e44b09b88f77333\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint32 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint32 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint32 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event CreateTickets(uint256 taskId, address buyer, uint32 num, uint32 start, uint32 end);\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa7c7ab5a13d58ddf4f8399efb4f6e4de4e9840fa78361b9b43ff3bcebcd381c2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksGroup {    \\r\\n\\r\\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\\r\\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\\r\\n   \\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\\r\\n    function createGroup(uint256 taskId, uint16 seat) external;\\r\\n}\",\"keccak256\":\"0x0f80c646005b1eb282e864517e9effd2f2a54411aec731e73fbd539808d6c38f\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksVRF} from \\\"./ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"./ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"./ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"./ILucksAuto.sol\\\";\\r\\n\\r\\ninterface ILucksHelper {\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\r\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\r\\n    function checkNFTContract(address addr) external view returns (bool);\\r\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\r\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\r\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\r\\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\r\\n\\r\\n    function getProtocolFeeRecipient() external view returns (address);\\r\\n    function getProtocolFee() external view returns (uint256);\\r\\n    function getMinTargetLimit(address token) external view returns (uint256);\\r\\n    function getDrawDelay() external view returns (uint32);\\r\\n\\r\\n    function getVRF() external view returns (ILucksVRF);\\r\\n    function getGROUPS() external view returns (ILucksGroup);\\r\\n    // function getREWARDS() external view returns (ILucksRewards);\\r\\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\\r\\n    function getAutoClose() external view returns (ILucksAuto);\\r\\n    function getAutoDraw() external view returns (ILucksAuto);\\r\\n}\\r\\n\",\"keccak256\":\"0x63a0408bc27abb14b326faf40dd9156c855c71a954d950de1a707efeebc51c31\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface ILucksPaymentStrategy {\\r\\n    \\r\\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\\r\\n}\",\"keccak256\":\"0xfb95b42ebb7f656c8373266c15d91659333f1ef508bba71429ea0932fe1dcdad\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILucksVRF {\\r\\n\\r\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\r\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number, bool autoPickWinner);\\r\\n    event RspToPickWinner(uint256 taskId, bool state, bytes reason);\\r\\n\\r\\n    /**\\r\\n     * Requests randomness from a user-provided max\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\r\\n\\r\\n    /**\\r\\n     * Views random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\r\\n}\",\"keccak256\":\"0xa8ec27f6cc3dad84857802d6385ae72947957cc58e16843029c61610ea626b78\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyNFTStation.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct DepositNFT {\\r\\n    address user; // deposit user\\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] amounts; // support ERC1155\\r\\n    uint256 endTime; // Task end time\\r\\n}\\r\\n\\r\\ninterface IProxyNFTStation {\\r\\n\\r\\n    event Deposit(uint256 depositId, address indexed user, address nft, uint256[] tokenIds, uint256[] amounts, uint256 endTime);\\r\\n    event Withdraw(uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n    event Redeem(uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n\\r\\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) external payable returns (uint256 depositId);    \\r\\n    function withdraw(uint256 depositId, address to) external;    \\r\\n    function redeem(uint256 depositId, address to) external;    \\r\\n}\",\"keccak256\":\"0xe0b5e710b268fd02cbcb779118a4894784b8b70429e61df6e3a715756c1798f0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IProxyTokenStation.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IProxyTokenStation {\\r\\n\\r\\n    event Deposit(address indexed user, address token, uint256 amount);\\r\\n    event Withdraw(address indexed user, address token, uint256 amount);\\r\\n\\r\\n    function deposit(address user, address token, uint256 amount) external payable;\\r\\n    function withdraw(address user, address token, uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x509322a01dab40a3fbe63c4daae1e399fa736e097425db9e1be05ae5b4641927\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162005e9138038062005e918339810160408190526200003491620000ea565b6001600055620000443362000098565b600380546001600160a01b0319166001600160a01b03949094169390931790925560f01b6001600160f01b0319166080526006805460ff60a01b1916600160a01b9215159290920291909117905562000153565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000606084860312156200010057600080fd5b83516001600160a01b03811681146200011857600080fd5b602085015190935061ffff811681146200013157600080fd5b604085015190925080151581146200014857600080fd5b809150509250925092565b60805160f01c615d0a620001876000396000818161032b015281816106a601528181611e1001526132580152615d0a6000f3fe6080604052600436106101e35760003560e01c806373ce314311610102578063bcd4f92011610095578063ee9a31a211610064578063ee9a31a21461078c578063f2fde38b146107b9578063f551bf20146107d9578063f72e7d5a1461080657600080fd5b8063bcd4f920146106ee578063cf260baf1461070e578063d4ab54891461074c578063e44cb8e41461076c57600080fd5b80638da5cb5b116100d15780638da5cb5b14610669578063917c4156146106945780639b10a404146106c8578063ba25acfe146106db57600080fd5b806373ce31431461052b578063774be5b31461053e57806378df3a521461055e5780638d9776721461057e57600080fd5b80633f7dc0141161017a57806365690f211161014957806365690f211461045f578063675f1879146104975780636a695360146104c4578063715018a61461051657600080fd5b80633f7dc0141461040657806344039687146104195780634f558e791461042c578063656571d11461044c57600080fd5b80632b32177f116101b65780632b32177f146102b85780632d08265a146102fa5780633408e4701461031c57806339d73da21461035e57600080fd5b806306661abd146101e85780630828f88d146102105780631d65e77e146102585780632741974914610285575b600080fd5b3480156101f457600080fd5b506101fd610833565b6040519081526020015b60405180910390f35b34801561021c57600080fd5b5061024361022b366004614f98565b600a6020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610207565b34801561026457600080fd5b50610278610273366004614f98565b610843565b60405161020791906157bf565b34801561029157600080fd5b506102436102a0366004614f98565b600c6020526000908152604090205463ffffffff1681565b3480156102c457600080fd5b506006546102ea9074010000000000000000000000000000000000000000900460ff1681565b6040519015158152602001610207565b34801561030657600080fd5b5061031a610315366004614cdf565b610a53565b005b34801561032857600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b60405161ffff9091168152602001610207565b34801561036a57600080fd5b506103cd610379366004615271565b600860209081526000928352604080842090915290825290205463ffffffff8082169164010000000081049091169068010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1683565b6040805163ffffffff948516815293909216602084015273ffffffffffffffffffffffffffffffffffffffff1690820152606001610207565b61031a610414366004615212565b610b13565b61031a610427366004615212565b611011565b34801561043857600080fd5b506102ea610447366004614f98565b6115f6565b61031a61045a366004614d14565b61160f565b34801561046b57600080fd5b506101fd61047a366004614cb3565b600e60209081526000928352604080842090915290825290205481565b3480156104a357600080fd5b506101fd6104b2366004614f98565b600b6020526000908152604090205481565b3480156104d057600080fd5b506004546104f19073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610207565b34801561052257600080fd5b5061031a6116cc565b61031a6105393660046152a1565b611759565b34801561054a57600080fd5b5061031a610559366004614db2565b611acf565b34801561056a57600080fd5b5061024361057936600461524f565b611d4e565b34801561058a57600080fd5b50610650610599366004614f98565b6007602081815260009283526040928390208054600182015460048301546005840154600685015496850154600886015460098701548a51808c01909b52600a88015473ffffffffffffffffffffffffffffffffffffffff9081168c52600b890154998c0199909952600c880154600d909801548988169b740100000000000000000000000000000000000000009889900461ffff9081169c988c169b88169a9990970460ff16989597969495939490921692908d565b6040516102079d9c9b9a999897969594939291906156ad565b34801561067557600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166104f1565b3480156106a057600080fd5b5061034b7f000000000000000000000000000000000000000000000000000000000000000081565b61031a6106d6366004614dfd565b611d97565b61031a6106e9366004615212565b61227f565b3480156106fa57600080fd5b5061031a610709366004614c79565b6129d5565b34801561071a57600080fd5b50610243610729366004614cb3565b600d60209081526000928352604080842090915290825290205463ffffffff1681565b34801561075857600080fd5b5061031a610767366004614d78565b612a9d565b34801561077857600080fd5b5061031a610787366004615350565b612b68565b34801561079857600080fd5b506006546104f19073ffffffffffffffffffffffffffffffffffffffff1681565b3480156107c557600080fd5b5061031a6107d4366004614c79565b612cdb565b3480156107e557600080fd5b506003546104f19073ffffffffffffffffffffffffffffffffffffffff1681565b34801561081257600080fd5b506005546104f19073ffffffffffffffffffffffffffffffffffffffff1681565b600061083e60025490565b905090565b61084b6147fa565b60008281526007602090815260409182902082516101e081018452815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910461ffff16828501526001830154168185015260028201805485518186028101860190965280865291949293606086019392908301828280156108fc57602002820191906000526020600020905b8154815260200190600101908083116108e8575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561095457602002820191906000526020600020905b815481526020019060010190808311610940575b5050509183525050600482015473ffffffffffffffffffffffffffffffffffffffff8116602083015260409091019074010000000000000000000000000000000000000000900460ff1660058111156109af576109af615bd9565b60058111156109c0576109c0615bd9565b8152600582015460208083019190915260068301546040808401919091526007840154606084015260088401546080840152600984015461ffff1660a08401528051808201909152600a84015473ffffffffffffffffffffffffffffffffffffffff168152600b8401549181019190915260c0820152600c82015460e0820152600d909101546101009091015292915050565b60026000541415610ac5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260009081555b8151811015610b0a57610af8828281518110610aeb57610aeb615c08565b6020026020010151612e0b565b80610b0281615b71565b915050610acd565b50506001600055565b81610b1d816115f6565b610b83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610abc565b60026000541415610bf0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610abc565b6002600090815560008481526007602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115610c3557610c35615bd9565b1480610c7e5750600160008481526007602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115610c7c57610c7c615bd9565b145b8015610c9c57506000838152600a602052604090205463ffffffff16155b610d02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f70656e696e67206f722063616e63656c6564000000000000000000000000006044820152606401610abc565b60008381526007602052604090205473ffffffffffffffffffffffffffffffffffffffff163314610d8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c6964206175746800000000000000000000000000000000000000006044820152606401610abc565b60008381526007602052604090206004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017905554610e0390849073ffffffffffffffffffffffffffffffffffffffff16600185613247565b600354604080517f23961975000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916323961975916004808301926020929190829003018186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea69190614c96565b73ffffffffffffffffffffffffffffffffffffffff1614610fce57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663239619756040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2957600080fd5b505afa158015610f3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f619190614c96565b73ffffffffffffffffffffffffffffffffffffffff1663c3084117846040518263ffffffff1660e01b8152600401610f9b91815260200190565b600060405180830381600087803b158015610fb557600080fd5b505af1158015610fc9573d6000803e3d6000fd5b505050505b604080518481523360208201527f9496d40f6a4059d9530f6361a578a4df0bfaeddcc0d913de433fd6caab89130391015b60405180910390a15050600160005550565b8161101b816115f6565b611081576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610abc565b600260005414156110ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610abc565b6002600081905560008481526007602052604090206004015474010000000000000000000000000000000000000000900460ff16600581111561113357611133615bd9565b1461119a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7420436c6f736500000000000000000000000000000000000000000000006044820152606401610abc565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319af32536040518163ffffffff1660e01b815260040160206040518083038186803b15801561120257600080fd5b505afa158015611216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123a91906152f0565b6000848152600b60205260409020546112599163ffffffff1690615a51565b4210156112c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f44656c6179206c696d69740000000000000000000000000000000000000000006044820152606401610abc565b600354604080517fedd3159d000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163edd3159d916004808301926020929190829003018186803b15801561132d57600080fd5b505afa158015611341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113659190614c96565b73ffffffffffffffffffffffffffffffffffffffff1663463fb8c6856040518263ffffffff1660e01b815260040161139f91815260200190565b60206040518083038186803b1580156113b757600080fd5b505afa1580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef91906152f0565b905060008163ffffffff1611611461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7420447261776e00000000000000000000000000000000000000000000006044820152606401610abc565b600061146d8583613408565b805190915063ffffffff166114de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f43616e27742066696e642077696e6e65720000000000000000000000000000006044820152606401610abc565b600085815260076020908152604080832060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740300000000000000000000000000000000000000001790558351600c9092529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff90921691909117905581015161157d908690600187613247565b61158b8582604001516135e9565b604081810151815187815273ffffffffffffffffffffffffffffffffffffffff909116602082015263ffffffff84168183015290517fdbd232ad4c53d8072282e817aa09d71ac746e500e70a8d1a3b5838f9b1ca038c9181900360600190a150506001600055505050565b6000808211801561160957506002548211155b92915050565b6002600054141561167c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610abc565b600260009081555b82518110156116c2576116b08382815181106116a2576116a2615c08565b602002602001015183613b93565b806116ba81615b71565b915050611684565b5050600160005550565b60015473ffffffffffffffffffffffffffffffffffffffff16331461174d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610abc565b6117576000613da2565b565b82611763816115f6565b6117c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610abc565b60026000541415611836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610abc565b60026000556003546040517fe7e46def00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e7e46def90611897903390889088908890600401615761565b60206040518083038186803b1580156118af57600080fd5b505afa1580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e79190614d95565b5060008481526007602052604081206008015461190b9063ffffffff861690615acc565b6005546000878152600760205260409081902060049081015491517f8340f549000000000000000000000000000000000000000000000000000000008152339181019190915273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481018490529293501690638340f5499034906064016000604051808303818588803b15801561199e57600080fd5b505af11580156119b2573d6000803e3d6000fd5b505050505060006119c4868633613e19565b90506000808781526007602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611a0557611a05615bd9565b1415611a5a57600086815260076020526040902060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555b6000868152600760205260408120600c018054849290611a7b908490615a51565b90915550506040517fea87b35b2e4036f868e0173f2e34f23253f6bb3d3976bda0fc3d48dd358d55a090611aba908890339086908a9087908b906158ac565b60405180910390a15050600160005550505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611b50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610abc565b73ffffffffffffffffffffffffffffffffffffffff8316611bcd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206272696467650000000000000000000000000000000000006044820152606401610abc565b60065474010000000000000000000000000000000000000000900460ff1615611c6d5773ffffffffffffffffffffffffffffffffffffffff8216611c6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420746f6b656e000000000000000000000000000000000000006044820152606401610abc565b73ffffffffffffffffffffffffffffffffffffffff8116611cea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c6964206e66740000000000000000000000000000000000000000006044820152606401610abc565b6006805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600580549385169382169390931790925560048054919093169116179055565b60096020528160005260406000208181548110611d6a57600080fd5b9060005260206000209060089182820401919006600402915091509054906101000a900463ffffffff1681565b60026000541415611e04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610abc565b600260005560208301517f000000000000000000000000000000000000000000000000000000000000000061ffff908116911614611e9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c696420636861696e496400000000000000000000000000000000006044820152606401610abc565b60045473ffffffffffffffffffffffffffffffffffffffff16611f1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f50726f78794e465420756e7365740000000000000000000000000000000000006044820152606401610abc565b6003546040517f1750518c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690631750518c90611f75903390879060040161567e565b60206040518083038186803b158015611f8d57600080fd5b505afa158015611fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc59190614d95565b506003546040517f0990a98200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690630990a9829061201c9085906004016157ac565b60206040518083038186803b15801561203457600080fd5b505afa158015612048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206c9190614d95565b50600480546040808601516060870151608088015161010089015193517f443cf78700000000000000000000000000000000000000000000000000000000815260009673ffffffffffffffffffffffffffffffffffffffff9096169563443cf787956120e095339590949093909201615620565b602060405180830381600087803b1580156120fa57600080fd5b505af115801561210e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121329190614fb1565b6101c085018190526020850151845191925061ffff918216911614156121615761215c84846140f7565b612274565b60065473ffffffffffffffffffffffffffffffffffffffff166121e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f42726964676520756e73657400000000000000000000000000000000000000006044820152606401610abc565b60065483516040517f2c90858d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691632c90858d913491612241919033908a908a908a906004016157d2565b6000604051808303818588803b15801561225a57600080fd5b505af115801561226e573d6000803e3d6000fd5b50505050505b505060016000555050565b81612289816115f6565b6122ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610abc565b6002600054141561235c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610abc565b6002600055600160008481526007602052604090206004015474010000000000000000000000000000000000000000900460ff1660058111156123a1576123a1615bd9565b14612408576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74204f70656e0000000000000000000000000000000000000000000000006044820152606401610abc565b600083815260076020819052604090912090810154600c90910154101580612440575060008381526007602052604090206006015442115b6124a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e6f7420726561636820746172676574206f72206e6f742065787069726564006044820152606401610abc565b6000838152600b6020908152604080832042905560079182905290912090810154600c909101541061290057600083815260076020908152604091829020600490810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017905560035483517fedd3159d000000000000000000000000000000000000000000000000000000008152935173ffffffffffffffffffffffffffffffffffffffff9091169363edd3159d9381840193909291829003018186803b15801561258a57600080fd5b505afa15801561259e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c29190614c96565b6000848152600a6020526040908190205490517f19c019890000000000000000000000000000000000000000000000000000000081526004810186905263ffffffff909116602482015273ffffffffffffffffffffffffffffffffffffffff91909116906319c0198990604401600060405180830381600087803b15801561264957600080fd5b505af115801561265d573d6000803e3d6000fd5b5050600354604080517f3156a58d00000000000000000000000000000000000000000000000000000000815290516000945073ffffffffffffffffffffffffffffffffffffffff9092169250633156a58d916004808301926020929190829003018186803b1580156126ce57600080fd5b505afa1580156126e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127069190614c96565b73ffffffffffffffffffffffffffffffffffffffff16146128fb57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633156a58d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561278957600080fd5b505afa15801561279d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c19190614c96565b73ffffffffffffffffffffffffffffffffffffffff1662b34ebd84600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319af32536040518163ffffffff1660e01b815260040160206040518083038186803b15801561284457600080fd5b505afa158015612858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287c91906152f0565b61288c9063ffffffff1642615a51565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401600060405180830381600087803b1580156128e257600080fd5b505af11580156128f6573d6000803e3d6000fd5b505050505b612973565b60008381526007602052604081206004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740400000000000000000000000000000000000000001790555461297391859173ffffffffffffffffffffffffffffffffffffffff169085613247565b600083815260076020526040908190206004015490517f8bd3be2963318bc29de9701e2edec7b2546ea1b285e0d51596a7bc9e6aa7fe3091610fff91869133917401000000000000000000000000000000000000000090910460ff169061587c565b60015473ffffffffffffffffffffffffffffffffffffffff163314612a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610abc565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314612b1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610abc565b6006805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60065473ffffffffffffffffffffffffffffffffffffffff163314612be9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79427269646765000000000000000000000000000000000000000000006044820152606401610abc565b8160ff1660011415612c215760008082806020019051810190612c0c919061509d565b9250925050612c1b82826140f7565b50505050565b8160ff1660021415612cd75760008082806020019051810190612c44919061530d565b600480546040517ef714ce00000000000000000000000000000000000000000000000000000000815291820183905273ffffffffffffffffffffffffffffffffffffffff80851660248401529396509194509116915062f714ce90604401600060405180830381600087803b158015612cbc57600080fd5b505af1158015612cd0573d6000803e3d6000fd5b5050505050505b5050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612d5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610abc565b73ffffffffffffffffffffffffffffffffffffffff8116612dff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610abc565b612e0881613da2565b50565b80612e15816115f6565b612e7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610abc565b600082815260076020908152604080832081516101e081018352815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910461ffff168286015260018301541681840152600282018054845181870281018701909552808552919492936060860193909290830182828015612f2c57602002820191906000526020600020905b815481526020019060010190808311612f18575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015612f8457602002820191906000526020600020905b815481526020019060010190808311612f70575b5050509183525050600482015473ffffffffffffffffffffffffffffffffffffffff8116602083015260409091019074010000000000000000000000000000000000000000900460ff166005811115612fdf57612fdf615bd9565b6005811115612ff057612ff0615bd9565b8152600582015460208083019190915260068301546040808401919091526007840154606084015260088401546080840152600984015461ffff1660a08401528051808201909152600a84015473ffffffffffffffffffffffffffffffffffffffff168152600b8401549181019190915260c0820152600c82015460e0820152600d9091015461010090910152905060048160c00151600581111561309757613097615bd9565b146130fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74204661696c0000000000000000000000000000000000000000000000006044820152606401610abc565b336000908152600e6020908152604080832086845290915290205415613180576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f436c61696d6564000000000000000000000000000000000000000000000000006044820152606401610abc565b336000908152600d602090815260408083208684529091528120546101408301516131b19163ffffffff1690615acc565b336000818152600e60209081526040808320898452909152902082905560a08401519192506131e1919083614761565b60a08201516040805186815233602082015280820184905273ffffffffffffffffffffffffffffffffffffffff9092166060830152517f8519296219951e1d116256cc20f1ea8c0aa35633f684a8b3bc42e4b6ffa17a5b9181900360800190a150505050565b6000848152600760205260409020547f000000000000000000000000000000000000000000000000000000000000000061ffff9081167401000000000000000000000000000000000000000090920416141561333b576004805460008681526007602052604090819020600d015490517ef714ce0000000000000000000000000000000000000000000000000000000081529283015273ffffffffffffffffffffffffffffffffffffffff8581166024840152169062f714ce90604401600060405180830381600087803b15801561331e57600080fd5b505af1158015613332573d6000803e3d6000fd5b50505050612c1b565b8115612c1b57600654600085815260076020526040908190208054600d9091015491517f3885c8f200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90931692633885c8f29234926133d0927401000000000000000000000000000000000000000090910461ffff16918991889060040161583d565b6000604051808303818588803b1580156133e957600080fd5b505af11580156133fd573d6000803e3d6000fd5b505050505050505050565b6040805160608101825260008082526020820181905291810191909152600083815260086020908152604080832063ffffffff868116855290835292819020815160608101835290548085168083526401000000008204909516938201939093526801000000000000000090920473ffffffffffffffffffffffffffffffffffffffff1690820152906135e25760008481526009602090815260408083208054825181850281018501909352808352919290919083018282801561351757602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116134da5790505b5050505050905060005b81518110156135df57600082828151811061353e5761353e615c08565b602002602001015190508063ffffffff168663ffffffff1610156135cc57600087815260086020908152604080832063ffffffff94851684528252918290208251606081018452905480851682526401000000008104909416918101919091526801000000000000000090920473ffffffffffffffffffffffffffffffffffffffff169082015292506135df565b50806135d781615b71565b915050613521565b50505b9392505050565b6000828152600760209081526040808320600480820154600c9092015460035484517fa5a41031000000000000000000000000000000000000000000000000000000008152945173ffffffffffffffffffffffffffffffffffffffff948516979296879693956127109593169363a5a41031938181019391829003018186803b15801561367557600080fd5b505afa158015613689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ad9190614fb1565b6136b79085615acc565b6136c19190615a91565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372c8fc0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561372d57600080fd5b505afa158015613741573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137659190614c96565b90506137718284615b09565b600088815260076020526040812060090154919450908190606090819061ffff1615613a2a57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393f1c9116040518163ffffffff1660e01b815260040160206040518083038186803b1580156137ff57600080fd5b505afa158015613813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138379190614c96565b60008c815260076020526040908190206009015490517f74a0a25100000000000000000000000000000000000000000000000000000000815261ffff909116600482015273ffffffffffffffffffffffffffffffffffffffff8c81166024830152604482018e905291909116906374a0a2519060640160006040518083038186803b1580156138c557600080fd5b505afa1580156138d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261391f9190810190614fca565b91945092509050611388831115613992576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c6964207374726174656779000000000000000000000000000000006044820152606401610abc565b600a825111156139fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642073706c6974536861726500000000000000000000000000006044820152606401610abc565b8215613a2a57612710613a11848a615acc565b613a1b9190615a91565b9350613a278488615b09565b96505b60008b815260076020526040902054613a5b908a9073ffffffffffffffffffffffffffffffffffffffff1689614761565b613a66898688614761565b8315613b865760008251118015613a7e575080518251145b15613b7b5761271060005b8351811015613b74576000848281518110613aa657613aa6615c08565b602002602001015183613ab99190615b09565b10158015613ae057506000848281518110613ad657613ad6615c08565b6020026020010151115b15613b6257613b3a8b848381518110613afb57613afb615c08565b6020026020010151612710878581518110613b1857613b18615c08565b60200260200101518a613b2b9190615acc565b613b359190615a91565b614761565b838181518110613b4c57613b4c615c08565b602002602001015182613b5f9190615b09565b91505b80613b6c81615b71565b915050613a89565b5050613b86565b613b86898b86614761565b5050505050505050505050565b81613b9d816115f6565b613c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610abc565b6000838152600760205260409020805460049182015473ffffffffffffffffffffffffffffffffffffffff909116919074010000000000000000000000000000000000000000900460ff166005811115613c5f57613c5f615bd9565b14613cc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74204661696c0000000000000000000000000000000000000000000000006044820152606401610abc565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e6020908152604080832087845290915290205415613d5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f436c61696d6564000000000000000000000000000000000000000000000000006044820152606401610abc565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e602090815260408083208784529091529020600190819055612c1b908590839086613247565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000838152600a60205260408120548190613e3b9063ffffffff166001615a69565b905060006001613e4b8684615a69565b613e559190615b20565b905060405180606001604052808263ffffffff1681526020018663ffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152506008600088815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600960008781526020019081526020016000208190806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff16021790555084600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060008282829054906101000a900463ffffffff1661402a9190615a69565b82546101009290920a63ffffffff8181021990931691831602179091556000888152600a602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001686851690811790915582518b815273ffffffffffffffffffffffffffffffffffffffff8a169281019290925289841692820192909252918516606083015260808201527ffc0c8dc09c35f8d4d7007cff804a5be6e1f98185a4af52c8b93ed5a271a8bfcb915060a00160405180910390a195945050505050565b60065474010000000000000000000000000000000000000000900460ff1661417b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f436861696e206e6f7420616c6c6f77207461736b0000000000000000000000006044820152606401610abc565b6003546040517fc735fd7400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063c735fd74906141d19085906004016157bf565b60206040518083038186803b1580156141e957600080fd5b505afa1580156141fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142219190614d95565b50614230600280546001019055565b600061423b60025490565b905060018360c00151600581111561425557614255615bd9565b141561427c57428360e001511061426c5742614272565b8260e001515b60e0840152614306565b8260e00151421115801561429857508261010001518360e00151105b6142fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e676500000000000000000000000000006044820152606401610abc565b600060c08401525b600081815260076020908152604091829020855181548388015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff9283161717825592860151600182018054919094167fffffffffffffffffffffffff00000000000000000000000000000000000000009190911617909255606085015180518693926143cd9260028501929101906148a4565b50608082015180516143e99160038401916020909101906148a4565b5060a082015160048201805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560c0850151927fffffffffffffffffffffff00000000000000000000000000000000000000000016177401000000000000000000000000000000000000000083600581111561448557614485615bd9565b021790555060e082015160058201556101008201516006820155610120820151600782015561014082015160088201556101608201516009820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff9092169190911790556101808201518051600a830180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055602091820151600b8401556101a0840151600c8401556101c090930151600d90920191909155600354604080517f2396197500000000000000000000000000000000000000000000000000000000815290516000949290921692632396197592600480840193829003018186803b1580156145b457600080fd5b505afa1580156145c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145ec9190614c96565b73ffffffffffffffffffffffffffffffffffffffff161461472157600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663239619756040518163ffffffff1660e01b815260040160206040518083038186803b15801561466f57600080fd5b505afa158015614683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146a79190614c96565b73ffffffffffffffffffffffffffffffffffffffff1662b34ebd828561010001516040518363ffffffff1660e01b81526004016146ee929190918252602082015260400190565b600060405180830381600087803b15801561470857600080fd5b505af115801561471c573d6000803e3d6000fd5b505050505b7f0c51dc45078ee7d51611387251b9b023fb2b4c14ab4bdac08bca2820f8a101ea818484604051614754939291906158fd565b60405180910390a1505050565b6005546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528581166024830152604482018490529091169063d9caed1290606401600060405180830381600087803b1580156147dd57600080fd5b505af11580156147f1573d6000803e3d6000fd5b50505050505050565b604080516101e0810182526000808252602082018190529181018290526060808201819052608082015260a081018290529060c0820190815260200160008152602001600081526020016000815260200160008152602001600061ffff1681526020016148906040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b815260200160008152602001600081525090565b8280548282559060005260206000209081019282156148df579160200282015b828111156148df5782518255916020019190600101906148c4565b506148eb9291506148ef565b5090565b5b808211156148eb57600081556001016148f0565b803561490f81615c66565b919050565b805161490f81615c66565b600082601f83011261493057600080fd5b81356020614945614940836159e7565b615998565b80838252828201915082860187848660051b890101111561496557600080fd5b60005b8581101561498457813584529284019290840190600101614968565b5090979650505050505050565b600082601f8301126149a257600080fd5b815160206149b2614940836159e7565b80838252828201915082860187848660051b89010111156149d257600080fd5b60005b85811015614984578151845292840192908401906001016149d5565b600082601f830112614a0257600080fd5b8135614a1061494082615a0b565b818152846020838601011115614a2557600080fd5b816020850160208301376000918101602001919091529392505050565b803561490f81615c96565b805161490f81615c96565b600082601f830112614a6957600080fd5b8151614a7761494082615a0b565b818152846020838601011115614a8c57600080fd5b614a9d826020830160208701615b45565b949350505050565b600060408284031215614ab757600080fd5b614abf615928565b90508135614acc81615c66565b808252506020820135602082015292915050565b600060408284031215614af257600080fd5b614afa615928565b90508151614b0781615c66565b808252506020820151602082015292915050565b600060608284031215614b2d57600080fd5b614b35615951565b90508135614b4281615ca3565b8152602082013567ffffffffffffffff80821115614b5f57600080fd5b614b6b858386016149f1565b60208401526040840135915080821115614b8457600080fd5b50614b91848285016149f1565b60408301525092915050565b600060608284031215614baf57600080fd5b614bb7615951565b90508151614bc481615ca3565b8152602082015167ffffffffffffffff80821115614be157600080fd5b614bed85838601614a58565b60208401526040840151915080821115614c0657600080fd5b50614b9184828501614a58565b600060608284031215614c2557600080fd5b614c2d615951565b90508135815260208201356020820152604082013567ffffffffffffffff811115614c5757600080fd5b614b91848285016149f1565b803561490f81615ca3565b805161490f81615ca3565b600060208284031215614c8b57600080fd5b81356135e281615c66565b600060208284031215614ca857600080fd5b81516135e281615c66565b60008060408385031215614cc657600080fd5b8235614cd181615c66565b946020939093013593505050565b600060208284031215614cf157600080fd5b813567ffffffffffffffff811115614d0857600080fd5b614a9d8482850161491f565b60008060408385031215614d2757600080fd5b823567ffffffffffffffff80821115614d3f57600080fd5b614d4b8683870161491f565b93506020850135915080821115614d6157600080fd5b50614d6e85828601614c13565b9150509250929050565b600060208284031215614d8a57600080fd5b81356135e281615c88565b600060208284031215614da757600080fd5b81516135e281615c88565b600080600060608486031215614dc757600080fd5b8335614dd281615c66565b92506020840135614de281615c66565b91506040840135614df281615c66565b809150509250925092565b600080600060608486031215614e1257600080fd5b833567ffffffffffffffff80821115614e2a57600080fd5b908501906102008288031215614e3f57600080fd5b614e47615974565b614e5083614904565b8152614e5e60208401614c63565b6020820152614e6f60408401614904565b6040820152606083013582811115614e8657600080fd5b614e928982860161491f565b606083015250608083013582811115614eaa57600080fd5b614eb68982860161491f565b608083015250614ec860a08401614904565b60a0820152614ed960c08401614a42565b60c082015260e08381013590820152610100808401359082015261012080840135908201526101408084013590820152610160614f17818501614c63565b90820152610180614f2a89858301614aa5565b81830152506101c0808401356101a08301526101e08401358183015250809550506020860135915080821115614f5f57600080fd5b614f6b87838801614b1b565b93506040860135915080821115614f8157600080fd5b50614f8e86828701614c13565b9150509250925092565b600060208284031215614faa57600080fd5b5035919050565b600060208284031215614fc357600080fd5b5051919050565b600080600060608486031215614fdf57600080fd5b8351925060208085015167ffffffffffffffff80821115614fff57600080fd5b61500b88838901614991565b9450604087015191508082111561502157600080fd5b508501601f8101871361503357600080fd5b8051615041614940826159e7565b8082825284820191508484018a868560051b870101111561506157600080fd5b600094505b8385101561508d57805161507981615c66565b835260019490940193918501918501615066565b5080955050505050509250925092565b6000806000606084860312156150b257600080fd5b83519250602084015167ffffffffffffffff808211156150d157600080fd5b9085019061020082880312156150e657600080fd5b6150ee615974565b6150f783614914565b815261510560208401614c6e565b602082015261511660408401614914565b604082015260608301518281111561512d57600080fd5b61513989828601614991565b60608301525060808301518281111561515157600080fd5b61515d89828601614991565b60808301525061516f60a08401614914565b60a082015261518060c08401614a4d565b60c082015260e083810151908201526101008084015190820152610120808401519082015261014080840151908201526101606151be818501614c6e565b908201526101806151d189858301614ae0565b908201526101c0838101516101a08301526101e0909301519281019290925260408601519193508082111561520557600080fd5b50614f8e86828701614b9d565b6000806040838503121561522557600080fd5b82359150602083013567ffffffffffffffff81111561524357600080fd5b614d6e85828601614c13565b6000806040838503121561526257600080fd5b50508035926020909101359150565b6000806040838503121561528457600080fd5b82359150602083013561529681615cb3565b809150509250929050565b6000806000606084860312156152b657600080fd5b8335925060208401356152c881615cb3565b9150604084013567ffffffffffffffff8111156152e457600080fd5b614f8e868287016149f1565b60006020828403121561530257600080fd5b81516135e281615cb3565b60008060006060848603121561532257600080fd5b835161532d81615cc5565b602085015190935061533e81615c66565b80925050604084015190509250925092565b6000806040838503121561536357600080fd5b823561536e81615cc5565b9150602083013567ffffffffffffffff81111561538a57600080fd5b614d6e858286016149f1565b600081518084526020808501945080840160005b838110156153c6578151875295820195908201906001016153aa565b509495945050505050565b600081518084526153e9816020860160208601615b45565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60068110615452577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b61ffff8151168252600060208201516060602085015261547960608501826153d1565b90506040830151848203604086015261549282826153d1565b95945050505050565b805173ffffffffffffffffffffffffffffffffffffffff168252600061020060208301516154cf602086018261ffff169052565b5060408301516154f7604086018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015181606086015261550f82860182615396565b915050608083015184820360808601526155298282615396565b91505060a083015161555360a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015161556660c086018261541b565b5060e083810151908501526101008084015190850152610120808401519085015261014080840151908501526101608084015161ffff811682870152505061018083810151805173ffffffffffffffffffffffffffffffffffffffff168683015260208101516101a087015250506101a08301516101c085810191909152909201516101e090930192909252919050565b80518252602081015160208301526000604082015160606040850152614a9d60608501826153d1565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a0604083015261565960a0830186615396565b828103606084015261566b8186615396565b9150508260808301529695505050505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000614a9d604083018461549b565b73ffffffffffffffffffffffffffffffffffffffff8e8116825261ffff8e1660208301528c811660408301528b1660608201526101c081016156f2608083018c61541b565b8960a08301528860c08301528760e08301528661010083015261ffff8616610120830152615744610140830186805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b6101808201939093526101a001529b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8516815283602082015263ffffffff831660408201526080606082015260006157a260808301846153d1565b9695505050505050565b6020815260006135e26020830184615456565b6020815260006135e2602083018461549b565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a06040820152600061580b60a083018661549b565b828103606084015261581d8186615456565b9050828103608084015261583181856155f7565b98975050505050505050565b61ffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201528260408201526080606082015260006157a260808301846155f7565b83815273ffffffffffffffffffffffffffffffffffffffff8316602082015260608101614a9d604083018461541b565b86815273ffffffffffffffffffffffffffffffffffffffff86166020820152846040820152600063ffffffff808616606084015280851660808401525060c060a083015261583160c08301846153d1565b838152606060208201526000615916606083018561549b565b82810360408401526157a28185615456565b6040805190810167ffffffffffffffff8111828210171561594b5761594b615c37565b60405290565b6040516060810167ffffffffffffffff8111828210171561594b5761594b615c37565b6040516101e0810167ffffffffffffffff8111828210171561594b5761594b615c37565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156159df576159df615c37565b604052919050565b600067ffffffffffffffff821115615a0157615a01615c37565b5060051b60200190565b600067ffffffffffffffff821115615a2557615a25615c37565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008219821115615a6457615a64615baa565b500190565b600063ffffffff808316818516808303821115615a8857615a88615baa565b01949350505050565b600082615ac7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615b0457615b04615baa565b500290565b600082821015615b1b57615b1b615baa565b500390565b600063ffffffff83811690831681811015615b3d57615b3d615baa565b039392505050565b60005b83811015615b60578181015183820152602001615b48565b83811115612c1b5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615ba357615ba3615baa565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612e0857600080fd5b8015158114612e0857600080fd5b60068110612e0857600080fd5b61ffff81168114612e0857600080fd5b63ffffffff81168114612e0857600080fd5b60ff81168114612e0857600080fdfea26469706673582212206d28560857e77895f624f75745b3f96404a19cef7519418fe994f41e380ea32564736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_allowTask": "allow running task",
          "_chainId": "layerZero chainId",
          "_helper": "protocol helper address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Openluck LucksTrade.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelTask(uint256,(uint256,uint256,bytes))": {
        "notice": "seller cancel the task, only when task status equal to 'Pending' or no funds amount"
      },
      "claimNFTs(uint256[],(uint256,uint256,bytes))": {
        "notice": "when taskItem Fail, user can claim NFTs back (cross-chain case)"
      },
      "claimTokens(uint256[])": {
        "notice": "when taskItem Fail, user can claim tokens back "
      },
      "closeTask(uint256,(uint256,uint256,bytes))": {
        "notice": "finish a Task,  case 1: reach target crowd amount, status success, and start to pick a winner case 2: time out and not reach the target amount, status close, and returns funds to claimable pool"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "joinTask(uint256,uint32,string)": {
        "notice": "buyer join a task num: how many ticket"
      },
      "pickWinner(uint256,(uint256,uint256,bytes))": {
        "notice": "start to picker a winner via chainlink VRF"
      }
    },
    "notice": "It is the core contract for crowd funds to buy NFTs result to one lucky winner randomness provided externally.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 507,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 307,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5636,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "ids",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)4187_storage"
      },
      {
        "astId": 5639,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "HELPER",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILucksHelper)8801"
      },
      {
        "astId": 5642,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "PROXY_NFT",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IProxyNFTStation)9063"
      },
      {
        "astId": 5645,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "PROXY_TOKEN",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IProxyTokenStation)9100"
      },
      {
        "astId": 5648,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "BRIDGE",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ILucksBridge)8365"
      },
      {
        "astId": 5652,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "isAllowTask",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 5657,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "tasks",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(TaskItem)8416_storage)"
      },
      {
        "astId": 5664,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "tickets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Ticket)8430_storage))"
      },
      {
        "astId": 5669,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "ticketIds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_uint32)dyn_storage)"
      },
      {
        "astId": 5673,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "lastTIDs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 5677,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "closeTime",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5681,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "winTickets",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 5687,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "userTickets",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint32))"
      },
      {
        "astId": 5693,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "userClaimeds",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILucksBridge)8365": {
        "encoding": "inplace",
        "label": "contract ILucksBridge",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksHelper)8801": {
        "encoding": "inplace",
        "label": "contract ILucksHelper",
        "numberOfBytes": "20"
      },
      "t_contract(IProxyNFTStation)9063": {
        "encoding": "inplace",
        "label": "contract IProxyNFTStation",
        "numberOfBytes": "20"
      },
      "t_contract(IProxyTokenStation)9100": {
        "encoding": "inplace",
        "label": "contract IProxyTokenStation",
        "numberOfBytes": "20"
      },
      "t_enum(TaskStatus)8376": {
        "encoding": "inplace",
        "label": "enum TaskStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint32)"
      },
      "t_mapping(t_uint256,t_array(t_uint32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint32)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(Ticket)8430_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint32 => struct Ticket))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Ticket)8430_storage)"
      },
      "t_mapping(t_uint256,t_struct(TaskItem)8416_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TaskItem)",
        "numberOfBytes": "32",
        "value": "t_struct(TaskItem)8416_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint32,t_struct(Ticket)8430_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct Ticket)",
        "numberOfBytes": "32",
        "value": "t_struct(Ticket)8430_storage"
      },
      "t_struct(Counter)4187_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4186,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ExclusiveToken)8381_storage": {
        "encoding": "inplace",
        "label": "struct ExclusiveToken",
        "members": [
          {
            "astId": 8378,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8380,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TaskItem)8416_storage": {
        "encoding": "inplace",
        "label": "struct TaskItem",
        "members": [
          {
            "astId": 8383,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8385,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "nftChainId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8387,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8390,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "tokenIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8393,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "tokenAmounts",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8395,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "acceptToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 8398,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "status",
            "offset": 20,
            "slot": "4",
            "type": "t_enum(TaskStatus)8376"
          },
          {
            "astId": 8400,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8402,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "endTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8404,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "targetAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8406,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "price",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8408,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "paymentStrategy",
            "offset": 0,
            "slot": "9",
            "type": "t_uint16"
          },
          {
            "astId": 8411,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "exclusiveToken",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(ExclusiveToken)8381_storage"
          },
          {
            "astId": 8413,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "amountCollected",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 8415,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "depositId",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Ticket)8430_storage": {
        "encoding": "inplace",
        "label": "struct Ticket",
        "members": [
          {
            "astId": 8425,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8427,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "count",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8429,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "owner",
            "offset": 8,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
{
  "address": "0x41933a13Fb756A8382115c065782f4362002945d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_acceptTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "contract ILucksExecutor",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "contract ILucksVRF",
          "name": "_vrf",
          "type": "address"
        },
        {
          "internalType": "contract ILucksGroup",
          "name": "_groups",
          "type": "address"
        },
        {
          "internalType": "contract ILucksPaymentStrategy",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "contract ILucksAuto",
          "name": "_auto_close",
          "type": "address"
        },
        {
          "internalType": "contract ILucksAuto",
          "name": "_auto_draw",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUTO_CLOSE",
      "outputs": [
        {
          "internalType": "contract ILucksAuto",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUTO_DRAW",
      "outputs": [
        {
          "internalType": "contract ILucksAuto",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DRAW_DELAY_SEC",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR",
      "outputs": [
        {
          "internalType": "contract ILucksExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GROUPS",
      "outputs": [
        {
          "internalType": "contract ILucksGroup",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PER_JOIN_NUM",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY",
      "outputs": [
        {
          "internalType": "contract ILucksPaymentStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VRF",
      "outputs": [
        {
          "internalType": "contract ILucksVRF",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "acceptToken",
          "type": "address"
        }
      ],
      "name": "checkAcceptToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "checkExclusive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "checkJoinTask",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "checkNFTContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskItem",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "checkNewTask",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "note",
              "type": "string"
            }
          ],
          "internalType": "struct TaskExt",
          "name": "ext",
          "type": "tuple"
        }
      ],
      "name": "checkNewTaskExt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskItem",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "checkNewTaskRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        }
      ],
      "name": "checkPerJoinLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "checkTokenListing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAutoClose",
      "outputs": [
        {
          "internalType": "contract ILucksAuto",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAutoDraw",
      "outputs": [
        {
          "internalType": "contract ILucksAuto",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDrawDelay",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGROUPS",
      "outputs": [
        {
          "internalType": "contract ILucksGroup",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getMinTargetLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSTRATEGY",
      "outputs": [
        {
          "internalType": "contract ILucksPaymentStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVRF",
      "outputs": [
        {
          "internalType": "contract ILucksVRF",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minTargetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setAcceptTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "second",
          "type": "uint32"
        }
      ],
      "name": "setDrawDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksExecutor",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        }
      ],
      "name": "setJoinLimitNum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksAuto",
          "name": "_auto_close",
          "type": "address"
        },
        {
          "internalType": "contract ILucksAuto",
          "name": "_auto_draw",
          "type": "address"
        }
      ],
      "name": "setLucksAuto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksGroup",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setLucksGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksVRF",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setLucksVRF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMinTargetAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksPaymentStrategy",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setPaymentStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setProtocolFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xba7177f31e6aac8fc353d55a659b1743281ee1017f0f315e664e534c4316048c",
  "receipt": {
    "to": null,
    "from": "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
    "contractAddress": "0x41933a13Fb756A8382115c065782f4362002945d",
    "transactionIndex": 0,
    "gasUsed": "3192444",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000880000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000001000000000000200000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000020000000000000000000000000200000000000000000000000000000000000000000",
    "blockHash": "0x2c38efe9ef920692fa826c145c25bd3668f09516775f490b5ab1f4f258aa630b",
    "transactionHash": "0xba7177f31e6aac8fc353d55a659b1743281ee1017f0f315e664e534c4316048c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19698511,
        "transactionHash": "0xba7177f31e6aac8fc353d55a659b1743281ee1017f0f315e664e534c4316048c",
        "address": "0x41933a13Fb756A8382115c065782f4362002945d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b770f460978c456d69bc46463dfda71feee60ad"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2c38efe9ef920692fa826c145c25bd3668f09516775f490b5ab1f4f258aa630b"
      }
    ],
    "blockNumber": 19698511,
    "cumulativeGasUsed": "3192444",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0000000000000000000000000000000000000000"
    ],
    "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
    200,
    "0x314a051Fe16Cd23043F4Dd38940C4A62e6e87faC",
    "0xb0FEbA79F5f676333982Dc05874507e3DD015791",
    "0xd7Ff5C1Cd8707f10FD34daD677f8B103AA79DdC3",
    "0x38D34217e86576F58f410cff9E69f8364AcEF9e7",
    "0xd4FDF1787D7cd9293C8B45C597256645fBDe8Ce6",
    "0xdfA87153Ce26976Aa05bE0acD98c632f871A3106"
  ],
  "numDeployments": 1,
  "solcInputHash": "19d40a0b84454310c92d15580633cae2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_acceptTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"contract ILucksExecutor\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"contract ILucksVRF\",\"name\":\"_vrf\",\"type\":\"address\"},{\"internalType\":\"contract ILucksGroup\",\"name\":\"_groups\",\"type\":\"address\"},{\"internalType\":\"contract ILucksPaymentStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"contract ILucksAuto\",\"name\":\"_auto_close\",\"type\":\"address\"},{\"internalType\":\"contract ILucksAuto\",\"name\":\"_auto_draw\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTO_CLOSE\",\"outputs\":[{\"internalType\":\"contract ILucksAuto\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTO_DRAW\",\"outputs\":[{\"internalType\":\"contract ILucksAuto\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRAW_DELAY_SEC\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"contract ILucksExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GROUPS\",\"outputs\":[{\"internalType\":\"contract ILucksGroup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_JOIN_NUM\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY\",\"outputs\":[{\"internalType\":\"contract ILucksPaymentStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRF\",\"outputs\":[{\"internalType\":\"contract ILucksVRF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"}],\"name\":\"checkAcceptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkExclusive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"checkJoinTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkNFTContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"checkNewTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"internalType\":\"struct TaskExt\",\"name\":\"ext\",\"type\":\"tuple\"}],\"name\":\"checkNewTaskExt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"checkNewTaskRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"}],\"name\":\"checkPerJoinLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"checkTokenListing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoClose\",\"outputs\":[{\"internalType\":\"contract ILucksAuto\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoDraw\",\"outputs\":[{\"internalType\":\"contract ILucksAuto\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDrawDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGROUPS\",\"outputs\":[{\"internalType\":\"contract ILucksGroup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinTargetLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSTRATEGY\",\"outputs\":[{\"internalType\":\"contract ILucksPaymentStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVRF\",\"outputs\":[{\"internalType\":\"contract ILucksVRF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTargetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setAcceptTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"second\",\"type\":\"uint32\"}],\"name\":\"setDrawDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksExecutor\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"}],\"name\":\"setJoinLimitNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksAuto\",\"name\":\"_auto_close\",\"type\":\"address\"},{\"internalType\":\"contract ILucksAuto\",\"name\":\"_auto_draw\",\"type\":\"address\"}],\"name\":\"setLucksAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksGroup\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLucksGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksVRF\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLucksVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMinTargetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksPaymentStrategy\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPaymentStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkAcceptToken(address)\":{\"params\":{\"acceptToken\":\"token address, blockchain token is address(0)\"},\"returns\":{\"_0\":\"bool\"}},\"checkTokenListing(address,address,uint256[],uint256[])\":{\"params\":{\"addr\":\"NFT contract address\",\"amounts\":\"tokenId amount array (ERC721 can be null)\",\"tokenIds\":\"tokenId array\"}},\"getProtocolFee()\":{\"returns\":{\"_0\":\"fee (200 = 25%, 1,000 = 10%)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setProtocolFee(uint256)\":{\"params\":{\"fee\":\"fee (500 = 5%, 1,000 = 10%)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Openluck LucksHelper.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAcceptToken(address)\":{\"notice\":\"check acceptToken support\"},\"checkNFTContract(address)\":{\"notice\":\"check nft contract, support erc721 & erc1155\"},\"checkNewTask(address,(address,uint16,address,uint256[],uint256[],address,uint8,uint256,uint256,uint256,uint256,uint16,(address,uint256),uint256,uint256))\":{\"notice\":\"check the new task inputs\"},\"checkTokenListing(address,address,uint256[],uint256[])\":{\"notice\":\"checking seller listing NFTs ownership and balance\"},\"getDrawDelay()\":{\"notice\":\"get Draw Delay second for security\"},\"getGROUPS()\":{\"notice\":\"get ILucksGroup instance  \"},\"getProtocolFee()\":{\"notice\":\"get protocol fee for eache success TaskItem payment, default is 2%\"},\"getSTRATEGY()\":{\"notice\":\"get ILucksPaymentStrategy instance  \"},\"getVRF()\":{\"notice\":\"get ILucksVRF instance  \"},\"setAcceptTokens(address[],bool)\":{\"notice\":\"set the acceptTokens\"},\"setDrawDelay(uint32)\":{\"notice\":\"set Draw Delay for security\"},\"setExecutor(address)\":{\"notice\":\"set operator\"},\"setJoinLimitNum(uint32)\":{\"notice\":\"set the set MAX_PER_JOIN_NUM\"},\"setLucksGroup(address)\":{\"notice\":\"set the LucksGroup\"},\"setLucksVRF(address)\":{\"notice\":\"set the VRF\"},\"setOperator(address,bool)\":{\"notice\":\"set operator\"},\"setPaymentStrategy(address)\":{\"notice\":\"set the PaymentStrategy\"},\"setProtocolFee(uint256)\":{\"notice\":\"set protocol fee for eache success TaskItem payment, default is 5%\"},\"setProtocolFeeRecipient(address)\":{\"notice\":\"set the ProtocolFeeRecipient\"}},\"notice\":\"It is the contract for protocol settings\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucks/LucksHelper.sol\":\"LucksHelper\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);\\r\\n    event MinWaitPeriodUpdated(uint256 oldMinWaitPeriod, uint256 newMinWaitPeriod);\\r\\n\\r\\n    event RevertInvoke(uint256 taskId, bytes reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\",\"keccak256\":\"0xac2ced661bf25c3c6f56c924fe63ff2b342aa08d1f077e6e8873df73596a855e\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n    bytes zroPaymentAddr; //  the address of the ZRO token holder who would pay for the transaction\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n\\r\\n    // ============= Task functions ====================\\r\\n\\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,\\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateCreateTaskFee(\\r\\n        uint16 _dstChainId,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateWithdrawNFTsFee(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n}\\r\\n\",\"keccak256\":\"0xeba9f5dfb8e3e81f546689fae3b00e24cee2fc65c8c341a16f4ddac1f47c147e\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\nstruct TaskInfo {\\r\\n    uint256 lastTID;\\r\\n    uint256 closeTime;\\r\\n    uint256 finalNo;\\r\\n}\\r\\n \\r\\nstruct UserState {\\r\\n    uint256 num; // user buyed tickets count\\r\\n    bool claimed;  // user claimed\\r\\n}\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint256 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);\\r\\n    \\r\\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\\r\\n    function isFail(uint256 taskId) external view returns(bool);\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xac826f689b2177ae52cfdfdc2cc9a34c66fde5bc3d8bbd2ce43d5c84d1d55a97\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksGroup {    \\r\\n\\r\\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\\r\\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\\r\\n   \\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\\r\\n    function createGroup(uint256 taskId, uint16 seat) external;\\r\\n}\",\"keccak256\":\"0x0f80c646005b1eb282e864517e9effd2f2a54411aec731e73fbd539808d6c38f\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksVRF} from \\\"./ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"./ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"./ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"./ILucksAuto.sol\\\";\\r\\n\\r\\ninterface ILucksHelper {\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\r\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\r\\n    function checkNFTContract(address addr) external view returns (bool);\\r\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\r\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\r\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\r\\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\r\\n\\r\\n    function getProtocolFeeRecipient() external view returns (address);\\r\\n    function getProtocolFee() external view returns (uint256);\\r\\n    function getMinTargetLimit(address token) external view returns (uint256);\\r\\n    function getDrawDelay() external view returns (uint32);\\r\\n\\r\\n    function getVRF() external view returns (ILucksVRF);\\r\\n    function getGROUPS() external view returns (ILucksGroup);\\r\\n    // function getREWARDS() external view returns (ILucksRewards);\\r\\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\\r\\n    function getAutoClose() external view returns (ILucksAuto);\\r\\n    function getAutoDraw() external view returns (ILucksAuto);\\r\\n}\\r\\n\",\"keccak256\":\"0x63a0408bc27abb14b326faf40dd9156c855c71a954d950de1a707efeebc51c31\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface ILucksPaymentStrategy {\\r\\n    \\r\\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\\r\\n}\",\"keccak256\":\"0xfb95b42ebb7f656c8373266c15d91659333f1ef508bba71429ea0932fe1dcdad\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILucksVRF {\\r\\n\\r\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\r\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \\r\\n\\r\\n    /**\\r\\n     * Requests randomness from a user-provided max\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\r\\n\\r\\n    /**\\r\\n     * Views random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\r\\n}\",\"keccak256\":\"0x8039f261810e00db42828632a5deba8a11613357d9c63b33c5d342abb6d6da0e\",\"license\":\"MIT\"},\"contracts/lucks/LucksHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskExt, TaskStatus} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"../interfaces/ILucksHelper.sol\\\";\\r\\nimport {ILucksVRF} from \\\"../interfaces/ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"../interfaces/ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"../interfaces/ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"../interfaces/ILucksAuto.sol\\\";\\r\\n\\r\\n/** @title Openluck LucksHelper.\\r\\n * @notice It is the contract for protocol settings\\r\\n */\\r\\ncontract LucksHelper is ILucksHelper, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    // ============ Openluck interfaces ============\\r\\n\\r\\n    ILucksExecutor public EXECUTOR;\\r\\n    ILucksVRF public VRF;\\r\\n    ILucksGroup public GROUPS;\\r\\n    ILucksPaymentStrategy public STRATEGY;  \\r\\n\\r\\n    ILucksAuto public AUTO_CLOSE;  \\r\\n    ILucksAuto public AUTO_DRAW;  \\r\\n\\r\\n    address public feeRecipient;    // protocol fee recipient\\r\\n\\r\\n    uint32 public MAX_PER_JOIN_NUM = 10000;    // limit user per jointask num (default 10000), to avoid block fail and huge gas fee\\r\\n    uint32 public DRAW_DELAY_SEC = 120;    // picker winner need a delay time from task close. (default 2min)\\r\\n    uint256 public protocolFee = 200;     // acceptToken (200 = 2%, 1,000 = 10%)\\r\\n\\r\\n    mapping(address => bool) public operators;     // protocol income balance (address => bool)\\r\\n    mapping(address => bool) public acceptTokens;   // accept payment tokens (Chain Token equals to zero address)     \\r\\n    mapping(address => uint256) public minTargetAmount;  // when seller create task, check the min targetAmount limit (token address => min amount)\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _acceptTokens,\\r\\n        address _recipient,\\r\\n        uint256 _fee,\\r\\n        ILucksExecutor  _executor,\\r\\n        ILucksVRF _vrf,\\r\\n        ILucksGroup _groups,\\r\\n        ILucksPaymentStrategy _strategy,\\r\\n        ILucksAuto _auto_close,\\r\\n        ILucksAuto _auto_draw\\r\\n    ) {\\r\\n        feeRecipient = _recipient;\\r\\n        protocolFee = _fee;\\r\\n        EXECUTOR = _executor;\\r\\n        VRF = _vrf;        \\r\\n        GROUPS = _groups;\\r\\n        STRATEGY = _strategy;\\r\\n        AUTO_CLOSE = _auto_close;\\r\\n        AUTO_DRAW = _auto_draw;\\r\\n        setAcceptTokens(_acceptTokens, true);\\r\\n    }\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(msg.sender == owner() || operators[msg.sender], \\\"onlyOperator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getMinTargetLimit(address token) external view override returns (uint256) {\\r\\n        return minTargetAmount[token];\\r\\n    }\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) public view override returns (bool) {\\r\\n        return MAX_PER_JOIN_NUM < 1 || num <= MAX_PER_JOIN_NUM;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice check acceptToken support\\r\\n    @param acceptToken token address, blockchain token is address(0)\\r\\n    @return bool\\r\\n    */\\r\\n    function checkAcceptToken(address acceptToken)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return acceptTokens[acceptToken];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check nft contract, support erc721 & erc1155\\r\\n     */\\r\\n    function checkNFTContract(address addr) public view override returns (bool) {\\r\\n        require(addr != address(0) && Address.isContract(addr), \\\"Invalid nftContract\\\");\\r\\n        require(\\r\\n            IERC165(addr).supportsInterface(0x80ac58cd) ||  // ERC721 interfaceID\\r\\n            IERC165(addr).supportsInterface(0xd9b67a26), // ERC1155 interfaceID\\r\\n            \\\"Invalid contract\\\"\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check the new task inputs\\r\\n     */\\r\\n    function checkNewTask(address user, TaskItem memory item) public view override returns(bool) { \\r\\n\\r\\n        require(item.seller != address(0) && item.seller == user, \\\"Invalid seller address\\\");      \\r\\n        require(item.nftChainId > 0, \\\"Invalid nftChainId\\\");       \\r\\n        require(item.tokenIds.length > 0, \\\"Empty tokenIds\\\");\\r\\n        require(block.timestamp < item.endTime, \\\"Invalid time range\\\");\\r\\n        require(item.endTime - block.timestamp > 84600 , \\\"Duration too short\\\"); // at least 23.5 hour\\r\\n        require(item.endTime - block.timestamp < 2678400 , \\\"Duration too long\\\"); // 31 days limit\\r\\n        require(item.price > 0 && item.price < item.targetAmount && item.targetAmount.mod(item.price) == 0,\\\"Invalid price or targetAmount\\\");\\r\\n\\r\\n        uint num = item.targetAmount.div(item.price);\\r\\n        require(num > 0 && num <= 100000 && num.mod(10) == 0, \\\"Invalid num\\\");\\r\\n\\r\\n        require(item.amountCollected == 0, \\\"Invalid amountCollected\\\");    \\r\\n       \\r\\n        // check nftContract\\r\\n        require(checkNFTContract(item.nftContract), \\\"Invalid nftContract\\\");\\r\\n        (bool checkState, string memory checkMsg) = checkTokenListing(item.nftContract, item.seller, item.tokenIds, item.tokenAmounts);\\r\\n        require(checkState, checkMsg);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkNewTaskExt(TaskExt memory ext) public pure override returns(bool) {\\r\\n        require(bytes(ext.title).length >=0 && bytes(ext.title).length <= 256, \\\"Invalid ext title\\\");\\r\\n        require(bytes(ext.note).length <= 256, \\\"Invalid ext note\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkNewTaskRemote(TaskItem memory item) public view override returns (bool) \\r\\n    {        \\r\\n        if (address(item.exclusiveToken.token) != address(0) && item.exclusiveToken.amount > 0) {\\r\\n            require(Address.isContract(item.exclusiveToken.token), \\\"Invalid exclusiveToken\\\");\\r\\n        }       \\r\\n        require(checkAcceptToken(item.acceptToken), \\\"Unsupported acceptToken\\\");\\r\\n        uint256 minTarget = minTargetAmount[item.acceptToken];\\r\\n        require(minTarget == 0 || item.targetAmount >= minTarget, \\\"Target too small\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) public view override returns(bool) {\\r\\n\\r\\n        require(bytes(note).length <= 256, \\\"Note too large\\\");\\r\\n        require(checkPerJoinLimit(num), \\\"Over join limit\\\");                \\r\\n        require(num > 0, \\\"Invalid num\\\");\\r\\n\\r\\n        TaskItem memory item = EXECUTOR.getTask(taskId);\\r\\n\\r\\n        require(item.seller != user, \\\"Not allow owner\\\");\\r\\n        require(block.timestamp >= item.startTime && block.timestamp <= item.endTime, \\\"Invalid time range\\\");\\r\\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \\\"Invalid status\\\");\\r\\n\\r\\n        // Calculate number of TOKEN to this contract\\r\\n        uint256 amount = item.price.mul(num);\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n\\r\\n        // check Exclusive\\r\\n        if (address(item.exclusiveToken.token) != address(0) && item.exclusiveToken.amount > 0) {\\r\\n            require(\\r\\n                checkExclusive(user, address(item.exclusiveToken.token), item.exclusiveToken.amount),\\r\\n                \\\"Not pass EXCLUSIVE\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checking seller listing NFTs ownership and balance\\r\\n     * @param addr NFT contract address\\r\\n     * @param tokenIds tokenId array\\r\\n     * @param amounts tokenId amount array (ERC721 can be null)\\r\\n     */\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) public view override returns (bool, string memory)\\r\\n    {\\r\\n        if (IERC165(addr).supportsInterface(0x80ac58cd)) {         // ERC721 interfaceID\\r\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n                if (IERC721(addr).ownerOf(tokenIds[i]) != seller) {\\r\\n                    return (false, \\\"Token listed or not owner\\\");\\r\\n                }               \\r\\n            }\\r\\n        } else if (IERC165(addr).supportsInterface(0xd9b67a26)) {  // ERC1155 interfaceID\\r\\n            require(tokenIds.length == amounts.length, \\\"Invalid ids len\\\");\\r\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n                if (!(IERC1155(addr).balanceOf(seller, tokenIds[i]) >= amounts[i] && amounts[i] > 0)) {\\r\\n                    return (false, \\\"Invalid amount or balance\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return (true ,\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function checkExclusive(address account, address token, uint256 amount) override public view returns (bool){\\r\\n        if (amount > 0 && Address.isContract(token)) {\\r\\n            if (IERC165(token).supportsInterface(0x80ac58cd)) {\\r\\n                return IERC721(token).balanceOf(account) >= amount;\\r\\n            }\\r\\n            return IERC20(token).balanceOf(account) >= amount;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getProtocolFeeRecipient()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        return feeRecipient;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get protocol fee for eache success TaskItem payment, default is 2%\\r\\n    @return fee (200 = 25%, 1,000 = 10%)\\r\\n    */\\r\\n    function getProtocolFee() external view override returns (uint256) {\\r\\n        return protocolFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get Draw Delay second for security\\r\\n     */\\r\\n    function getDrawDelay() external view override returns (uint32) {\\r\\n        return DRAW_DELAY_SEC;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get ILucksVRF instance  \\r\\n    */\\r\\n    function getVRF() public view override returns (ILucksVRF) {\\r\\n        return VRF;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get ILucksGroup instance  \\r\\n    */\\r\\n    function getGROUPS() public view override returns (ILucksGroup) {\\r\\n        return GROUPS;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get ILucksPaymentStrategy instance  \\r\\n    */\\r\\n    function getSTRATEGY() public view override returns (ILucksPaymentStrategy) {\\r\\n        return STRATEGY;\\r\\n    }\\r\\n\\r\\n    function getAutoClose() external view override returns (ILucksAuto) {\\r\\n        return AUTO_CLOSE;\\r\\n    }\\r\\n\\r\\n    function getAutoDraw() external view override returns (ILucksAuto) {\\r\\n        return AUTO_DRAW;\\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n\\r\\n    /**\\r\\n    @notice set operator\\r\\n     */\\r\\n    function setOperator(address addr, bool enable) external onlyOwner {\\r\\n        operators[addr] = enable;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set the ProtocolFeeRecipient\\r\\n     */\\r\\n    function setProtocolFeeRecipient(address addr) external onlyOwner {\\r\\n        feeRecipient = addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set protocol fee for eache success TaskItem payment, default is 5%\\r\\n    @param fee fee (500 = 5%, 1,000 = 10%)\\r\\n    */\\r\\n    function setProtocolFee(uint256 fee) external onlyOwner {\\r\\n        protocolFee = fee;\\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner & onlyOperator functions  ============\\r\\n\\r\\n    /**\\r\\n    @notice set the set MAX_PER_JOIN_NUM\\r\\n     */\\r\\n    function setJoinLimitNum(uint32 num) external onlyOperator {\\r\\n        MAX_PER_JOIN_NUM = num;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set Draw Delay for security\\r\\n     */\\r\\n    function setDrawDelay(uint32 second) external onlyOperator {\\r\\n        DRAW_DELAY_SEC = second;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set the acceptTokens\\r\\n     */\\r\\n    function setAcceptTokens(address[] memory tokens, bool enable)\\r\\n        public\\r\\n        onlyOperator\\r\\n    {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            acceptTokens[tokens[i]] = enable;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function setMinTargetAmount(address[] memory tokens, uint256[] memory amounts)\\r\\n        public\\r\\n        onlyOperator\\r\\n    {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            minTargetAmount[tokens[i]] = amounts[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set operator\\r\\n     */\\r\\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set the VRF\\r\\n     */\\r\\n    function setLucksVRF(ILucksVRF addr) external onlyOperator {\\r\\n        VRF = addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set the LucksGroup\\r\\n     */\\r\\n    function setLucksGroup(ILucksGroup addr) external onlyOperator {\\r\\n        GROUPS = addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set the PaymentStrategy\\r\\n     */\\r\\n    function setPaymentStrategy(ILucksPaymentStrategy addr) external onlyOperator {\\r\\n        STRATEGY = addr;\\r\\n    }\\r\\n\\r\\n    function setLucksAuto(ILucksAuto _auto_close, ILucksAuto _auto_draw) external onlyOperator {\\r\\n        AUTO_CLOSE = _auto_close;\\r\\n        AUTO_DRAW = _auto_draw;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x213a55761416b932cf9119e6d9fdd95732f3ddc24eebe27980ab222fc6b748ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260078054600160a01b600160e01b03191664078000027160a41b17905560c86008553480156200003357600080fd5b50604051620038eb380380620038eb833981016040819052620000569162000239565b6200006133620000f0565b600780546001600160a01b03199081166001600160a01b038b811691909117909255600889905560018054821689841617815560028054831689851617905560038054831688851617905560048054831687851617905560058054831686851617905560068054909216928416929092179055620000e1908a9062000140565b505050505050505050620003fe565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314806200016957503360009081526009602052604090205460ff165b620001a95760405162461bcd60e51b815260206004820152600c60248201526b37b7363ca7b832b930ba37b960a11b604482015260640160405180910390fd5b60005b8251811015620002175781600a6000858481518110620001d057620001d0620003d2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806200020e81620003a8565b915050620001ac565b505050565b80516001600160a01b03811681146200023457600080fd5b919050565b60008060008060008060008060006101208a8c0312156200025957600080fd5b89516001600160401b03808211156200027157600080fd5b818c0191508c601f8301126200028657600080fd5b8151818111156200029b576200029b620003e8565b604051601f19603f8360051b011681018181108482111715620002c257620002c2620003e8565b8060405250809250818152602081019250602084018f60208460051b8701011115620002ed57600080fd5b600094505b828510156200031c5762000306816200021c565b84526001949094019360209384019301620002f2565b509b50620003319250505060208b016200021c565b975060408a015196506200034860608b016200021c565b95506200035860808b016200021c565b94506200036860a08b016200021c565b93506200037860c08b016200021c565b92506200038860e08b016200021c565b9150620003996101008b016200021c565b90509295985092959850929598565b6000600019821415620003cb57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6134dd806200040e6000396000f3fe608060405234801561001057600080fd5b506004361061030a5760003560e01c80637f994c191161019c578063b19e035f116100ee578063d48ed1a511610097578063e7e46def11610071578063e7e46def146107e1578063edd3159d146107f4578063f2fde38b1461081257600080fd5b8063d48ed1a51461078f578063e521cb92146107a2578063e67aa0d1146107b557600080fd5b8063d12c51f8116100c8578063d12c51f81461072c578063d3a01b0a1461074c578063d45d76b31461076c57600080fd5b8063b19e035f146106e8578063c735fd7414610706578063cb9b4e121461071957600080fd5b80639861b7b111610150578063a126285b1161012a578063a126285b146106b7578063a5a41031146106d7578063b0e21e8a146106df57600080fd5b80639861b7b11461067e5780639b7ed979146106915780639ef4fdd5146106a457600080fd5b80638859e523116101815780638859e5231461062f5780638da5cb5b1461064257806393f1c9111461066057600080fd5b80637f994c19146105ce578063873360d71461060757600080fd5b80633156a58d116102605780636896c5ce11610209578063770ee870116101e3578063770ee87014610588578063787dce3d146105a85780637a6bbf18146105bb57600080fd5b80636896c5ce14610542578063715018a61461056257806372c8fc0e1461056a57600080fd5b8063469048401161023a57806346904840146104ef578063558a72971461050f578063630dc7cb1461052257600080fd5b80633156a58d1461047a578063350a9e4314610498578063375a32be146104ab57600080fd5b806319af3253116102c25780631c3c0ea81161029c5780631c3c0ea8146104365780631e07dbb814610449578063239619751461045c57600080fd5b806319af3253146103c75780631a44f03a146104025780631a88f8fc1461041557600080fd5b806313e7c9d8116102f357806313e7c9d81461034c5780631750518c1461036f578063185025ef1461038257600080fd5b806305b84a7d1461030f5780630990a98214610324575b600080fd5b61032261031d366004612bef565b610825565b005b610337610332366004612ec6565b6108f2565b60405190151581526020015b60405180910390f35b61033761035a366004612bef565b60096020526000908152604090205460ff1681565b61033761037d366004612d2c565b6109aa565b6004546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610343565b6007547801000000000000000000000000000000000000000000000000900463ffffffff165b60405163ffffffff9091168152602001610343565b610322610410366004612bef565b610e2b565b610428610423366004612c29565b610ef3565b6040516103439291906131cc565b610322610444366004612bef565b61138d565b610322610457366004613146565b61143b565b60055473ffffffffffffffffffffffffffffffffffffffff166103a2565b60065473ffffffffffffffffffffffffffffffffffffffff166103a2565b6103226104a6366004612bef565b61150b565b6104e16104b9366004612bef565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b604051908152602001610343565b6007546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b61032261051d366004612cf3565b6115d3565b6001546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b6005546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b610322611690565b60075473ffffffffffffffffffffffffffffffffffffffff166103a2565b6104e1610596366004612bef565b600b6020526000908152604090205481565b6103226105b6366004613114565b611703565b6103226105c9366004613146565b61176f565b6103376105dc366004612bef565b73ffffffffffffffffffffffffffffffffffffffff166000908152600a602052604090205460ff1690565b6007546103ed9074010000000000000000000000000000000000000000900463ffffffff1681565b61033761063d366004612bef565b611843565b60005473ffffffffffffffffffffffffffffffffffffffff166103a2565b60045473ffffffffffffffffffffffffffffffffffffffff166103a2565b61033761068c366004613146565b611a98565b61032261069f366004612e98565b611af5565b6103376106b2366004612cb2565b611bc9565b6002546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b6008546104e1565b6104e160085481565b60035473ffffffffffffffffffffffffffffffffffffffff166103a2565b610337610714366004612f80565b611dc5565b610322610727366004612e34565b611f75565b6003546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b6006546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b61033761077a366004612bef565b600a6020526000908152604090205460ff1681565b61032261079d366004612dda565b61208d565b6103226107b0366004612bef565b6121a3565b6007546103ed907801000000000000000000000000000000000000000000000000900463ffffffff1681565b6103376107ef366004612d7c565b612251565b60025473ffffffffffffffffffffffffffffffffffffffff166103a2565b610322610820366004612bef565b612692565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061085a57503360009081526009602052604090205460ff165b6108ab5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000610100826020015151111561094b5760405162461bcd60e51b815260206004820152601160248201527f496e76616c696420657874207469746c6500000000000000000000000000000060448201526064016108a2565b61010082604001515111156109a25760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420657874206e6f74650000000000000000000000000000000060448201526064016108a2565b506001919050565b805160009073ffffffffffffffffffffffffffffffffffffffff1615801590610a0257508273ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16145b610a4e5760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656c6c657220616464726573730000000000000000000060448201526064016108a2565b6000826020015161ffff1611610aa65760405162461bcd60e51b815260206004820152601260248201527f496e76616c6964206e6674436861696e4964000000000000000000000000000060448201526064016108a2565b600082606001515111610afb5760405162461bcd60e51b815260206004820152600e60248201527f456d70747920746f6b656e49647300000000000000000000000000000000000060448201526064016108a2565b8161010001514210610b4f5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642074696d652072616e6765000000000000000000000000000060448201526064016108a2565b62014a7842836101000151610b64919061330b565b11610bb15760405162461bcd60e51b815260206004820152601260248201527f4475726174696f6e20746f6f2073686f7274000000000000000000000000000060448201526064016108a2565b6228de8042836101000151610bc6919061330b565b10610c135760405162461bcd60e51b815260206004820152601160248201527f4475726174696f6e20746f6f206c6f6e6700000000000000000000000000000060448201526064016108a2565b6000826101400151118015610c315750816101200151826101400151105b8015610c4f5750610140820151610120830151610c4d9161278e565b155b610c9b5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964207072696365206f7220746172676574416d6f756e7400000060448201526064016108a2565b6000610cba83610140015184610120015161279a90919063ffffffff16565b9050600081118015610ccf5750620186a08111155b8015610ce35750610ce181600a61278e565b155b610d2f5760405162461bcd60e51b815260206004820152600b60248201527f496e76616c6964206e756d00000000000000000000000000000000000000000060448201526064016108a2565b6101a083015115610d825760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420616d6f756e74436f6c6c656374656400000000000000000060448201526064016108a2565b610d8f8360400151611843565b610ddb5760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964206e6674436f6e74726163740000000000000000000000000060448201526064016108a2565b600080610dfa8560400151866000015187606001518860800151610ef3565b91509150818190610e1e5760405162461bcd60e51b81526004016108a291906131e7565b5060019695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610e6057503360009081526009602052604090205460ff165b610eac5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015260009060609073ffffffffffffffffffffffffffffffffffffffff8716906301ffc9a79060240160206040518083038186803b158015610f7e57600080fd5b505afa158015610f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb69190612e7b565b156110f45760005b84518110156110ee578573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16636352211e87848151811061100c5761100c6133fc565b60200260200101516040518263ffffffff1660e01b815260040161103291815260200190565b60206040518083038186803b15801561104a57600080fd5b505afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110829190612c0c565b73ffffffffffffffffffffffffffffffffffffffff16146110dc57505060408051808201909152601981527f546f6b656e206c6973746564206f72206e6f74206f776e657200000000000000602082015260009150611384565b806110e681613322565b915050610fbe565b5061136f565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fd9b67a2600000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8716906301ffc9a79060240160206040518083038186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b19190612e7b565b1561136f5782518451146112075760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420696473206c656e000000000000000000000000000000000060448201526064016108a2565b60005b845181101561136d57838181518110611225576112256133fc565b60200260200101518773ffffffffffffffffffffffffffffffffffffffff1662fdd58e8888858151811061125b5761125b6133fc565b60200260200101516040518363ffffffff1660e01b81526004016112a192919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60206040518083038186803b1580156112b957600080fd5b505afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f1919061312d565b101580156113185750600084828151811061130e5761130e6133fc565b6020026020010151115b61135b57505060408051808201909152601981527f496e76616c696420616d6f756e74206f722062616c616e636500000000000000602082015260009150611384565b8061136581613322565b91505061120a565b505b50506040805160208101909152600081526001905b94509492505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146113f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061147057503360009081526009602052604090205460ff165b6114bc5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b6007805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061154057503360009081526009602052604090205460ff165b61158c5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461163a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146116f75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b61170160006127a6565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461176a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b600855565b60005473ffffffffffffffffffffffffffffffffffffffff163314806117a457503360009081526009602052604090205460ff165b6117f05760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b6007805463ffffffff9092167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600073ffffffffffffffffffffffffffffffffffffffff821615801590611880575073ffffffffffffffffffffffffffffffffffffffff82163b15155b6118cc5760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964206e6674436f6e74726163740000000000000000000000000060448201526064016108a2565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8316906301ffc9a79060240160206040518083038186803b15801561195157600080fd5b505afa158015611965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119899190612e7b565b80611a4c57506040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fd9b67a2600000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8316906301ffc9a79060240160206040518083038186803b158015611a1457600080fd5b505afa158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c9190612e7b565b6109a25760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420636f6e74726163740000000000000000000000000000000060448201526064016108a2565b60075460009060017401000000000000000000000000000000000000000090910463ffffffff161080611aef575060075463ffffffff74010000000000000000000000000000000000000000909104811690831611155b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611b2a57503360009081526009602052604090205460ff165b611b765760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b6005805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560068054929093169116179055565b60008082118015611bf0575073ffffffffffffffffffffffffffffffffffffffff83163b15155b15611dba576040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8416906301ffc9a79060240160206040518083038186803b158015611c7a57600080fd5b505afa158015611c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb29190612e7b565b15611d63576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528391908516906370a08231906024015b60206040518083038186803b158015611d2257600080fd5b505afa158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5a919061312d565b10159050611dbe565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528391908516906370a0823190602401611d0a565b5060015b9392505050565b6101808101515160009073ffffffffffffffffffffffffffffffffffffffff1615801590611dfc5750600082610180015160200151115b15611e6b576101808201515173ffffffffffffffffffffffffffffffffffffffff163b611e6b5760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964206578636c7573697665546f6b656e0000000000000000000060448201526064016108a2565b60a082015173ffffffffffffffffffffffffffffffffffffffff166000908152600a602052604090205460ff16611ee45760405162461bcd60e51b815260206004820152601760248201527f556e737570706f7274656420616363657074546f6b656e00000000000000000060448201526064016108a2565b60a082015173ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902054801580611f2057508083610120015110155b611f6c5760405162461bcd60e51b815260206004820152601060248201527f54617267657420746f6f20736d616c6c0000000000000000000000000000000060448201526064016108a2565b50600192915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611faa57503360009081526009602052604090205460ff165b611ff65760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b60005b82518110156120885781600a6000858481518110612019576120196133fc565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558061208081613322565b915050611ff9565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314806120c257503360009081526009602052604090205460ff165b61210e5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b60005b82518110156120885781818151811061212c5761212c6133fc565b6020026020010151600b600085848151811061214a5761214a6133fc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061219b90613322565b915050612111565b60005473ffffffffffffffffffffffffffffffffffffffff16331461220a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000610100825111156122a65760405162461bcd60e51b815260206004820152600e60248201527f4e6f746520746f6f206c6172676500000000000000000000000000000000000060448201526064016108a2565b6122af83611a98565b6122fb5760405162461bcd60e51b815260206004820152600f60248201527f4f766572206a6f696e206c696d6974000000000000000000000000000000000060448201526064016108a2565b60008363ffffffff16116123515760405162461bcd60e51b815260206004820152600b60248201527f496e76616c6964206e756d00000000000000000000000000000000000000000060448201526064016108a2565b6001546040517f1d65e77e0000000000000000000000000000000000000000000000000000000081526004810186905260009173ffffffffffffffffffffffffffffffffffffffff1690631d65e77e9060240160006040518083038186803b1580156123bc57600080fd5b505afa1580156123d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526124169190810190612fbd565b90508573ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156124985760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420616c6c6f77206f776e6572000000000000000000000000000000000060448201526064016108a2565b8060e0015142101580156124b157508061010001514211155b6124fd5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642074696d652072616e6765000000000000000000000000000060448201526064016108a2565b60008160c001516005811115612515576125156133cd565b1480612536575060018160c001516005811115612534576125346133cd565b145b6125825760405162461bcd60e51b815260206004820152600e60248201527f496e76616c69642073746174757300000000000000000000000000000000000060448201526064016108a2565b60006125a28563ffffffff1683610140015161281b90919063ffffffff16565b9050600081116125f45760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e7400000000000000000000000000000000000060448201526064016108a2565b6101808201515173ffffffffffffffffffffffffffffffffffffffff16158015906126285750600082610180015160200151115b15610e1e576101808201518051602090910151612646918991611bc9565b610e1e5760405162461bcd60e51b815260206004820152601260248201527f4e6f742070617373204558434c5553495645000000000000000000000000000060448201526064016108a2565b60005473ffffffffffffffffffffffffffffffffffffffff1633146126f95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b73ffffffffffffffffffffffffffffffffffffffff81166127825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108a2565b61278b816127a6565b50565b6000611dbe828461335b565b6000611dbe82846132ba565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611dbe82846132ce565b80356128328161345a565b919050565b80516128328161345a565b600082601f83011261285357600080fd5b8135602061286861286383613296565b613247565b80838252828201915082860187848660051b890101111561288857600080fd5b60005b858110156128b057813561289e8161345a565b8452928401929084019060010161288b565b5090979650505050505050565b600082601f8301126128ce57600080fd5b813560206128de61286383613296565b80838252828201915082860187848660051b89010111156128fe57600080fd5b60005b858110156128b057813584529284019290840190600101612901565b600082601f83011261292e57600080fd5b8151602061293e61286383613296565b80838252828201915082860187848660051b890101111561295e57600080fd5b60005b858110156128b057815184529284019290840190600101612961565b80356128328161348a565b80516128328161348a565b600082601f8301126129a457600080fd5b813567ffffffffffffffff8111156129be576129be61342b565b6129ef60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613247565b818152846020838601011115612a0457600080fd5b816020850160208301376000918101602001919091529392505050565b600060408284031215612a3357600080fd5b612a3b6131fa565b90508135612a488161345a565b808252506020820135602082015292915050565b600060408284031215612a6e57600080fd5b612a766131fa565b90508151612a838161345a565b808252506020820151602082015292915050565b60006102008284031215612aaa57600080fd5b612ab2613223565b9050612abd82612827565b8152612acb60208301612bc5565b6020820152612adc60408301612827565b6040820152606082013567ffffffffffffffff80821115612afc57600080fd5b612b08858386016128bd565b60608401526080840135915080821115612b2157600080fd5b50612b2e848285016128bd565b608083015250612b4060a08301612827565b60a0820152612b5160c0830161297d565b60c082015260e08281013590820152610100808301359082015261012080830135908201526101408083013590820152610160612b8f818401612bc5565b90820152610180612ba284848301612a21565b81830152506101c0808301356101a08301526101e0830135818301525092915050565b803561283281613497565b805161283281613497565b803563ffffffff8116811461283257600080fd5b600060208284031215612c0157600080fd5b8135611dbe8161345a565b600060208284031215612c1e57600080fd5b8151611dbe8161345a565b60008060008060808587031215612c3f57600080fd5b8435612c4a8161345a565b93506020850135612c5a8161345a565b9250604085013567ffffffffffffffff80821115612c7757600080fd5b612c83888389016128bd565b93506060870135915080821115612c9957600080fd5b50612ca6878288016128bd565b91505092959194509250565b600080600060608486031215612cc757600080fd5b8335612cd28161345a565b92506020840135612ce28161345a565b929592945050506040919091013590565b60008060408385031215612d0657600080fd5b8235612d118161345a565b91506020830135612d218161347c565b809150509250929050565b60008060408385031215612d3f57600080fd5b8235612d4a8161345a565b9150602083013567ffffffffffffffff811115612d6657600080fd5b612d7285828601612a97565b9150509250929050565b60008060008060808587031215612d9257600080fd5b8435612d9d8161345a565b935060208501359250612db260408601612bdb565b9150606085013567ffffffffffffffff811115612dce57600080fd5b612ca687828801612993565b60008060408385031215612ded57600080fd5b823567ffffffffffffffff80821115612e0557600080fd5b612e1186838701612842565b93506020850135915080821115612e2757600080fd5b50612d72858286016128bd565b60008060408385031215612e4757600080fd5b823567ffffffffffffffff811115612e5e57600080fd5b612e6a85828601612842565b9250506020830135612d218161347c565b600060208284031215612e8d57600080fd5b8151611dbe8161347c565b60008060408385031215612eab57600080fd5b8235612eb68161345a565b91506020830135612d218161345a565b600060208284031215612ed857600080fd5b813567ffffffffffffffff80821115612ef057600080fd5b9083019060608286031215612f0457600080fd5b604051606081018181108382111715612f1f57612f1f61342b565b6040528235612f2d81613497565b8152602083013582811115612f4157600080fd5b612f4d87828601612993565b602083015250604083013582811115612f6557600080fd5b612f7187828601612993565b60408301525095945050505050565b600060208284031215612f9257600080fd5b813567ffffffffffffffff811115612fa957600080fd5b612fb584828501612a97565b949350505050565b600060208284031215612fcf57600080fd5b815167ffffffffffffffff80821115612fe757600080fd5b908301906102008286031215612ffc57600080fd5b613004613223565b61300d83612837565b815261301b60208401612bd0565b602082015261302c60408401612837565b604082015260608301518281111561304357600080fd5b61304f8782860161291d565b60608301525060808301518281111561306757600080fd5b6130738782860161291d565b60808301525061308560a08401612837565b60a082015261309660c08401612988565b60c082015260e0838101519082015261010080840151908201526101208084015190820152610140808401519082015261016091506130d6828401612bd0565b8282015261018091506130eb86838501612a5c565b828201526101c09150818301516101a08201526101e08301518282015280935050505092915050565b60006020828403121561312657600080fd5b5035919050565b60006020828403121561313f57600080fd5b5051919050565b60006020828403121561315857600080fd5b611dbe82612bdb565b6000815180845260005b818110156131875760208185018101518683018201520161316b565b81811115613199576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8215158152604060208201526000612fb56040830184613161565b602081526000611dbe6020830184613161565b6040805190810167ffffffffffffffff8111828210171561321d5761321d61342b565b60405290565b6040516101e0810167ffffffffffffffff8111828210171561321d5761321d61342b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561328e5761328e61342b565b604052919050565b600067ffffffffffffffff8211156132b0576132b061342b565b5060051b60200190565b6000826132c9576132c961339e565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156133065761330661336f565b500290565b60008282101561331d5761331d61336f565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156133545761335461336f565b5060010190565b60008261336a5761336a61339e565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461278b57600080fd5b801515811461278b57600080fd5b6006811061278b57600080fd5b61ffff8116811461278b57600080fdfea26469706673582212208820ffa8ecbb869952ae68c3b0aa2b3a66f300aa85b1f2eb559fe28a094a3f3d64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030a5760003560e01c80637f994c191161019c578063b19e035f116100ee578063d48ed1a511610097578063e7e46def11610071578063e7e46def146107e1578063edd3159d146107f4578063f2fde38b1461081257600080fd5b8063d48ed1a51461078f578063e521cb92146107a2578063e67aa0d1146107b557600080fd5b8063d12c51f8116100c8578063d12c51f81461072c578063d3a01b0a1461074c578063d45d76b31461076c57600080fd5b8063b19e035f146106e8578063c735fd7414610706578063cb9b4e121461071957600080fd5b80639861b7b111610150578063a126285b1161012a578063a126285b146106b7578063a5a41031146106d7578063b0e21e8a146106df57600080fd5b80639861b7b11461067e5780639b7ed979146106915780639ef4fdd5146106a457600080fd5b80638859e523116101815780638859e5231461062f5780638da5cb5b1461064257806393f1c9111461066057600080fd5b80637f994c19146105ce578063873360d71461060757600080fd5b80633156a58d116102605780636896c5ce11610209578063770ee870116101e3578063770ee87014610588578063787dce3d146105a85780637a6bbf18146105bb57600080fd5b80636896c5ce14610542578063715018a61461056257806372c8fc0e1461056a57600080fd5b8063469048401161023a57806346904840146104ef578063558a72971461050f578063630dc7cb1461052257600080fd5b80633156a58d1461047a578063350a9e4314610498578063375a32be146104ab57600080fd5b806319af3253116102c25780631c3c0ea81161029c5780631c3c0ea8146104365780631e07dbb814610449578063239619751461045c57600080fd5b806319af3253146103c75780631a44f03a146104025780631a88f8fc1461041557600080fd5b806313e7c9d8116102f357806313e7c9d81461034c5780631750518c1461036f578063185025ef1461038257600080fd5b806305b84a7d1461030f5780630990a98214610324575b600080fd5b61032261031d366004612bef565b610825565b005b610337610332366004612ec6565b6108f2565b60405190151581526020015b60405180910390f35b61033761035a366004612bef565b60096020526000908152604090205460ff1681565b61033761037d366004612d2c565b6109aa565b6004546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610343565b6007547801000000000000000000000000000000000000000000000000900463ffffffff165b60405163ffffffff9091168152602001610343565b610322610410366004612bef565b610e2b565b610428610423366004612c29565b610ef3565b6040516103439291906131cc565b610322610444366004612bef565b61138d565b610322610457366004613146565b61143b565b60055473ffffffffffffffffffffffffffffffffffffffff166103a2565b60065473ffffffffffffffffffffffffffffffffffffffff166103a2565b6103226104a6366004612bef565b61150b565b6104e16104b9366004612bef565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b604051908152602001610343565b6007546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b61032261051d366004612cf3565b6115d3565b6001546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b6005546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b610322611690565b60075473ffffffffffffffffffffffffffffffffffffffff166103a2565b6104e1610596366004612bef565b600b6020526000908152604090205481565b6103226105b6366004613114565b611703565b6103226105c9366004613146565b61176f565b6103376105dc366004612bef565b73ffffffffffffffffffffffffffffffffffffffff166000908152600a602052604090205460ff1690565b6007546103ed9074010000000000000000000000000000000000000000900463ffffffff1681565b61033761063d366004612bef565b611843565b60005473ffffffffffffffffffffffffffffffffffffffff166103a2565b60045473ffffffffffffffffffffffffffffffffffffffff166103a2565b61033761068c366004613146565b611a98565b61032261069f366004612e98565b611af5565b6103376106b2366004612cb2565b611bc9565b6002546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b6008546104e1565b6104e160085481565b60035473ffffffffffffffffffffffffffffffffffffffff166103a2565b610337610714366004612f80565b611dc5565b610322610727366004612e34565b611f75565b6003546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b6006546103a29073ffffffffffffffffffffffffffffffffffffffff1681565b61033761077a366004612bef565b600a6020526000908152604090205460ff1681565b61032261079d366004612dda565b61208d565b6103226107b0366004612bef565b6121a3565b6007546103ed907801000000000000000000000000000000000000000000000000900463ffffffff1681565b6103376107ef366004612d7c565b612251565b60025473ffffffffffffffffffffffffffffffffffffffff166103a2565b610322610820366004612bef565b612692565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061085a57503360009081526009602052604090205460ff165b6108ab5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000610100826020015151111561094b5760405162461bcd60e51b815260206004820152601160248201527f496e76616c696420657874207469746c6500000000000000000000000000000060448201526064016108a2565b61010082604001515111156109a25760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420657874206e6f74650000000000000000000000000000000060448201526064016108a2565b506001919050565b805160009073ffffffffffffffffffffffffffffffffffffffff1615801590610a0257508273ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16145b610a4e5760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656c6c657220616464726573730000000000000000000060448201526064016108a2565b6000826020015161ffff1611610aa65760405162461bcd60e51b815260206004820152601260248201527f496e76616c6964206e6674436861696e4964000000000000000000000000000060448201526064016108a2565b600082606001515111610afb5760405162461bcd60e51b815260206004820152600e60248201527f456d70747920746f6b656e49647300000000000000000000000000000000000060448201526064016108a2565b8161010001514210610b4f5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642074696d652072616e6765000000000000000000000000000060448201526064016108a2565b62014a7842836101000151610b64919061330b565b11610bb15760405162461bcd60e51b815260206004820152601260248201527f4475726174696f6e20746f6f2073686f7274000000000000000000000000000060448201526064016108a2565b6228de8042836101000151610bc6919061330b565b10610c135760405162461bcd60e51b815260206004820152601160248201527f4475726174696f6e20746f6f206c6f6e6700000000000000000000000000000060448201526064016108a2565b6000826101400151118015610c315750816101200151826101400151105b8015610c4f5750610140820151610120830151610c4d9161278e565b155b610c9b5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964207072696365206f7220746172676574416d6f756e7400000060448201526064016108a2565b6000610cba83610140015184610120015161279a90919063ffffffff16565b9050600081118015610ccf5750620186a08111155b8015610ce35750610ce181600a61278e565b155b610d2f5760405162461bcd60e51b815260206004820152600b60248201527f496e76616c6964206e756d00000000000000000000000000000000000000000060448201526064016108a2565b6101a083015115610d825760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420616d6f756e74436f6c6c656374656400000000000000000060448201526064016108a2565b610d8f8360400151611843565b610ddb5760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964206e6674436f6e74726163740000000000000000000000000060448201526064016108a2565b600080610dfa8560400151866000015187606001518860800151610ef3565b91509150818190610e1e5760405162461bcd60e51b81526004016108a291906131e7565b5060019695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610e6057503360009081526009602052604090205460ff165b610eac5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015260009060609073ffffffffffffffffffffffffffffffffffffffff8716906301ffc9a79060240160206040518083038186803b158015610f7e57600080fd5b505afa158015610f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb69190612e7b565b156110f45760005b84518110156110ee578573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16636352211e87848151811061100c5761100c6133fc565b60200260200101516040518263ffffffff1660e01b815260040161103291815260200190565b60206040518083038186803b15801561104a57600080fd5b505afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110829190612c0c565b73ffffffffffffffffffffffffffffffffffffffff16146110dc57505060408051808201909152601981527f546f6b656e206c6973746564206f72206e6f74206f776e657200000000000000602082015260009150611384565b806110e681613322565b915050610fbe565b5061136f565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fd9b67a2600000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8716906301ffc9a79060240160206040518083038186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b19190612e7b565b1561136f5782518451146112075760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420696473206c656e000000000000000000000000000000000060448201526064016108a2565b60005b845181101561136d57838181518110611225576112256133fc565b60200260200101518773ffffffffffffffffffffffffffffffffffffffff1662fdd58e8888858151811061125b5761125b6133fc565b60200260200101516040518363ffffffff1660e01b81526004016112a192919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60206040518083038186803b1580156112b957600080fd5b505afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f1919061312d565b101580156113185750600084828151811061130e5761130e6133fc565b6020026020010151115b61135b57505060408051808201909152601981527f496e76616c696420616d6f756e74206f722062616c616e636500000000000000602082015260009150611384565b8061136581613322565b91505061120a565b505b50506040805160208101909152600081526001905b94509492505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146113f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061147057503360009081526009602052604090205460ff165b6114bc5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b6007805463ffffffff90921674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061154057503360009081526009602052604090205460ff165b61158c5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461163a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146116f75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b61170160006127a6565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461176a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b600855565b60005473ffffffffffffffffffffffffffffffffffffffff163314806117a457503360009081526009602052604090205460ff165b6117f05760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b6007805463ffffffff9092167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b600073ffffffffffffffffffffffffffffffffffffffff821615801590611880575073ffffffffffffffffffffffffffffffffffffffff82163b15155b6118cc5760405162461bcd60e51b815260206004820152601360248201527f496e76616c6964206e6674436f6e74726163740000000000000000000000000060448201526064016108a2565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8316906301ffc9a79060240160206040518083038186803b15801561195157600080fd5b505afa158015611965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119899190612e7b565b80611a4c57506040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fd9b67a2600000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8316906301ffc9a79060240160206040518083038186803b158015611a1457600080fd5b505afa158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c9190612e7b565b6109a25760405162461bcd60e51b815260206004820152601060248201527f496e76616c696420636f6e74726163740000000000000000000000000000000060448201526064016108a2565b60075460009060017401000000000000000000000000000000000000000090910463ffffffff161080611aef575060075463ffffffff74010000000000000000000000000000000000000000909104811690831611155b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611b2a57503360009081526009602052604090205460ff165b611b765760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b6005805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560068054929093169116179055565b60008082118015611bf0575073ffffffffffffffffffffffffffffffffffffffff83163b15155b15611dba576040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8416906301ffc9a79060240160206040518083038186803b158015611c7a57600080fd5b505afa158015611c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb29190612e7b565b15611d63576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528391908516906370a08231906024015b60206040518083038186803b158015611d2257600080fd5b505afa158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5a919061312d565b10159050611dbe565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528391908516906370a0823190602401611d0a565b5060015b9392505050565b6101808101515160009073ffffffffffffffffffffffffffffffffffffffff1615801590611dfc5750600082610180015160200151115b15611e6b576101808201515173ffffffffffffffffffffffffffffffffffffffff163b611e6b5760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964206578636c7573697665546f6b656e0000000000000000000060448201526064016108a2565b60a082015173ffffffffffffffffffffffffffffffffffffffff166000908152600a602052604090205460ff16611ee45760405162461bcd60e51b815260206004820152601760248201527f556e737570706f7274656420616363657074546f6b656e00000000000000000060448201526064016108a2565b60a082015173ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902054801580611f2057508083610120015110155b611f6c5760405162461bcd60e51b815260206004820152601060248201527f54617267657420746f6f20736d616c6c0000000000000000000000000000000060448201526064016108a2565b50600192915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480611faa57503360009081526009602052604090205460ff165b611ff65760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b60005b82518110156120885781600a6000858481518110612019576120196133fc565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558061208081613322565b915050611ff9565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314806120c257503360009081526009602052604090205460ff165b61210e5760405162461bcd60e51b815260206004820152600c60248201527f6f6e6c794f70657261746f72000000000000000000000000000000000000000060448201526064016108a2565b60005b82518110156120885781818151811061212c5761212c6133fc565b6020026020010151600b600085848151811061214a5761214a6133fc565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061219b90613322565b915050612111565b60005473ffffffffffffffffffffffffffffffffffffffff16331461220a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000610100825111156122a65760405162461bcd60e51b815260206004820152600e60248201527f4e6f746520746f6f206c6172676500000000000000000000000000000000000060448201526064016108a2565b6122af83611a98565b6122fb5760405162461bcd60e51b815260206004820152600f60248201527f4f766572206a6f696e206c696d6974000000000000000000000000000000000060448201526064016108a2565b60008363ffffffff16116123515760405162461bcd60e51b815260206004820152600b60248201527f496e76616c6964206e756d00000000000000000000000000000000000000000060448201526064016108a2565b6001546040517f1d65e77e0000000000000000000000000000000000000000000000000000000081526004810186905260009173ffffffffffffffffffffffffffffffffffffffff1690631d65e77e9060240160006040518083038186803b1580156123bc57600080fd5b505afa1580156123d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526124169190810190612fbd565b90508573ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156124985760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420616c6c6f77206f776e6572000000000000000000000000000000000060448201526064016108a2565b8060e0015142101580156124b157508061010001514211155b6124fd5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642074696d652072616e6765000000000000000000000000000060448201526064016108a2565b60008160c001516005811115612515576125156133cd565b1480612536575060018160c001516005811115612534576125346133cd565b145b6125825760405162461bcd60e51b815260206004820152600e60248201527f496e76616c69642073746174757300000000000000000000000000000000000060448201526064016108a2565b60006125a28563ffffffff1683610140015161281b90919063ffffffff16565b9050600081116125f45760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e7400000000000000000000000000000000000060448201526064016108a2565b6101808201515173ffffffffffffffffffffffffffffffffffffffff16158015906126285750600082610180015160200151115b15610e1e576101808201518051602090910151612646918991611bc9565b610e1e5760405162461bcd60e51b815260206004820152601260248201527f4e6f742070617373204558434c5553495645000000000000000000000000000060448201526064016108a2565b60005473ffffffffffffffffffffffffffffffffffffffff1633146126f95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108a2565b73ffffffffffffffffffffffffffffffffffffffff81166127825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108a2565b61278b816127a6565b50565b6000611dbe828461335b565b6000611dbe82846132ba565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611dbe82846132ce565b80356128328161345a565b919050565b80516128328161345a565b600082601f83011261285357600080fd5b8135602061286861286383613296565b613247565b80838252828201915082860187848660051b890101111561288857600080fd5b60005b858110156128b057813561289e8161345a565b8452928401929084019060010161288b565b5090979650505050505050565b600082601f8301126128ce57600080fd5b813560206128de61286383613296565b80838252828201915082860187848660051b89010111156128fe57600080fd5b60005b858110156128b057813584529284019290840190600101612901565b600082601f83011261292e57600080fd5b8151602061293e61286383613296565b80838252828201915082860187848660051b890101111561295e57600080fd5b60005b858110156128b057815184529284019290840190600101612961565b80356128328161348a565b80516128328161348a565b600082601f8301126129a457600080fd5b813567ffffffffffffffff8111156129be576129be61342b565b6129ef60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613247565b818152846020838601011115612a0457600080fd5b816020850160208301376000918101602001919091529392505050565b600060408284031215612a3357600080fd5b612a3b6131fa565b90508135612a488161345a565b808252506020820135602082015292915050565b600060408284031215612a6e57600080fd5b612a766131fa565b90508151612a838161345a565b808252506020820151602082015292915050565b60006102008284031215612aaa57600080fd5b612ab2613223565b9050612abd82612827565b8152612acb60208301612bc5565b6020820152612adc60408301612827565b6040820152606082013567ffffffffffffffff80821115612afc57600080fd5b612b08858386016128bd565b60608401526080840135915080821115612b2157600080fd5b50612b2e848285016128bd565b608083015250612b4060a08301612827565b60a0820152612b5160c0830161297d565b60c082015260e08281013590820152610100808301359082015261012080830135908201526101408083013590820152610160612b8f818401612bc5565b90820152610180612ba284848301612a21565b81830152506101c0808301356101a08301526101e0830135818301525092915050565b803561283281613497565b805161283281613497565b803563ffffffff8116811461283257600080fd5b600060208284031215612c0157600080fd5b8135611dbe8161345a565b600060208284031215612c1e57600080fd5b8151611dbe8161345a565b60008060008060808587031215612c3f57600080fd5b8435612c4a8161345a565b93506020850135612c5a8161345a565b9250604085013567ffffffffffffffff80821115612c7757600080fd5b612c83888389016128bd565b93506060870135915080821115612c9957600080fd5b50612ca6878288016128bd565b91505092959194509250565b600080600060608486031215612cc757600080fd5b8335612cd28161345a565b92506020840135612ce28161345a565b929592945050506040919091013590565b60008060408385031215612d0657600080fd5b8235612d118161345a565b91506020830135612d218161347c565b809150509250929050565b60008060408385031215612d3f57600080fd5b8235612d4a8161345a565b9150602083013567ffffffffffffffff811115612d6657600080fd5b612d7285828601612a97565b9150509250929050565b60008060008060808587031215612d9257600080fd5b8435612d9d8161345a565b935060208501359250612db260408601612bdb565b9150606085013567ffffffffffffffff811115612dce57600080fd5b612ca687828801612993565b60008060408385031215612ded57600080fd5b823567ffffffffffffffff80821115612e0557600080fd5b612e1186838701612842565b93506020850135915080821115612e2757600080fd5b50612d72858286016128bd565b60008060408385031215612e4757600080fd5b823567ffffffffffffffff811115612e5e57600080fd5b612e6a85828601612842565b9250506020830135612d218161347c565b600060208284031215612e8d57600080fd5b8151611dbe8161347c565b60008060408385031215612eab57600080fd5b8235612eb68161345a565b91506020830135612d218161345a565b600060208284031215612ed857600080fd5b813567ffffffffffffffff80821115612ef057600080fd5b9083019060608286031215612f0457600080fd5b604051606081018181108382111715612f1f57612f1f61342b565b6040528235612f2d81613497565b8152602083013582811115612f4157600080fd5b612f4d87828601612993565b602083015250604083013582811115612f6557600080fd5b612f7187828601612993565b60408301525095945050505050565b600060208284031215612f9257600080fd5b813567ffffffffffffffff811115612fa957600080fd5b612fb584828501612a97565b949350505050565b600060208284031215612fcf57600080fd5b815167ffffffffffffffff80821115612fe757600080fd5b908301906102008286031215612ffc57600080fd5b613004613223565b61300d83612837565b815261301b60208401612bd0565b602082015261302c60408401612837565b604082015260608301518281111561304357600080fd5b61304f8782860161291d565b60608301525060808301518281111561306757600080fd5b6130738782860161291d565b60808301525061308560a08401612837565b60a082015261309660c08401612988565b60c082015260e0838101519082015261010080840151908201526101208084015190820152610140808401519082015261016091506130d6828401612bd0565b8282015261018091506130eb86838501612a5c565b828201526101c09150818301516101a08201526101e08301518282015280935050505092915050565b60006020828403121561312657600080fd5b5035919050565b60006020828403121561313f57600080fd5b5051919050565b60006020828403121561315857600080fd5b611dbe82612bdb565b6000815180845260005b818110156131875760208185018101518683018201520161316b565b81811115613199576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8215158152604060208201526000612fb56040830184613161565b602081526000611dbe6020830184613161565b6040805190810167ffffffffffffffff8111828210171561321d5761321d61342b565b60405290565b6040516101e0810167ffffffffffffffff8111828210171561321d5761321d61342b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561328e5761328e61342b565b604052919050565b600067ffffffffffffffff8211156132b0576132b061342b565b5060051b60200190565b6000826132c9576132c961339e565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156133065761330661336f565b500290565b60008282101561331d5761331d61336f565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156133545761335461336f565b5060010190565b60008261336a5761336a61339e565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461278b57600080fd5b801515811461278b57600080fd5b6006811061278b57600080fd5b61ffff8116811461278b57600080fdfea26469706673582212208820ffa8ecbb869952ae68c3b0aa2b3a66f300aa85b1f2eb559fe28a094a3f3d64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkAcceptToken(address)": {
        "params": {
          "acceptToken": "token address, blockchain token is address(0)"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "checkTokenListing(address,address,uint256[],uint256[])": {
        "params": {
          "addr": "NFT contract address",
          "amounts": "tokenId amount array (ERC721 can be null)",
          "tokenIds": "tokenId array"
        }
      },
      "getProtocolFee()": {
        "returns": {
          "_0": "fee (200 = 25%, 1,000 = 10%)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setProtocolFee(uint256)": {
        "params": {
          "fee": "fee (500 = 5%, 1,000 = 10%)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Openluck LucksHelper.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkAcceptToken(address)": {
        "notice": "check acceptToken support"
      },
      "checkNFTContract(address)": {
        "notice": "check nft contract, support erc721 & erc1155"
      },
      "checkNewTask(address,(address,uint16,address,uint256[],uint256[],address,uint8,uint256,uint256,uint256,uint256,uint16,(address,uint256),uint256,uint256))": {
        "notice": "check the new task inputs"
      },
      "checkTokenListing(address,address,uint256[],uint256[])": {
        "notice": "checking seller listing NFTs ownership and balance"
      },
      "getDrawDelay()": {
        "notice": "get Draw Delay second for security"
      },
      "getGROUPS()": {
        "notice": "get ILucksGroup instance  "
      },
      "getProtocolFee()": {
        "notice": "get protocol fee for eache success TaskItem payment, default is 2%"
      },
      "getSTRATEGY()": {
        "notice": "get ILucksPaymentStrategy instance  "
      },
      "getVRF()": {
        "notice": "get ILucksVRF instance  "
      },
      "setAcceptTokens(address[],bool)": {
        "notice": "set the acceptTokens"
      },
      "setDrawDelay(uint32)": {
        "notice": "set Draw Delay for security"
      },
      "setExecutor(address)": {
        "notice": "set operator"
      },
      "setJoinLimitNum(uint32)": {
        "notice": "set the set MAX_PER_JOIN_NUM"
      },
      "setLucksGroup(address)": {
        "notice": "set the LucksGroup"
      },
      "setLucksVRF(address)": {
        "notice": "set the VRF"
      },
      "setOperator(address,bool)": {
        "notice": "set operator"
      },
      "setPaymentStrategy(address)": {
        "notice": "set the PaymentStrategy"
      },
      "setProtocolFee(uint256)": {
        "notice": "set protocol fee for eache success TaskItem payment, default is 5%"
      },
      "setProtocolFeeRecipient(address)": {
        "notice": "set the ProtocolFeeRecipient"
      }
    },
    "notice": "It is the contract for protocol settings",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 917,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14335,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "EXECUTOR",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILucksExecutor)9847"
      },
      {
        "astId": 14338,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "VRF",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILucksVRF)10196"
      },
      {
        "astId": 14341,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "GROUPS",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILucksGroup)9901"
      },
      {
        "astId": 14344,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "STRATEGY",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ILucksPaymentStrategy)10083"
      },
      {
        "astId": 14347,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "AUTO_CLOSE",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ILucksAuto)9483"
      },
      {
        "astId": 14350,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "AUTO_DRAW",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ILucksAuto)9483"
      },
      {
        "astId": 14352,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 14355,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "MAX_PER_JOIN_NUM",
        "offset": 20,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 14358,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "DRAW_DELAY_SEC",
        "offset": 24,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 14361,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "protocolFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 14365,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "operators",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14369,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "acceptTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14373,
        "contract": "contracts/lucks/LucksHelper.sol:LucksHelper",
        "label": "minTargetAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILucksAuto)9483": {
        "encoding": "inplace",
        "label": "contract ILucksAuto",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksExecutor)9847": {
        "encoding": "inplace",
        "label": "contract ILucksExecutor",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksGroup)9901": {
        "encoding": "inplace",
        "label": "contract ILucksGroup",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksPaymentStrategy)10083": {
        "encoding": "inplace",
        "label": "contract ILucksPaymentStrategy",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksVRF)10196": {
        "encoding": "inplace",
        "label": "contract ILucksVRF",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
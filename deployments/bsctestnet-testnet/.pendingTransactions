{
  "0x29ee160bf824739c5ad0eda35faf49f11f615ea471488cd30bc32848f26b21a8": {
    "name": "DoodleApes",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "DoodleApes",
      "sourceName": "contracts/tests/NFTs/DoodleApes.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "mintTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "num",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "baseURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "num",
              "type": "uint256"
            }
          ],
          "name": "mint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "safeMint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60e0604052602a60808181529062001ede60a0398051620000299160089160209091019062000524565b503480156200003757600080fd5b5060405162001f0838038062001f088339810160408190526200005a91620005ca565b604080518082018252600f81526e446f6f646c6520417065732042534360881b602080830191825283518085019094526005845264644170657360d81b908401528151919291620000ae9160009162000524565b508051620000c490600190602084019062000524565b505050620000e1620000db620000f560201b60201c565b620000f9565b620000ed82826200014b565b505062000740565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b81811015620001775762000162836200017c565b806200016e816200070c565b9150506200014e565b505050565b6000620001956007620001be60201b620009c21760201c565b9050620001ae6007620001c260201b620009c61760201c565b620001ba8282620001cb565b5050565b5490565b80546001019055565b620001ba828260405180602001604052806000815250620001ed60201b60201c565b620001f9838362000264565b620002086000848484620003ac565b620001775760405162461bcd60e51b8152602060048201526032602482015260008051602062001ebe83398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084015b60405180910390fd5b6001600160a01b038216620002bc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016200025b565b6000818152600260205260409020546001600160a01b031615620003235760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016200025b565b6001600160a01b03821660009081526003602052604081208054600192906200034e908490620006b4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000620003cd846001600160a01b03166200051560201b620009cf1760201c565b156200050957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906200040790339089908890889060040162000639565b602060405180830381600087803b1580156200042257600080fd5b505af192505050801562000455575060408051601f3d908101601f19168201909252620004529181019062000606565b60015b620004ee573d80801562000486576040519150601f19603f3d011682016040523d82523d6000602084013e6200048b565b606091505b508051620004e65760405162461bcd60e51b8152602060048201526032602482015260008051602062001ebe83398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016200025b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506200050d565b5060015b949350505050565b6001600160a01b03163b151590565b8280546200053290620006cf565b90600052602060002090601f016020900481019282620005565760008555620005a1565b82601f106200057157805160ff1916838001178555620005a1565b82800160010185558215620005a1579182015b82811115620005a157825182559160200191906001019062000584565b50620005af929150620005b3565b5090565b5b80821115620005af5760008155600101620005b4565b60008060408385031215620005de57600080fd5b82516001600160a01b0381168114620005f657600080fd5b6020939093015192949293505050565b6000602082840312156200061957600080fd5b81516001600160e01b0319811681146200063257600080fd5b9392505050565b600060018060a01b038087168352602081871681850152856040850152608060608501528451915081608085015260005b82811015620006885785810182015185820160a0015281016200066a565b828111156200069b57600060a084870101525b5050601f01601f19169190910160a00195945050505050565b60008219821115620006ca57620006ca6200072a565b500190565b600181811c90821680620006e457607f821691505b602082108114156200070657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200072357620007236200072a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b61176e80620007506000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636c0360eb116100ad578063a22cb46511610071578063a22cb4651461025f578063b88d4fde14610272578063c87b56dd14610285578063e985e9c514610298578063f2fde38b146102d457600080fd5b80636c0360eb1461022357806370a082311461022b578063715018a61461023e5780638da5cb5b1461024657806395d89b411461025757600080fd5b806323b872dd116100f457806323b872dd146101c457806340c10f19146101d757806340d097c3146101ea57806342842e0e146101fd5780636352211e1461021057600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f3660046113bc565b6102e7565b60405190151581526020015b60405180910390f35b610161610339565b604051610150919061153b565b61018161017c3660046113f6565b6103cb565b6040516001600160a01b039091168152602001610150565b6101ac6101a7366004611392565b610465565b005b6101b661057b565b604051908152602001610150565b6101ac6101d236600461123e565b61058b565b6101ac6101e5366004611392565b6105bc565b6101ac6101f83660046111e9565b6105e2565b6101ac61020b36600461123e565b61060b565b61018161021e3660046113f6565b610626565b61016161069d565b6101b66102393660046111e9565b61072b565b6101ac6107b2565b6006546001600160a01b0316610181565b610161610818565b6101ac61026d366004611356565b610827565b6101ac61028036600461127a565b610832565b6101616102933660046113f6565b61086a565b6101446102a636600461120b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101ac6102e23660046111e9565b6108f7565b60006001600160e01b031982166380ac58cd60e01b148061031857506001600160e01b03198216635b5e139f60e01b145b8061033357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461034890611660565b80601f016020809104026020016040519081016040528092919081815260200182805461037490611660565b80156103c15780601f10610396576101008083540402835291602001916103c1565b820191906000526020600020905b8154815290600101906020018083116103a457829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104495760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061047082610626565b9050806001600160a01b0316836001600160a01b031614156104de5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610440565b336001600160a01b03821614806104fa57506104fa81336102a6565b61056c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610440565b61057683836109de565b505050565b600061058660075490565b905090565b6105953382610a4c565b6105b15760405162461bcd60e51b8152600401610440906115a0565b610576838383610b43565b60005b81811015610576576105d0836105e2565b806105da8161169b565b9150506105bf565b60006105ed60075490565b90506105fd600780546001019055565b6106078282610cdf565b5050565b61057683838360405180602001604052806000815250610832565b6000818152600260205260408120546001600160a01b0316806103335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610440565b600880546106aa90611660565b80601f01602080910402602001604051908101604052809291908181526020018280546106d690611660565b80156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b505050505081565b60006001600160a01b0382166107965760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610440565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b0316331461080c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b6108166000610cf9565b565b60606001805461034890611660565b610607338383610d4b565b61083c3383610a4c565b6108585760405162461bcd60e51b8152600401610440906115a0565b61086484848484610e1a565b50505050565b6000818152600260205260409020546060906001600160a01b03166108c55760405162461bcd60e51b81526020600482015260116024820152702737b732bc34b9ba32b73a103a37b5b2b760791b6044820152606401610440565b60086108d083610e4d565b6040516020016108e1929190611457565b6040516020818303038152906040529050919050565b6006546001600160a01b031633146109515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b6001600160a01b0381166109b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610440565b6109bf81610cf9565b50565b5490565b80546001019055565b6001600160a01b03163b151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a1382610626565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610ac55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610440565b6000610ad083610626565b9050806001600160a01b0316846001600160a01b03161480610b0b5750836001600160a01b0316610b00846103cb565b6001600160a01b0316145b80610b3b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610b5682610626565b6001600160a01b031614610bba5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610440565b6001600160a01b038216610c1c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610440565b610c276000826109de565b6001600160a01b0383166000908152600360205260408120805460019290610c5090849061161d565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c7e9084906115f1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610607828260405180602001604052806000815250610f4b565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610dad5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610440565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e25848484610b43565b610e3184848484610f7e565b6108645760405162461bcd60e51b81526004016104409061154e565b606081610e715750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e9b5780610e858161169b565b9150610e949050600a83611609565b9150610e75565b60008167ffffffffffffffff811115610eb657610eb661170c565b6040519080825280601f01601f191660200182016040528015610ee0576020820181803683370190505b5090505b8415610b3b57610ef560018361161d565b9150610f02600a866116b6565b610f0d9060306115f1565b60f81b818381518110610f2257610f226116f6565b60200101906001600160f81b031916908160001a905350610f44600a86611609565b9450610ee4565b610f55838361108b565b610f626000848484610f7e565b6105765760405162461bcd60e51b81526004016104409061154e565b60006001600160a01b0384163b1561108057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610fc29033908990889088906004016114fe565b602060405180830381600087803b158015610fdc57600080fd5b505af192505050801561100c575060408051601f3d908101601f19168201909252611009918101906113d9565b60015b611066573d80801561103a576040519150601f19603f3d011682016040523d82523d6000602084013e61103f565b606091505b50805161105e5760405162461bcd60e51b81526004016104409061154e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b3b565b506001949350505050565b6001600160a01b0382166110e15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610440565b6000818152600260205260409020546001600160a01b0316156111465760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610440565b6001600160a01b038216600090815260036020526040812080546001929061116f9084906115f1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b03811681146111e457600080fd5b919050565b6000602082840312156111fb57600080fd5b611204826111cd565b9392505050565b6000806040838503121561121e57600080fd5b611227836111cd565b9150611235602084016111cd565b90509250929050565b60008060006060848603121561125357600080fd5b61125c846111cd565b925061126a602085016111cd565b9150604084013590509250925092565b6000806000806080858703121561129057600080fd5b611299856111cd565b93506112a7602086016111cd565b925060408501359150606085013567ffffffffffffffff808211156112cb57600080fd5b818701915087601f8301126112df57600080fd5b8135818111156112f1576112f161170c565b604051601f8201601f19908116603f011681019083821181831017156113195761131961170c565b816040528281528a602084870101111561133257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561136957600080fd5b611372836111cd565b91506020830135801515811461138757600080fd5b809150509250929050565b600080604083850312156113a557600080fd5b6113ae836111cd565b946020939093013593505050565b6000602082840312156113ce57600080fd5b813561120481611722565b6000602082840312156113eb57600080fd5b815161120481611722565b60006020828403121561140857600080fd5b5035919050565b60008151808452611427816020860160208601611634565b601f01601f19169290920160200192915050565b6000815161144d818560208601611634565b9290920192915050565b600080845481600182811c91508083168061147357607f831692505b602080841082141561149357634e487b7160e01b86526022600452602486fd5b8180156114a757600181146114b8576114e5565b60ff198616895284890196506114e5565b60008b81526020902060005b868110156114dd5781548b8201529085019083016114c4565b505084890196505b5050505050506114f5818561143b565b95945050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115319083018461140f565b9695505050505050565b602081526000611204602083018461140f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115611604576116046116ca565b500190565b600082611618576116186116e0565b500490565b60008282101561162f5761162f6116ca565b500390565b60005b8381101561164f578181015183820152602001611637565b838111156108645750506000910152565b600181811c9082168061167457607f821691505b6020821081141561169557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156116af576116af6116ca565b5060010190565b6000826116c5576116c56116e0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146109bf57600080fdfea2646970667358221220fa66a82fda69671e502714520863453ef93feead6212d3c0f1ce66c2bd53568664736f6c634300080600334552433732313a207472616e7366657220746f206e6f6e20455243373231526568747470733a2f2f646f6f646c65617065732e6d6574612e72617265626f6172642e636f6d2f6170692f",
      "deployedBytecode": "",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See {IERC721Metadata-tokenURI}."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_19830": {
              "entryPoint": null,
              "id": 19830,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_3443": {
              "entryPoint": null,
              "id": 3443,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_933": {
              "entryPoint": null,
              "id": 933,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_afterTokenTransfer_4245": {
              "entryPoint": null,
              "id": 4245,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_4234": {
              "entryPoint": null,
              "id": 4234,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_checkOnERC721Received_4223": {
              "entryPoint": 940,
              "id": 4223,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_exists_3819": {
              "entryPoint": null,
              "id": 3819,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_mint_3970": {
              "entryPoint": 612,
              "id": 3970,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_4826": {
              "entryPoint": 245,
              "id": 4826,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_safeMint_3875": {
              "entryPoint": 459,
              "id": 3875,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_safeMint_3904": {
              "entryPoint": 493,
              "id": 3904,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_transferOwnership_1013": {
              "entryPoint": 249,
              "id": 1013,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@current_4854": {
              "entryPoint": 446,
              "id": 4854,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@increment_4868": {
              "entryPoint": 450,
              "id": 4868,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@isContract_4452": {
              "entryPoint": 1301,
              "id": 4452,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@mint_19854": {
              "entryPoint": 331,
              "id": 19854,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@safeMint_19903": {
              "entryPoint": 380,
              "id": 19903,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_addresst_uint256_fromMemory": {
              "entryPoint": 1482,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes4_fromMemory": {
              "entryPoint": 1542,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 1593,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 1716,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 1743,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 1804,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 1834,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:3463:105",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:105",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "112:253:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "158:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "167:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "170:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "160:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "160:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "160:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "133:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "142:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "129:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "129:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "154:2:105",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "125:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "125:32:105"
                          },
                          "nodeType": "YulIf",
                          "src": "122:2:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "183:29:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "202:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "196:5:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "196:16:105"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "187:5:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "275:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "284:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "287:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "277:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "277:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "277:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "234:5:105"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "245:5:105"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "260:3:105",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "265:1:105",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "256:3:105"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "256:11:105"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "269:1:105",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "252:3:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "252:19:105"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "241:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "241:31:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "231:2:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "231:42:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "224:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "224:50:105"
                          },
                          "nodeType": "YulIf",
                          "src": "221:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "300:15:105",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "310:5:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "300:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "324:35:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "344:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "355:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "340:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "340:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "334:5:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "334:25:105"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "324:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "70:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "81:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "93:6:105",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "101:6:105",
                        "type": ""
                      }
                    ],
                    "src": "14:351:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "450:210:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "496:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "505:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "508:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "498:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "498:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "498:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "471:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "480:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "467:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "467:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "492:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "463:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "463:32:105"
                          },
                          "nodeType": "YulIf",
                          "src": "460:2:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "521:29:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "540:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "534:5:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "534:16:105"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "525:5:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "614:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "623:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "626:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "616:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "616:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "616:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "572:5:105"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "583:5:105"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "594:3:105",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "599:10:105",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "590:3:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "590:20:105"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "579:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "579:32:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "569:2:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "569:43:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "562:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "562:51:105"
                          },
                          "nodeType": "YulIf",
                          "src": "559:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "639:15:105",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "649:5:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "639:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "416:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "427:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "439:6:105",
                        "type": ""
                      }
                    ],
                    "src": "370:290:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "868:666:105",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "878:29:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "896:3:105",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "901:1:105",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "892:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "892:11:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "905:1:105",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "888:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "888:19:105"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "882:2:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "923:9:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "938:6:105"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "946:2:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "934:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "934:15:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "916:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "916:34:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "916:34:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "959:12:105",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "969:2:105",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "963:2:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "991:9:105"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1002:2:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "987:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "987:18:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1011:6:105"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1019:2:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1007:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1007:15:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "980:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "980:43:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "980:43:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1043:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1054:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1039:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1039:18:105"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "1059:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1032:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1032:34:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1032:34:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1086:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1097:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1082:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1082:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1102:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1075:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1075:31:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1075:31:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1115:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "1135:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1129:5:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1129:13:105"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1119:6:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1162:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1173:3:105",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1158:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1158:19:105"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1179:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1151:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1151:35:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1151:35:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1195:10:105",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1204:1:105",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "1199:1:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1264:91:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "1293:9:105"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "1304:1:105"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1289:3:105"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1289:17:105"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1308:3:105",
                                          "type": "",
                                          "value": "160"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1285:3:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1285:27:105"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value3",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1328:6:105"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1336:1:105"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "1324:3:105"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "1324:14:105"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "1340:2:105"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1320:3:105"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1320:23:105"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1314:5:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1314:30:105"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1278:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1278:67:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1278:67:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "1225:1:105"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1228:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1222:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1222:13:105"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "1236:19:105",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1238:15:105",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "1247:1:105"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1250:2:105"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1243:3:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1243:10:105"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1238:1:105"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "1218:3:105",
                            "statements": []
                          },
                          "src": "1214:141:105"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1389:67:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "1418:9:105"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "1429:6:105"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1414:3:105"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1414:22:105"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1438:3:105",
                                          "type": "",
                                          "value": "160"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1410:3:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1410:32:105"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1444:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1403:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1403:43:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1403:43:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "1370:1:105"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1373:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1367:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1367:13:105"
                          },
                          "nodeType": "YulIf",
                          "src": "1364:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1465:63:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1481:9:105"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "1500:6:105"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1508:2:105",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1496:3:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1496:15:105"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1517:2:105",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "1513:3:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1513:7:105"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1492:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1492:29:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1477:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1477:45:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1524:3:105",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1473:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1473:55:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1465:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "813:9:105",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "824:6:105",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "832:6:105",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "840:6:105",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "848:6:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "859:4:105",
                        "type": ""
                      }
                    ],
                    "src": "665:869:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1713:240:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1730:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1741:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1723:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1723:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1723:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1764:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1775:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1760:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1760:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1780:2:105",
                                "type": "",
                                "value": "50"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1753:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1753:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1753:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1803:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1814:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1799:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1799:18:105"
                              },
                              {
                                "hexValue": "4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1819:34:105",
                                "type": "",
                                "value": "ERC721: transfer to non ERC721Re"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1792:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1792:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1792:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1874:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1885:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1870:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1870:18:105"
                              },
                              {
                                "hexValue": "63656976657220696d706c656d656e746572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1890:20:105",
                                "type": "",
                                "value": "ceiver implementer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1863:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1863:48:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1863:48:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1920:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1932:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1943:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1928:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1928:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1920:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1690:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1704:4:105",
                        "type": ""
                      }
                    ],
                    "src": "1539:414:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2132:178:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2149:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2160:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2142:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2142:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2142:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2183:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2194:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2179:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2179:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2199:2:105",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2172:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2172:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2172:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2222:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2233:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2218:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2218:18:105"
                              },
                              {
                                "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2238:30:105",
                                "type": "",
                                "value": "ERC721: token already minted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2211:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2211:58:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2211:58:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2278:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2290:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2301:2:105",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2286:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2286:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2278:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2109:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2123:4:105",
                        "type": ""
                      }
                    ],
                    "src": "1958:352:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2489:182:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2506:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2517:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2499:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2499:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2499:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2540:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2551:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2536:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2536:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2556:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2529:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2529:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2529:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2579:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2590:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2575:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2575:18:105"
                              },
                              {
                                "hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2595:34:105",
                                "type": "",
                                "value": "ERC721: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2568:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2568:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2568:62:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2639:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2651:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2662:2:105",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2647:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2647:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2639:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2466:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2480:4:105",
                        "type": ""
                      }
                    ],
                    "src": "2315:356:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2724:80:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2751:22:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "2753:16:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2753:18:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2753:18:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "2740:1:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2747:1:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "2743:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2743:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2737:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2737:13:105"
                          },
                          "nodeType": "YulIf",
                          "src": "2734:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2782:16:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "2793:1:105"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "2796:1:105"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2789:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2789:9:105"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "2782:3:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "2707:1:105",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "2710:1:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "2716:3:105",
                        "type": ""
                      }
                    ],
                    "src": "2676:128:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2864:325:105",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2874:22:105",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2888:1:105",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "2891:4:105"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "2884:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2884:12:105"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "2874:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2905:38:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "2935:4:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2941:1:105",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2931:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2931:12:105"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "2909:18:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2982:31:105",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2984:27:105",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "2998:6:105"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3006:4:105",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "2994:3:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2994:17:105"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2984:6:105"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "2962:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2955:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2955:26:105"
                          },
                          "nodeType": "YulIf",
                          "src": "2952:2:105"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3072:111:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3093:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3100:3:105",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3105:10:105",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "3096:3:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3096:20:105"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3086:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3086:31:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3086:31:105"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3137:1:105",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3140:4:105",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3130:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3130:15:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3130:15:105"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3165:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3168:4:105",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3158:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3158:15:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3158:15:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "3028:18:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3051:6:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3059:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3048:2:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3048:14:105"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "3025:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3025:38:105"
                          },
                          "nodeType": "YulIf",
                          "src": "3022:2:105"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "2844:4:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2853:6:105",
                        "type": ""
                      }
                    ],
                    "src": "2809:380:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3241:88:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3272:22:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "3274:16:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3274:18:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3274:18:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3257:5:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3268:1:105",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "3264:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3264:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "3254:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3254:17:105"
                          },
                          "nodeType": "YulIf",
                          "src": "3251:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3303:20:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3314:5:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3321:1:105",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3310:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3310:13:105"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "3303:3:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3223:5:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "3233:3:105",
                        "type": ""
                      }
                    ],
                    "src": "3194:135:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3366:95:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3383:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3390:3:105",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3395:10:105",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3386:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3386:20:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3376:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3376:31:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3376:31:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3423:1:105",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3426:4:105",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3416:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3416:15:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3416:15:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3447:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3450:4:105",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "3440:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3440:15:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3440:15:105"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3334:127:105"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        let _2 := 32\n        mstore(add(headStart, _2), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        let length := mload(value3)\n        mstore(add(headStart, 128), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _2) }\n        {\n            mstore(add(add(headStart, i), 160), mload(add(add(value3, i), _2)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 160), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 160)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
              "id": 105,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60e0604052602a60808181529062001ede60a0398051620000299160089160209091019062000524565b503480156200003757600080fd5b5060405162001f0838038062001f088339810160408190526200005a91620005ca565b604080518082018252600f81526e446f6f646c6520417065732042534360881b602080830191825283518085019094526005845264644170657360d81b908401528151919291620000ae9160009162000524565b508051620000c490600190602084019062000524565b505050620000e1620000db620000f560201b60201c565b620000f9565b620000ed82826200014b565b505062000740565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b81811015620001775762000162836200017c565b806200016e816200070c565b9150506200014e565b505050565b6000620001956007620001be60201b620009c21760201c565b9050620001ae6007620001c260201b620009c61760201c565b620001ba8282620001cb565b5050565b5490565b80546001019055565b620001ba828260405180602001604052806000815250620001ed60201b60201c565b620001f9838362000264565b620002086000848484620003ac565b620001775760405162461bcd60e51b8152602060048201526032602482015260008051602062001ebe83398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084015b60405180910390fd5b6001600160a01b038216620002bc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016200025b565b6000818152600260205260409020546001600160a01b031615620003235760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016200025b565b6001600160a01b03821660009081526003602052604081208054600192906200034e908490620006b4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000620003cd846001600160a01b03166200051560201b620009cf1760201c565b156200050957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906200040790339089908890889060040162000639565b602060405180830381600087803b1580156200042257600080fd5b505af192505050801562000455575060408051601f3d908101601f19168201909252620004529181019062000606565b60015b620004ee573d80801562000486576040519150601f19603f3d011682016040523d82523d6000602084013e6200048b565b606091505b508051620004e65760405162461bcd60e51b8152602060048201526032602482015260008051602062001ebe83398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016200025b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506200050d565b5060015b949350505050565b6001600160a01b03163b151590565b8280546200053290620006cf565b90600052602060002090601f016020900481019282620005565760008555620005a1565b82601f106200057157805160ff1916838001178555620005a1565b82800160010185558215620005a1579182015b82811115620005a157825182559160200191906001019062000584565b50620005af929150620005b3565b5090565b5b80821115620005af5760008155600101620005b4565b60008060408385031215620005de57600080fd5b82516001600160a01b0381168114620005f657600080fd5b6020939093015192949293505050565b6000602082840312156200061957600080fd5b81516001600160e01b0319811681146200063257600080fd5b9392505050565b600060018060a01b038087168352602081871681850152856040850152608060608501528451915081608085015260005b82811015620006885785810182015185820160a0015281016200066a565b828111156200069b57600060a084870101525b5050601f01601f19169190910160a00195945050505050565b60008219821115620006ca57620006ca6200072a565b500190565b600181811c90821680620006e457607f821691505b602082108114156200070657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200072357620007236200072a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b61176e80620007506000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636c0360eb116100ad578063a22cb46511610071578063a22cb4651461025f578063b88d4fde14610272578063c87b56dd14610285578063e985e9c514610298578063f2fde38b146102d457600080fd5b80636c0360eb1461022357806370a082311461022b578063715018a61461023e5780638da5cb5b1461024657806395d89b411461025757600080fd5b806323b872dd116100f457806323b872dd146101c457806340c10f19146101d757806340d097c3146101ea57806342842e0e146101fd5780636352211e1461021057600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f3660046113bc565b6102e7565b60405190151581526020015b60405180910390f35b610161610339565b604051610150919061153b565b61018161017c3660046113f6565b6103cb565b6040516001600160a01b039091168152602001610150565b6101ac6101a7366004611392565b610465565b005b6101b661057b565b604051908152602001610150565b6101ac6101d236600461123e565b61058b565b6101ac6101e5366004611392565b6105bc565b6101ac6101f83660046111e9565b6105e2565b6101ac61020b36600461123e565b61060b565b61018161021e3660046113f6565b610626565b61016161069d565b6101b66102393660046111e9565b61072b565b6101ac6107b2565b6006546001600160a01b0316610181565b610161610818565b6101ac61026d366004611356565b610827565b6101ac61028036600461127a565b610832565b6101616102933660046113f6565b61086a565b6101446102a636600461120b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101ac6102e23660046111e9565b6108f7565b60006001600160e01b031982166380ac58cd60e01b148061031857506001600160e01b03198216635b5e139f60e01b145b8061033357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461034890611660565b80601f016020809104026020016040519081016040528092919081815260200182805461037490611660565b80156103c15780601f10610396576101008083540402835291602001916103c1565b820191906000526020600020905b8154815290600101906020018083116103a457829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104495760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061047082610626565b9050806001600160a01b0316836001600160a01b031614156104de5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610440565b336001600160a01b03821614806104fa57506104fa81336102a6565b61056c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610440565b61057683836109de565b505050565b600061058660075490565b905090565b6105953382610a4c565b6105b15760405162461bcd60e51b8152600401610440906115a0565b610576838383610b43565b60005b81811015610576576105d0836105e2565b806105da8161169b565b9150506105bf565b60006105ed60075490565b90506105fd600780546001019055565b6106078282610cdf565b5050565b61057683838360405180602001604052806000815250610832565b6000818152600260205260408120546001600160a01b0316806103335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610440565b600880546106aa90611660565b80601f01602080910402602001604051908101604052809291908181526020018280546106d690611660565b80156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b505050505081565b60006001600160a01b0382166107965760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610440565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b0316331461080c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b6108166000610cf9565b565b60606001805461034890611660565b610607338383610d4b565b61083c3383610a4c565b6108585760405162461bcd60e51b8152600401610440906115a0565b61086484848484610e1a565b50505050565b6000818152600260205260409020546060906001600160a01b03166108c55760405162461bcd60e51b81526020600482015260116024820152702737b732bc34b9ba32b73a103a37b5b2b760791b6044820152606401610440565b60086108d083610e4d565b6040516020016108e1929190611457565b6040516020818303038152906040529050919050565b6006546001600160a01b031633146109515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b6001600160a01b0381166109b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610440565b6109bf81610cf9565b50565b5490565b80546001019055565b6001600160a01b03163b151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a1382610626565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610ac55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610440565b6000610ad083610626565b9050806001600160a01b0316846001600160a01b03161480610b0b5750836001600160a01b0316610b00846103cb565b6001600160a01b0316145b80610b3b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610b5682610626565b6001600160a01b031614610bba5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610440565b6001600160a01b038216610c1c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610440565b610c276000826109de565b6001600160a01b0383166000908152600360205260408120805460019290610c5090849061161d565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c7e9084906115f1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610607828260405180602001604052806000815250610f4b565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610dad5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610440565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e25848484610b43565b610e3184848484610f7e565b6108645760405162461bcd60e51b81526004016104409061154e565b606081610e715750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e9b5780610e858161169b565b9150610e949050600a83611609565b9150610e75565b60008167ffffffffffffffff811115610eb657610eb661170c565b6040519080825280601f01601f191660200182016040528015610ee0576020820181803683370190505b5090505b8415610b3b57610ef560018361161d565b9150610f02600a866116b6565b610f0d9060306115f1565b60f81b818381518110610f2257610f226116f6565b60200101906001600160f81b031916908160001a905350610f44600a86611609565b9450610ee4565b610f55838361108b565b610f626000848484610f7e565b6105765760405162461bcd60e51b81526004016104409061154e565b60006001600160a01b0384163b1561108057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610fc29033908990889088906004016114fe565b602060405180830381600087803b158015610fdc57600080fd5b505af192505050801561100c575060408051601f3d908101601f19168201909252611009918101906113d9565b60015b611066573d80801561103a576040519150601f19603f3d011682016040523d82523d6000602084013e61103f565b606091505b50805161105e5760405162461bcd60e51b81526004016104409061154e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b3b565b506001949350505050565b6001600160a01b0382166110e15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610440565b6000818152600260205260409020546001600160a01b0316156111465760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610440565b6001600160a01b038216600090815260036020526040812080546001929061116f9084906115f1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b03811681146111e457600080fd5b919050565b6000602082840312156111fb57600080fd5b611204826111cd565b9392505050565b6000806040838503121561121e57600080fd5b611227836111cd565b9150611235602084016111cd565b90509250929050565b60008060006060848603121561125357600080fd5b61125c846111cd565b925061126a602085016111cd565b9150604084013590509250925092565b6000806000806080858703121561129057600080fd5b611299856111cd565b93506112a7602086016111cd565b925060408501359150606085013567ffffffffffffffff808211156112cb57600080fd5b818701915087601f8301126112df57600080fd5b8135818111156112f1576112f161170c565b604051601f8201601f19908116603f011681019083821181831017156113195761131961170c565b816040528281528a602084870101111561133257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561136957600080fd5b611372836111cd565b91506020830135801515811461138757600080fd5b809150509250929050565b600080604083850312156113a557600080fd5b6113ae836111cd565b946020939093013593505050565b6000602082840312156113ce57600080fd5b813561120481611722565b6000602082840312156113eb57600080fd5b815161120481611722565b60006020828403121561140857600080fd5b5035919050565b60008151808452611427816020860160208601611634565b601f01601f19169290920160200192915050565b6000815161144d818560208601611634565b9290920192915050565b600080845481600182811c91508083168061147357607f831692505b602080841082141561149357634e487b7160e01b86526022600452602486fd5b8180156114a757600181146114b8576114e5565b60ff198616895284890196506114e5565b60008b81526020902060005b868110156114dd5781548b8201529085019083016114c4565b505084890196505b5050505050506114f5818561143b565b95945050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115319083018461140f565b9695505050505050565b602081526000611204602083018461140f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115611604576116046116ca565b500190565b600082611618576116186116e0565b500490565b60008282101561162f5761162f6116ca565b500390565b60005b8381101561164f578181015183820152602001611637565b838111156108645750506000910152565b600181811c9082168061167457607f821691505b6020821081141561169557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156116af576116af6116ca565b5060010190565b6000826116c5576116c56116e0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146109bf57600080fdfea2646970667358221220fa66a82fda69671e502714520863453ef93feead6212d3c0f1ce66c2bd53568664736f6c634300080600334552433732313a207472616e7366657220746f206e6f6e20455243373231526568747470733a2f2f646f6f646c65617065732e6d6574612e72617265626f6172642e636f6d2f6170692f",
          "opcodes": "PUSH1 0xE0 PUSH1 0x40 MSTORE PUSH1 0x2A PUSH1 0x80 DUP2 DUP2 MSTORE SWAP1 PUSH3 0x1EDE PUSH1 0xA0 CODECOPY DUP1 MLOAD PUSH3 0x29 SWAP2 PUSH1 0x8 SWAP2 PUSH1 0x20 SWAP1 SWAP2 ADD SWAP1 PUSH3 0x524 JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1F08 CODESIZE SUB DUP1 PUSH3 0x1F08 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x5A SWAP2 PUSH3 0x5CA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH15 0x446F6F646C65204170657320425343 PUSH1 0x88 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x5 DUP5 MSTORE PUSH5 0x6441706573 PUSH1 0xD8 SHL SWAP1 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 PUSH3 0xAE SWAP2 PUSH1 0x0 SWAP2 PUSH3 0x524 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0xC4 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x524 JUMP JUMPDEST POP POP POP PUSH3 0xE1 PUSH3 0xDB PUSH3 0xF5 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xF9 JUMP JUMPDEST PUSH3 0xED DUP3 DUP3 PUSH3 0x14B JUMP JUMPDEST POP POP PUSH3 0x740 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x177 JUMPI PUSH3 0x162 DUP4 PUSH3 0x17C JUMP JUMPDEST DUP1 PUSH3 0x16E DUP2 PUSH3 0x70C JUMP JUMPDEST SWAP2 POP POP PUSH3 0x14E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x195 PUSH1 0x7 PUSH3 0x1BE PUSH1 0x20 SHL PUSH3 0x9C2 OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP PUSH3 0x1AE PUSH1 0x7 PUSH3 0x1C2 PUSH1 0x20 SHL PUSH3 0x9C6 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1BA DUP3 DUP3 PUSH3 0x1CB JUMP JUMPDEST POP POP JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH3 0x1BA DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH3 0x1ED PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1F9 DUP4 DUP4 PUSH3 0x264 JUMP JUMPDEST PUSH3 0x208 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH3 0x3AC JUMP JUMPDEST PUSH3 0x177 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1EBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x2BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x25B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH3 0x323 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x25B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH3 0x34E SWAP1 DUP5 SWAP1 PUSH3 0x6B4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3CD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x515 PUSH1 0x20 SHL PUSH3 0x9CF OR PUSH1 0x20 SHR JUMP JUMPDEST ISZERO PUSH3 0x509 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH3 0x407 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH3 0x639 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x455 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x452 SWAP2 DUP2 ADD SWAP1 PUSH3 0x606 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x4EE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH3 0x486 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x48B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH3 0x4E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1EBE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x25B JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH3 0x50D JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x532 SWAP1 PUSH3 0x6CF JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x556 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x5A1 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x571 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x5A1 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x5A1 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x5A1 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x584 JUMP JUMPDEST POP PUSH3 0x5AF SWAP3 SWAP2 POP PUSH3 0x5B3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x5AF JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x5B4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x5DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x5F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x619 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH3 0x632 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE PUSH1 0x20 DUP2 DUP8 AND DUP2 DUP6 ADD MSTORE DUP6 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP6 ADD MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x688 JUMPI DUP6 DUP2 ADD DUP3 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xA0 ADD MSTORE DUP2 ADD PUSH3 0x66A JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x69B JUMPI PUSH1 0x0 PUSH1 0xA0 DUP5 DUP8 ADD ADD MSTORE JUMPDEST POP POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xA0 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x6CA JUMPI PUSH3 0x6CA PUSH3 0x72A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x6E4 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x706 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x723 JUMPI PUSH3 0x723 PUSH3 0x72A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x176E DUP1 PUSH3 0x750 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6C0360EB GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x223 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C4 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x40D097C3 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1AE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x144 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x13BC JUMP JUMPDEST PUSH2 0x2E7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x161 PUSH2 0x339 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x153B JUMP JUMPDEST PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0x13F6 JUMP JUMPDEST PUSH2 0x3CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1392 JUMP JUMPDEST PUSH2 0x465 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B6 PUSH2 0x57B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x123E JUMP JUMPDEST PUSH2 0x58B JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1392 JUMP JUMPDEST PUSH2 0x5BC JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x5E2 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x20B CALLDATASIZE PUSH1 0x4 PUSH2 0x123E JUMP JUMPDEST PUSH2 0x60B JUMP JUMPDEST PUSH2 0x181 PUSH2 0x21E CALLDATASIZE PUSH1 0x4 PUSH2 0x13F6 JUMP JUMPDEST PUSH2 0x626 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x69D JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x72B JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x7B2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x181 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x818 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x26D CALLDATASIZE PUSH1 0x4 PUSH2 0x1356 JUMP JUMPDEST PUSH2 0x827 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x280 CALLDATASIZE PUSH1 0x4 PUSH2 0x127A JUMP JUMPDEST PUSH2 0x832 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x13F6 JUMP JUMPDEST PUSH2 0x86A JUMP JUMPDEST PUSH2 0x144 PUSH2 0x2A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x120B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x318 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x333 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x348 SWAP1 PUSH2 0x1660 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x374 SWAP1 PUSH2 0x1660 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3C1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x396 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3C1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3A4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x449 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x470 DUP3 PUSH2 0x626 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x4FA JUMPI POP PUSH2 0x4FA DUP2 CALLER PUSH2 0x2A6 JUMP JUMPDEST PUSH2 0x56C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH2 0x576 DUP4 DUP4 PUSH2 0x9DE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x586 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x595 CALLER DUP3 PUSH2 0xA4C JUMP JUMPDEST PUSH2 0x5B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x440 SWAP1 PUSH2 0x15A0 JUMP JUMPDEST PUSH2 0x576 DUP4 DUP4 DUP4 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x576 JUMPI PUSH2 0x5D0 DUP4 PUSH2 0x5E2 JUMP JUMPDEST DUP1 PUSH2 0x5DA DUP2 PUSH2 0x169B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5BF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5ED PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x5FD PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x607 DUP3 DUP3 PUSH2 0xCDF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x576 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x832 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x333 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH2 0x6AA SWAP1 PUSH2 0x1660 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6D6 SWAP1 PUSH2 0x1660 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x723 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6F8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x723 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x706 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x796 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x80C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH2 0x816 PUSH1 0x0 PUSH2 0xCF9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x348 SWAP1 PUSH2 0x1660 JUMP JUMPDEST PUSH2 0x607 CALLER DUP4 DUP4 PUSH2 0xD4B JUMP JUMPDEST PUSH2 0x83C CALLER DUP4 PUSH2 0xA4C JUMP JUMPDEST PUSH2 0x858 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x440 SWAP1 PUSH2 0x15A0 JUMP JUMPDEST PUSH2 0x864 DUP5 DUP5 DUP5 DUP5 PUSH2 0xE1A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x2737B732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x8 PUSH2 0x8D0 DUP4 PUSH2 0xE4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8E1 SWAP3 SWAP2 SWAP1 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x951 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x9B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH2 0x9BF DUP2 PUSH2 0xCF9 JUMP JUMPDEST POP JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xA13 DUP3 PUSH2 0x626 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAC5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD0 DUP4 PUSH2 0x626 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xB0B JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB00 DUP5 PUSH2 0x3CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0xB3B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB56 DUP3 PUSH2 0x626 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xC1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH2 0xC27 PUSH1 0x0 DUP3 PUSH2 0x9DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xC50 SWAP1 DUP5 SWAP1 PUSH2 0x161D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xC7E SWAP1 DUP5 SWAP1 PUSH2 0x15F1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x607 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF4B JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xDAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xE25 DUP5 DUP5 DUP5 PUSH2 0xB43 JUMP JUMPDEST PUSH2 0xE31 DUP5 DUP5 DUP5 DUP5 PUSH2 0xF7E JUMP JUMPDEST PUSH2 0x864 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x440 SWAP1 PUSH2 0x154E JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0xE71 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xE9B JUMPI DUP1 PUSH2 0xE85 DUP2 PUSH2 0x169B JUMP JUMPDEST SWAP2 POP PUSH2 0xE94 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP PUSH2 0xE75 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEB6 JUMPI PUSH2 0xEB6 PUSH2 0x170C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEE0 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0xB3B JUMPI PUSH2 0xEF5 PUSH1 0x1 DUP4 PUSH2 0x161D JUMP JUMPDEST SWAP2 POP PUSH2 0xF02 PUSH1 0xA DUP7 PUSH2 0x16B6 JUMP JUMPDEST PUSH2 0xF0D SWAP1 PUSH1 0x30 PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF22 JUMPI PUSH2 0xF22 PUSH2 0x16F6 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xF44 PUSH1 0xA DUP7 PUSH2 0x1609 JUMP JUMPDEST SWAP5 POP PUSH2 0xEE4 JUMP JUMPDEST PUSH2 0xF55 DUP4 DUP4 PUSH2 0x108B JUMP JUMPDEST PUSH2 0xF62 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0xF7E JUMP JUMPDEST PUSH2 0x576 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x440 SWAP1 PUSH2 0x154E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1080 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xFC2 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x14FE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x100C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1009 SWAP2 DUP2 ADD SWAP1 PUSH2 0x13D9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1066 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x103A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x103F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0x105E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x440 SWAP1 PUSH2 0x154E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xB3B JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x10E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1146 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x116F SWAP1 DUP5 SWAP1 PUSH2 0x15F1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x11E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1204 DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x121E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1227 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x1235 PUSH1 0x20 DUP5 ADD PUSH2 0x11CD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x125C DUP5 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP PUSH2 0x126A PUSH1 0x20 DUP6 ADD PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1299 DUP6 PUSH2 0x11CD JUMP JUMPDEST SWAP4 POP PUSH2 0x12A7 PUSH1 0x20 DUP7 ADD PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x12CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x12DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x12F1 JUMPI PUSH2 0x12F1 PUSH2 0x170C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1319 JUMPI PUSH2 0x1319 PUSH2 0x170C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1372 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13AE DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1204 DUP2 PUSH2 0x1722 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1204 DUP2 PUSH2 0x1722 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1427 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x144D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1634 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x1473 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x1493 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x14A7 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x14B8 JUMPI PUSH2 0x14E5 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x14E5 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x14DD JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x14C4 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP PUSH2 0x14F5 DUP2 DUP6 PUSH2 0x143B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1531 SWAP1 DUP4 ADD DUP5 PUSH2 0x140F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1204 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x140F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1604 JUMPI PUSH2 0x1604 PUSH2 0x16CA JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1618 JUMPI PUSH2 0x1618 PUSH2 0x16E0 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x162F JUMPI PUSH2 0x162F PUSH2 0x16CA JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x164F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1637 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x864 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1674 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1695 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x16AF JUMPI PUSH2 0x16AF PUSH2 0x16CA JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x16C5 JUMPI PUSH2 0x16C5 PUSH2 0x16E0 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9BF JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL PUSH7 0xA82FDA69671E50 0x27 EQ MSTORE ADDMOD PUSH4 0x453EF93F 0xEE 0xAD PUSH3 0x12D3C0 CALL 0xCE PUSH7 0xC2BD5356866473 PUSH16 0x6C634300080600334552433732313A20 PUSH21 0x72616E7366657220746F206E6F6E20455243373231 MSTORE PUSH6 0x68747470733A 0x2F 0x2F PUSH5 0x6F6F646C65 PUSH2 0x7065 PUSH20 0x2E6D6574612E72617265626F6172642E636F6D2F PUSH2 0x7069 0x2F ",
          "sourceMap": "456:68:84:-:0;282:1076;456:68;;282:1076;456:68;;;282:1076;456:68;;;;;;;;;;;;;;;:::i;:::-;;533:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1390:113:23;;;;;;;;;;;-1:-1:-1;;;1390:113:23;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1390:113:23;;;;1456:13;;1390:113;;;1456:13;;-1:-1:-1;;1456:13:23;:::i;:::-;-1:-1:-1;1479:17:23;;;;:7;;:17;;;;;:::i;:::-;;1390:113;;921:32:11;940:12;:10;;;:12;;:::i;:::-;921:18;:32::i;:::-;617:17:84::1;622:6:::0;630:3;617:4:::1;:17::i;:::-;533:109:::0;;282:1076;;640:96:30;719:10;;640:96::o;2270:187:11:-;2362:6;;;-1:-1:-1;;;;;2378:17:11;;;-1:-1:-1;;;;;;2378:17:11;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;650:131:84:-;709:6;704:70;725:3;721:1;:7;704:70;;;750:12;759:2;750:8;:12::i;:::-;730:3;;;;:::i;:::-;;;;704:70;;;;650:131;;:::o;1073:170::-;1121:15;1139:25;:15;:23;;;;;:25;;:::i;:::-;1121:43;;1175:27;:15;:25;;;;;:27;;:::i;:::-;1213:22;1223:2;1227:7;1213:9;:22::i;:::-;1110:133;1073:170;:::o;827:112:31:-;918:14;;827:112::o;945:123::-;1032:19;;1050:1;1032:19;;;945:123::o;8116:108:23:-;8191:26;8201:2;8205:7;8191:26;;;;;;;;;;;;:9;;;:26;;:::i;8445:311::-;8570:18;8576:2;8580:7;8570:5;:18::i;:::-;8619:54;8650:1;8654:2;8658:7;8667:5;8619:22;:54::i;:::-;8598:151;;;;-1:-1:-1;;;8598:151:23;;1741:2:105;8598:151:23;;;1723:21:105;1780:2;1760:18;;;1753:30;-1:-1:-1;;;;;;;;;;;1799:18:105;;;1792:62;-1:-1:-1;;;1870:18:105;;;1863:48;1928:19;;8598:151:23;;;;;;;;9078:427;-1:-1:-1;;;;;9157:16:23;;9149:61;;;;-1:-1:-1;;;9149:61:23;;2517:2:105;9149:61:23;;;2499:21:105;;;2536:18;;;2529:30;2595:34;2575:18;;;2568:62;2647:18;;9149:61:23;2489:182:105;9149:61:23;7224:4;7247:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7247:16:23;:30;9220:58;;;;-1:-1:-1;;;9220:58:23;;2160:2:105;9220:58:23;;;2142:21:105;2199:2;2179:18;;;2172:30;2238;2218:18;;;2211:58;2286:18;;9220:58:23;2132:178:105;9220:58:23;-1:-1:-1;;;;;9345:13:23;;;;;;:9;:13;;;;;:18;;9362:1;;9345:13;:18;;9362:1;;9345:18;:::i;:::-;;;;-1:-1:-1;;9373:16:23;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9373:21:23;-1:-1:-1;;;;;9373:21:23;;;;;;;;9410:33;;9373:16;;;9410:33;;9373:16;;9410:33;1110:133:84;1073:170;:::o;12334:778:23:-;12484:4;12504:15;:2;-1:-1:-1;;;;;12504:13:23;;;;;;:15;;:::i;:::-;12500:606;;;12539:72;;-1:-1:-1;;;12539:72:23;;-1:-1:-1;;;;;12539:36:23;;;;;:72;;719:10:30;;12590:4:23;;12596:7;;12605:5;;12539:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12539:72:23;;;;;;;;-1:-1:-1;;12539:72:23;;;;;;;;;;;;:::i;:::-;;;12535:519;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12778:13:23;;12774:266;;12820:60;;-1:-1:-1;;;12820:60:23;;1741:2:105;12820:60:23;;;1723:21:105;1780:2;1760:18;;;1753:30;-1:-1:-1;;;;;;;;;;;1799:18:105;;;1792:62;-1:-1:-1;;;1870:18:105;;;1863:48;1928:19;;12820:60:23;1713:240:105;12774:266:23;12992:6;12986:13;12977:6;12973:2;12969:15;12962:38;12535:519;-1:-1:-1;;;;;;12661:51:23;-1:-1:-1;;;12661:51:23;;-1:-1:-1;12654:58:23;;12500:606;-1:-1:-1;13091:4:23;12500:606;12334:778;;;;;;:::o;1175:320:28:-;-1:-1:-1;;;;;1465:19:28;;:23;;;1175:320::o;282:1076:84:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;282:1076:84;;;-1:-1:-1;282:1076:84;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:351:105;93:6;101;154:2;142:9;133:7;129:23;125:32;122:2;;;170:1;167;160:12;122:2;196:16;;-1:-1:-1;;;;;241:31:105;;231:42;;221:2;;287:1;284;277:12;221:2;355;340:18;;;;334:25;310:5;;334:25;;-1:-1:-1;;;112:253:105:o;370:290::-;439:6;492:2;480:9;471:7;467:23;463:32;460:2;;;508:1;505;498:12;460:2;534:16;;-1:-1:-1;;;;;;579:32:105;;569:43;;559:2;;626:1;623;616:12;559:2;649:5;450:210;-1:-1:-1;;;450:210:105:o;665:869::-;859:4;905:1;901;896:3;892:11;888:19;946:2;938:6;934:15;923:9;916:34;969:2;1019;1011:6;1007:15;1002:2;991:9;987:18;980:43;1059:6;1054:2;1043:9;1039:18;1032:34;1102:3;1097:2;1086:9;1082:18;1075:31;1135:6;1129:13;1115:27;;1179:6;1173:3;1162:9;1158:19;1151:35;1204:1;1214:141;1228:6;1225:1;1222:13;1214:141;;;1324:14;;;1320:23;;1314:30;1289:17;;;1308:3;1285:27;1278:67;1243:10;;1214:141;;;1373:6;1370:1;1367:13;1364:2;;;1444:1;1438:3;1429:6;1418:9;1414:22;1410:32;1403:43;1364:2;-1:-1:-1;;1517:2:105;1496:15;-1:-1:-1;;1492:29:105;1477:45;;;;1524:3;1473:55;;868:666;-1:-1:-1;;;;;868:666:105:o;2676:128::-;2716:3;2747:1;2743:6;2740:1;2737:13;2734:2;;;2753:18;;:::i;:::-;-1:-1:-1;2789:9:105;;2724:80::o;2809:380::-;2888:1;2884:12;;;;2931;;;2952:2;;3006:4;2998:6;2994:17;2984:27;;2952:2;3059;3051:6;3048:14;3028:18;3025:38;3022:2;;;3105:10;3100:3;3096:20;3093:1;3086:31;3140:4;3137:1;3130:15;3168:4;3165:1;3158:15;3022:2;;2864:325;;;:::o;3194:135::-;3233:3;-1:-1:-1;;3254:17:105;;3251:2;;;3274:18;;:::i;:::-;-1:-1:-1;3321:1:105;3310:13;;3241:88::o;3334:127::-;3395:10;3390:3;3386:20;3383:1;3376:31;3426:4;3423:1;3416:15;3450:4;3447:1;3440:15;3366:95;282:1076:84;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_afterTokenTransfer_4245": {
              "entryPoint": null,
              "id": 4245,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approve_4129": {
              "entryPoint": 2526,
              "id": 4129,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_4234": {
              "entryPoint": null,
              "id": 4234,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_checkOnERC721Received_4223": {
              "entryPoint": 3966,
              "id": 4223,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_exists_3819": {
              "entryPoint": null,
              "id": 3819,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_isApprovedOrOwner_3860": {
              "entryPoint": 2636,
              "id": 3860,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_mint_3970": {
              "entryPoint": 4235,
              "id": 3970,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_4826": {
              "entryPoint": null,
              "id": 4826,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_safeMint_3875": {
              "entryPoint": 3295,
              "id": 3875,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_safeMint_3904": {
              "entryPoint": 3915,
              "id": 3904,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_safeTransfer_3801": {
              "entryPoint": 3610,
              "id": 3801,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_setApprovalForAll_4161": {
              "entryPoint": 3403,
              "id": 4161,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_transferOwnership_1013": {
              "entryPoint": 3321,
              "id": 1013,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transfer_4105": {
              "entryPoint": 2883,
              "id": 4105,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@approve_3640": {
              "entryPoint": 1125,
              "id": 3640,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@balanceOf_3498": {
              "entryPoint": 1835,
              "id": 3498,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@baseURI_19813": {
              "entryPoint": 1693,
              "id": 19813,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@current_4854": {
              "entryPoint": 2498,
              "id": 4854,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getApproved_3661": {
              "entryPoint": 971,
              "id": 3661,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@increment_4868": {
              "entryPoint": 2502,
              "id": 4868,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@isApprovedForAll_3696": {
              "entryPoint": null,
              "id": 3696,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isContract_4452": {
              "entryPoint": 2511,
              "id": 4452,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@mint_19854": {
              "entryPoint": 1468,
              "id": 19854,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@name_3536": {
              "entryPoint": 825,
              "id": 3536,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@ownerOf_3526": {
              "entryPoint": 1574,
              "id": 3526,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@owner_942": {
              "entryPoint": null,
              "id": 942,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@renounceOwnership_970": {
              "entryPoint": 1970,
              "id": 970,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@safeMint_19903": {
              "entryPoint": 1506,
              "id": 19903,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@safeTransferFrom_3742": {
              "entryPoint": 1547,
              "id": 3742,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@safeTransferFrom_3772": {
              "entryPoint": 2098,
              "id": 3772,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@setApprovalForAll_3678": {
              "entryPoint": 2087,
              "id": 3678,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@supportsInterface_3474": {
              "entryPoint": 743,
              "id": 3474,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_5136": {
              "entryPoint": null,
              "id": 5136,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@symbol_3546": {
              "entryPoint": 2072,
              "id": 3546,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@toString_4995": {
              "entryPoint": 3661,
              "id": 4995,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenURI_19881": {
              "entryPoint": 2154,
              "id": 19881,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@totalSupply_19913": {
              "entryPoint": 1403,
              "id": 19913,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@transferFrom_3723": {
              "entryPoint": 1419,
              "id": 3723,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@transferOwnership_993": {
              "entryPoint": 2295,
              "id": 993,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_address": {
              "entryPoint": 4557,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 4585,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 4619,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 4670,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
              "entryPoint": 4730,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_bool": {
              "entryPoint": 4950,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 5010,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 5052,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4_fromMemory": {
              "entryPoint": 5081,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 5110,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_bytes": {
              "entryPoint": 5135,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_string": {
              "entryPoint": 5179,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 5207,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 5374,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5435,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5454,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7003d7428552fca483d8ae514dcdd858508b192cded55eb84b078a27247ab7e4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 5536,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 5617,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 5641,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 5661,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 5684,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 5728,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 5787,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mod_t_uint256": {
              "entryPoint": 5814,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 5834,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 5856,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 5878,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 5900,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_bytes4": {
              "entryPoint": 5922,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:14742:105",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:105",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "63:124:105",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "73:29:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "95:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "82:12:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "82:20:105"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "73:5:105"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "165:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "174:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "177:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "167:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "167:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "167:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "124:5:105"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "135:5:105"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "150:3:105",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "155:1:105",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "146:3:105"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "146:11:105"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "159:1:105",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "142:3:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "142:19:105"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "131:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "131:31:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "121:2:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "121:42:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "114:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "114:50:105"
                          },
                          "nodeType": "YulIf",
                          "src": "111:2:105"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "42:6:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "53:5:105",
                        "type": ""
                      }
                    ],
                    "src": "14:173:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "262:116:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "308:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "317:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "320:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "310:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "310:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "310:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "283:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "292:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "279:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "279:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "304:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "275:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "275:32:105"
                          },
                          "nodeType": "YulIf",
                          "src": "272:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "333:39:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "362:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "343:18:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "343:29:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "333:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "228:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "239:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "251:6:105",
                        "type": ""
                      }
                    ],
                    "src": "192:186:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "470:173:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "516:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "525:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "528:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "518:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "518:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "518:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "491:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "500:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "487:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "487:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "512:2:105",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "483:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "483:32:105"
                          },
                          "nodeType": "YulIf",
                          "src": "480:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "541:39:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "570:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "551:18:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "551:29:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "541:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "589:48:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "622:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "633:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "618:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "618:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "599:18:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "599:38:105"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "589:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "428:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "439:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "451:6:105",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "459:6:105",
                        "type": ""
                      }
                    ],
                    "src": "383:260:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "752:224:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "798:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "807:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "810:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "800:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "800:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "800:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "773:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "782:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "769:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "769:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "794:2:105",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "765:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "765:32:105"
                          },
                          "nodeType": "YulIf",
                          "src": "762:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "823:39:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "852:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "833:18:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "833:29:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "823:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "871:48:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "904:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "915:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "900:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "900:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "881:18:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "881:38:105"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "871:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "928:42:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "955:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "966:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "951:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "951:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "938:12:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "938:32:105"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "928:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "702:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "713:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "725:6:105",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "733:6:105",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "741:6:105",
                        "type": ""
                      }
                    ],
                    "src": "648:328:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1111:1008:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1158:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1167:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1170:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1160:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1160:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1160:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1132:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1141:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1128:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1128:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1153:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1124:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1124:33:105"
                          },
                          "nodeType": "YulIf",
                          "src": "1121:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1183:39:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1212:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1193:18:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1193:29:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1183:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1231:48:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1264:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1275:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1260:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1260:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "1241:18:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1241:38:105"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1231:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1288:42:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1315:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1326:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1311:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1311:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1298:12:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1298:32:105"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1288:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1339:46:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1370:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1381:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1366:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1366:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1353:12:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1353:32:105"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1343:6:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1394:28:105",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1404:18:105",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1398:2:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1449:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1458:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1461:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1451:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1451:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1451:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1437:6:105"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1445:2:105"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1434:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1434:14:105"
                          },
                          "nodeType": "YulIf",
                          "src": "1431:2:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1474:32:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1488:9:105"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1499:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1484:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1484:22:105"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1478:2:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1554:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1563:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1566:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1556:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1556:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1556:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1533:2:105"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1537:4:105",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1529:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1529:13:105"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1544:7:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1525:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1525:27:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1518:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1518:35:105"
                          },
                          "nodeType": "YulIf",
                          "src": "1515:2:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1579:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1602:2:105"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1589:12:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1589:16:105"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "1583:2:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1628:22:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1630:16:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1630:18:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1630:18:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1620:2:105"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1624:2:105"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1617:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1617:10:105"
                          },
                          "nodeType": "YulIf",
                          "src": "1614:2:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1659:17:105",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1673:2:105",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "1669:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1669:7:105"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "1663:2:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1685:23:105",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1705:2:105",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1699:5:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1699:9:105"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "1689:6:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1717:71:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1739:6:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_3",
                                                "nodeType": "YulIdentifier",
                                                "src": "1763:2:105"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1767:4:105",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "1759:3:105"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1759:13:105"
                                          },
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "1774:2:105"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "1755:3:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1755:22:105"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1779:2:105",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1751:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1751:31:105"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "1784:2:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1747:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1747:40:105"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1735:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1735:53:105"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "1721:10:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1847:22:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1849:16:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1849:18:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1849:18:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1806:10:105"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1818:2:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1803:2:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1803:18:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1826:10:105"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1838:6:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1823:2:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1823:22:105"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1800:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1800:46:105"
                          },
                          "nodeType": "YulIf",
                          "src": "1797:2:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1885:2:105",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1889:10:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1878:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1878:22:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1878:22:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1916:6:105"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1924:2:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1909:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1909:18:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1909:18:105"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1973:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1982:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1985:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1975:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1975:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1975:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1950:2:105"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "1954:2:105"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1946:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1946:11:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1959:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1942:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1942:20:105"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1964:7:105"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1939:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1939:33:105"
                          },
                          "nodeType": "YulIf",
                          "src": "1936:2:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2015:6:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2023:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2011:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2011:15:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2032:2:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2036:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2028:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2028:11:105"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "2041:2:105"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "1998:12:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1998:46:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1998:46:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2068:6:105"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "2076:2:105"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2064:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2064:15:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2081:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2060:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2060:24:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2086:1:105",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2053:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2053:35:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2053:35:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2097:16:105",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2107:6:105"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2097:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1053:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1064:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1076:6:105",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1084:6:105",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1092:6:105",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "1100:6:105",
                        "type": ""
                      }
                    ],
                    "src": "981:1138:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2208:263:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2254:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2263:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2266:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2256:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2256:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2256:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2229:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2238:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2225:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2225:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2250:2:105",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2221:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2221:32:105"
                          },
                          "nodeType": "YulIf",
                          "src": "2218:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2279:39:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2308:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2289:18:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2289:29:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2279:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2327:45:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2357:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2368:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2353:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2353:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2340:12:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2340:32:105"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2331:5:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2425:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2434:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2437:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2427:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2427:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2427:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2394:5:105"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2415:5:105"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2408:6:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2408:13:105"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2401:6:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2401:21:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2391:2:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2391:32:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2384:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2384:40:105"
                          },
                          "nodeType": "YulIf",
                          "src": "2381:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2450:15:105",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2460:5:105"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2450:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2166:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2177:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2189:6:105",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2197:6:105",
                        "type": ""
                      }
                    ],
                    "src": "2124:347:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2563:167:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2609:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2618:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2621:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2611:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2611:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2611:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2584:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2593:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2580:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2580:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2605:2:105",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2576:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2576:32:105"
                          },
                          "nodeType": "YulIf",
                          "src": "2573:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2634:39:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2663:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2644:18:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2644:29:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2634:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2682:42:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2709:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2720:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2705:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2705:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2692:12:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2692:32:105"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2682:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2521:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2532:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2544:6:105",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2552:6:105",
                        "type": ""
                      }
                    ],
                    "src": "2476:254:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2804:176:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2850:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2859:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2862:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2852:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2852:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2852:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2825:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2834:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2821:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2821:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2846:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2817:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2817:32:105"
                          },
                          "nodeType": "YulIf",
                          "src": "2814:2:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2875:36:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2901:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2888:12:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2888:23:105"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2879:5:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2944:5:105"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "2920:23:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2920:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2920:30:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2959:15:105",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2969:5:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2959:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2770:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2781:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2793:6:105",
                        "type": ""
                      }
                    ],
                    "src": "2735:245:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3065:169:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3111:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3120:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3123:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3113:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3113:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3113:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3086:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3095:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3082:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3082:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3107:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3078:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3078:32:105"
                          },
                          "nodeType": "YulIf",
                          "src": "3075:2:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3136:29:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3155:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3149:5:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3149:16:105"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3140:5:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3198:5:105"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "3174:23:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3174:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3174:30:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3213:15:105",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3223:5:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3213:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3031:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3042:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3054:6:105",
                        "type": ""
                      }
                    ],
                    "src": "2985:249:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3309:110:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3355:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3364:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3367:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3357:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3357:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3357:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3330:7:105"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3339:9:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3326:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3326:23:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3351:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3322:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3322:32:105"
                          },
                          "nodeType": "YulIf",
                          "src": "3319:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3380:33:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3403:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3390:12:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3390:23:105"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3380:6:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3275:9:105",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3286:7:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3298:6:105",
                        "type": ""
                      }
                    ],
                    "src": "3239:180:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3473:208:105",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3483:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3503:5:105"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3497:5:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3497:12:105"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3487:6:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3525:3:105"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3530:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3518:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3518:19:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3518:19:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3572:5:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3579:4:105",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3568:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3568:16:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3590:3:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3595:4:105",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3586:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3586:14:105"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3602:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3546:21:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3546:63:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3546:63:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3618:57:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3633:3:105"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "3646:6:105"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3654:2:105",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3642:3:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3642:15:105"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3663:2:105",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "3659:3:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3659:7:105"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3638:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3638:29:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3629:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3629:39:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3670:4:105",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3625:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3625:50:105"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3618:3:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3450:5:105",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3457:3:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3465:3:105",
                        "type": ""
                      }
                    ],
                    "src": "3424:257:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3736:135:105",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3746:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3766:5:105"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3760:5:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3760:12:105"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3750:6:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3807:5:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3814:4:105",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3803:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3803:16:105"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3821:3:105"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3826:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3781:21:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3781:52:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3781:52:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3842:23:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3853:3:105"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3858:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3849:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3849:16:105"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3842:3:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3713:5:105",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3720:3:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3728:3:105",
                        "type": ""
                      }
                    ],
                    "src": "3686:185:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4060:990:105",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4070:12:105",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4081:1:105",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "ret",
                              "nodeType": "YulTypedName",
                              "src": "4074:3:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4091:30:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4114:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "4108:5:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4108:13:105"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "4095:9:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4130:17:105",
                          "value": {
                            "name": "ret",
                            "nodeType": "YulIdentifier",
                            "src": "4144:3:105"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "4134:6:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4156:11:105",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4166:1:105",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4160:2:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4176:28:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4190:2:105"
                              },
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "4194:9:105"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "4186:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4186:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "4176:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4213:44:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "4243:9:105"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4254:2:105"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4239:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4239:18:105"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "4217:18:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4296:31:105",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "4298:27:105",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "4312:6:105"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4320:4:105",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "4308:3:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4308:17:105"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4298:6:105"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "4276:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4269:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4269:26:105"
                          },
                          "nodeType": "YulIf",
                          "src": "4266:2:105"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4336:12:105",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4346:2:105",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "4340:2:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4407:115:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "ret",
                                      "nodeType": "YulIdentifier",
                                      "src": "4428:3:105"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4437:3:105",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4442:10:105",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "4433:3:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4433:20:105"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4421:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4421:33:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4421:33:105"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4474:1:105",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4477:4:105",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4467:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4467:15:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4467:15:105"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "ret",
                                      "nodeType": "YulIdentifier",
                                      "src": "4502:3:105"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4507:4:105",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4495:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4495:17:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4495:17:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "4363:18:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4386:6:105"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4394:2:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4383:2:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4383:14:105"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "4360:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4360:38:105"
                          },
                          "nodeType": "YulIf",
                          "src": "4357:2:105"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4572:97:105",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4593:3:105"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "4602:9:105"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "4617:3:105",
                                                  "type": "",
                                                  "value": "255"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "4613:3:105"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4613:8:105"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "4598:3:105"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4598:24:105"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4586:6:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4586:37:105"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4586:37:105"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4636:23:105",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4647:3:105"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "4652:6:105"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4643:3:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4643:16:105"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "4636:3:105"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "4565:104:105",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4570:1:105",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4685:313:105",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4699:52:105",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "4744:6:105"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "4714:29:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4714:37:105"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "4703:7:105",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4764:10:105",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4773:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "4768:1:105",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "4841:111:105",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "pos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4870:3:105"
                                                  },
                                                  {
                                                    "name": "i",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4875:1:105"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4866:3:105"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "4866:11:105"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4885:7:105"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4879:5:105"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "4879:14:105"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "4859:6:105"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4859:35:105"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "4859:35:105"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "4911:27:105",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "4926:7:105"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "4935:2:105"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "4922:3:105"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4922:16:105"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "4911:7:105"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "4798:1:105"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "4801:6:105"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "4795:2:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4795:13:105"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "4809:19:105",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "4811:15:105",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "4820:1:105"
                                              },
                                              {
                                                "name": "_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "4823:2:105"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "4816:3:105"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4816:10:105"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "4811:1:105"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "4791:3:105",
                                      "statements": []
                                    },
                                    "src": "4787:165:105"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4965:23:105",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4976:3:105"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "4981:6:105"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4972:3:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4972:16:105"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "4965:3:105"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "4678:320:105",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4683:1:105",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "4538:18:105"
                          },
                          "nodeType": "YulSwitch",
                          "src": "4531:467:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5007:37:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "5032:6:105"
                              },
                              {
                                "name": "ret",
                                "nodeType": "YulIdentifier",
                                "src": "5040:3:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "5014:17:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5014:30:105"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "5007:3:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4028:3:105",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4033:6:105",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4041:6:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "4052:3:105",
                        "type": ""
                      }
                    ],
                    "src": "3876:1174:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5156:102:105",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5166:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5178:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5189:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5174:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5174:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5166:4:105"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5208:9:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5223:6:105"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5239:3:105",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5244:1:105",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "5235:3:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5235:11:105"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5248:1:105",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5231:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5231:19:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5219:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5219:32:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5201:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5201:51:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5201:51:105"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5125:9:105",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5136:6:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5147:4:105",
                        "type": ""
                      }
                    ],
                    "src": "5055:203:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5466:285:105",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5476:29:105",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5494:3:105",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5499:1:105",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "5490:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5490:11:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5503:1:105",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5486:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5486:19:105"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5480:2:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5521:9:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5536:6:105"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5544:2:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5532:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5532:15:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5514:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5514:34:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5514:34:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5568:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5579:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5564:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5564:18:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5588:6:105"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5596:2:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5584:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5584:15:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5557:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5557:43:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5557:43:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5620:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5631:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5616:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5616:18:105"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "5636:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5609:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5609:34:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5609:34:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5663:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5674:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5659:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5659:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5679:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5652:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5652:31:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5652:31:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5692:53:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "5717:6:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5729:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5740:3:105",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5725:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5725:19:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "5700:16:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5700:45:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5692:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5411:9:105",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "5422:6:105",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5430:6:105",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5438:6:105",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5446:6:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5457:4:105",
                        "type": ""
                      }
                    ],
                    "src": "5263:488:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5851:92:105",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5861:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5873:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5884:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5869:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5869:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5861:4:105"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5903:9:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "5928:6:105"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "5921:6:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5921:14:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "5914:6:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5914:22:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5896:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5896:41:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5896:41:105"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5820:9:105",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5831:6:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5842:4:105",
                        "type": ""
                      }
                    ],
                    "src": "5756:187:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6069:98:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6086:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6097:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6079:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6079:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6079:21:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6109:52:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6134:6:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6146:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6157:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6142:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6142:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "6117:16:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6117:44:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6109:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6038:9:105",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6049:6:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6060:4:105",
                        "type": ""
                      }
                    ],
                    "src": "5948:219:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6346:240:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6363:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6374:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6356:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6356:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6356:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6397:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6408:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6393:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6393:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6413:2:105",
                                "type": "",
                                "value": "50"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6386:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6386:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6386:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6436:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6447:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6432:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6432:18:105"
                              },
                              {
                                "hexValue": "4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6452:34:105",
                                "type": "",
                                "value": "ERC721: transfer to non ERC721Re"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6425:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6425:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6425:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6507:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6518:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6503:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6503:18:105"
                              },
                              {
                                "hexValue": "63656976657220696d706c656d656e746572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6523:20:105",
                                "type": "",
                                "value": "ceiver implementer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6496:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6496:48:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6496:48:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6553:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6565:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6576:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6561:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6561:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6553:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6323:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6337:4:105",
                        "type": ""
                      }
                    ],
                    "src": "6172:414:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6765:228:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6782:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6793:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6775:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6775:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6775:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6816:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6827:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6812:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6812:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6832:2:105",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6805:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6805:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6805:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6855:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6866:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6851:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6851:18:105"
                              },
                              {
                                "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6871:34:105",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6844:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6844:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6844:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6926:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6937:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6922:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6922:18:105"
                              },
                              {
                                "hexValue": "646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6942:8:105",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6915:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6915:36:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6915:36:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6960:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6972:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6983:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6968:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6968:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6960:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6742:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6756:4:105",
                        "type": ""
                      }
                    ],
                    "src": "6591:402:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7172:227:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7189:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7200:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7182:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7182:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7182:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7223:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7234:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7219:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7219:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7239:2:105",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7212:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7212:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7212:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7262:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7273:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7258:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7258:18:105"
                              },
                              {
                                "hexValue": "4552433732313a207472616e736665722066726f6d20696e636f727265637420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7278:34:105",
                                "type": "",
                                "value": "ERC721: transfer from incorrect "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7251:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7251:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7251:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7333:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7344:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7329:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7329:18:105"
                              },
                              {
                                "hexValue": "6f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7349:7:105",
                                "type": "",
                                "value": "owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7322:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7322:35:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7322:35:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7366:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7378:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7389:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7374:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7374:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7366:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7149:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7163:4:105",
                        "type": ""
                      }
                    ],
                    "src": "6998:401:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7578:178:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7595:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7606:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7588:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7588:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7588:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7629:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7640:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7625:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7625:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7645:2:105",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7618:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7618:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7618:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7668:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7679:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7664:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7664:18:105"
                              },
                              {
                                "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7684:30:105",
                                "type": "",
                                "value": "ERC721: token already minted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7657:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7657:58:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7657:58:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7724:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7736:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7747:2:105",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7732:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7732:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7724:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7555:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7569:4:105",
                        "type": ""
                      }
                    ],
                    "src": "7404:352:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7935:226:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7952:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7963:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7945:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7945:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7945:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7986:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7997:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7982:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7982:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8002:2:105",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7975:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7975:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7975:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8025:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8036:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8021:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8021:18:105"
                              },
                              {
                                "hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f20616464",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8041:34:105",
                                "type": "",
                                "value": "ERC721: transfer to the zero add"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8014:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8014:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8014:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8096:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8107:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8092:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8092:18:105"
                              },
                              {
                                "hexValue": "72657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8112:6:105",
                                "type": "",
                                "value": "ress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8085:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8085:34:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8085:34:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8128:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8140:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8151:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8136:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8136:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8128:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7912:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7926:4:105",
                        "type": ""
                      }
                    ],
                    "src": "7761:400:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8340:175:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8357:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8368:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8350:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8350:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8350:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8391:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8402:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8387:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8387:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8407:2:105",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8380:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8380:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8380:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8430:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8441:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8426:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8426:18:105"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8446:27:105",
                                "type": "",
                                "value": "ERC721: approve to caller"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8419:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8419:55:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8419:55:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8483:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8495:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8506:2:105",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8491:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8491:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8483:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8317:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8331:4:105",
                        "type": ""
                      }
                    ],
                    "src": "8166:349:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8694:234:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8711:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8722:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8704:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8704:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8704:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8745:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8756:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8741:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8741:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8761:2:105",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8734:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8734:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8734:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8784:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8795:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8780:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8780:18:105"
                              },
                              {
                                "hexValue": "4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8800:34:105",
                                "type": "",
                                "value": "ERC721: operator query for nonex"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8773:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8773:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8773:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8855:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8866:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8851:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8851:18:105"
                              },
                              {
                                "hexValue": "697374656e7420746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8871:14:105",
                                "type": "",
                                "value": "istent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8844:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8844:42:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8844:42:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8895:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8907:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8918:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8903:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8903:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8895:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8671:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8685:4:105",
                        "type": ""
                      }
                    ],
                    "src": "8520:408:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9107:246:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9124:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9135:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9117:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9117:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9117:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9158:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9169:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9154:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9154:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9174:2:105",
                                "type": "",
                                "value": "56"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9147:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9147:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9147:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9197:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9208:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9193:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9193:18:105"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f74206f77",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9213:34:105",
                                "type": "",
                                "value": "ERC721: approve caller is not ow"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9186:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9186:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9186:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9268:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9279:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9264:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9264:18:105"
                              },
                              {
                                "hexValue": "6e6572206e6f7220617070726f76656420666f7220616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9284:26:105",
                                "type": "",
                                "value": "ner nor approved for all"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9257:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9257:54:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9257:54:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9320:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9332:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9343:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9328:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9328:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9320:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9084:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9098:4:105",
                        "type": ""
                      }
                    ],
                    "src": "8933:420:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9532:167:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9549:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9560:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9542:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9542:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9542:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9583:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9594:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9579:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9579:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9599:2:105",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9572:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9572:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9572:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9622:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9633:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9618:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9618:18:105"
                              },
                              {
                                "hexValue": "4e6f6e6578697374656e7420746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9638:19:105",
                                "type": "",
                                "value": "Nonexistent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9611:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9611:47:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9611:47:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9667:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9679:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9690:2:105",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9675:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9675:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9667:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7003d7428552fca483d8ae514dcdd858508b192cded55eb84b078a27247ab7e4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9509:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9523:4:105",
                        "type": ""
                      }
                    ],
                    "src": "9358:341:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9878:232:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9895:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9906:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9888:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9888:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9888:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9929:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9940:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9925:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9925:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9945:2:105",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9918:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9918:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9918:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9968:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9979:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9964:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9964:18:105"
                              },
                              {
                                "hexValue": "4552433732313a2062616c616e636520717565727920666f7220746865207a65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9984:34:105",
                                "type": "",
                                "value": "ERC721: balance query for the ze"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9957:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9957:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9957:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10039:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10050:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10035:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10035:18:105"
                              },
                              {
                                "hexValue": "726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10055:12:105",
                                "type": "",
                                "value": "ro address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10028:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10028:40:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10028:40:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10077:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10089:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10100:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10085:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10085:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10077:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9855:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9869:4:105",
                        "type": ""
                      }
                    ],
                    "src": "9704:406:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10289:231:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10306:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10317:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10299:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10299:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10299:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10340:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10351:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10336:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10336:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10356:2:105",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10329:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10329:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10329:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10379:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10390:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10375:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10375:18:105"
                              },
                              {
                                "hexValue": "4552433732313a206f776e657220717565727920666f72206e6f6e6578697374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10395:34:105",
                                "type": "",
                                "value": "ERC721: owner query for nonexist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10368:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10368:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10368:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10450:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10461:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10446:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10446:18:105"
                              },
                              {
                                "hexValue": "656e7420746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10466:11:105",
                                "type": "",
                                "value": "ent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10439:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10439:39:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10439:39:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10487:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10499:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10510:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10495:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10495:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10487:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10266:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10280:4:105",
                        "type": ""
                      }
                    ],
                    "src": "10115:405:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10699:182:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10716:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10727:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10709:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10709:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10709:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10750:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10761:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10746:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10746:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10766:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10739:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10739:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10739:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10789:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10800:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10785:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10785:18:105"
                              },
                              {
                                "hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10805:34:105",
                                "type": "",
                                "value": "ERC721: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10778:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10778:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10778:62:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10849:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10861:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10872:2:105",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10857:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10857:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10849:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10676:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10690:4:105",
                        "type": ""
                      }
                    ],
                    "src": "10525:356:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11060:234:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11077:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11088:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11070:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11070:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11070:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11111:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11122:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11107:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11107:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11127:2:105",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11100:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11100:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11100:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11150:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11161:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11146:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11146:18:105"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f76656420717565727920666f72206e6f6e6578",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11166:34:105",
                                "type": "",
                                "value": "ERC721: approved query for nonex"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11139:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11139:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11139:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11221:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11232:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11217:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11217:18:105"
                              },
                              {
                                "hexValue": "697374656e7420746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11237:14:105",
                                "type": "",
                                "value": "istent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11210:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11210:42:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11210:42:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11261:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11273:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11284:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11269:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11269:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11261:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11037:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11051:4:105",
                        "type": ""
                      }
                    ],
                    "src": "10886:408:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11473:182:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11490:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11501:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11483:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11483:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11483:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11524:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11535:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11520:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11520:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11540:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11513:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11513:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11513:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11563:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11574:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11559:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11559:18:105"
                              },
                              {
                                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11579:34:105",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11552:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11552:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11552:62:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11623:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11635:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11646:2:105",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11631:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11631:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11623:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11450:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11464:4:105",
                        "type": ""
                      }
                    ],
                    "src": "11299:356:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11834:223:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11851:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11862:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11844:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11844:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11844:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11885:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11896:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11881:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11881:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11901:2:105",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11874:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11874:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11874:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11924:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11935:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11920:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11920:18:105"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11940:34:105",
                                "type": "",
                                "value": "ERC721: approval to current owne"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11913:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11913:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11913:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11995:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12006:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11991:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11991:18:105"
                              },
                              {
                                "hexValue": "72",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12011:3:105",
                                "type": "",
                                "value": "r"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11984:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11984:31:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11984:31:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12024:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12036:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12047:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12032:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12032:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12024:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11811:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11825:4:105",
                        "type": ""
                      }
                    ],
                    "src": "11660:397:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12236:239:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12253:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12264:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12246:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12246:21:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12246:21:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12287:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12298:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12283:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12283:18:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12303:2:105",
                                "type": "",
                                "value": "49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12276:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12276:30:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12276:30:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12326:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12337:2:105",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12322:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12322:18:105"
                              },
                              {
                                "hexValue": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12342:34:105",
                                "type": "",
                                "value": "ERC721: transfer caller is not o"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12315:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12315:62:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12315:62:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12397:9:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12408:2:105",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12393:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12393:18:105"
                              },
                              {
                                "hexValue": "776e6572206e6f7220617070726f766564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12413:19:105",
                                "type": "",
                                "value": "wner nor approved"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12386:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12386:47:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12386:47:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12442:27:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12454:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12465:3:105",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12450:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12450:19:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12442:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12213:9:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12227:4:105",
                        "type": ""
                      }
                    ],
                    "src": "12062:413:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12581:76:105",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12591:26:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12603:9:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12614:2:105",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12599:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12599:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12591:4:105"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12633:9:105"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "12644:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12626:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12626:25:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12626:25:105"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12550:9:105",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12561:6:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12572:4:105",
                        "type": ""
                      }
                    ],
                    "src": "12480:177:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12718:65:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12735:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "12738:3:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12728:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12728:14:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12728:14:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12751:26:105",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12769:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12772:4:105",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "12759:9:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12759:18:105"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "12751:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "12701:3:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "12709:4:105",
                        "type": ""
                      }
                    ],
                    "src": "12662:121:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12836:80:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12863:22:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12865:16:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12865:18:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12865:18:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12852:1:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "12859:1:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "12855:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12855:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12849:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12849:13:105"
                          },
                          "nodeType": "YulIf",
                          "src": "12846:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12894:16:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12905:1:105"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "12908:1:105"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12901:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12901:9:105"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "12894:3:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "12819:1:105",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "12822:1:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "12828:3:105",
                        "type": ""
                      }
                    ],
                    "src": "12788:128:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12967:74:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12990:22:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "12992:16:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12992:18:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12992:18:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "12987:1:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "12980:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12980:9:105"
                          },
                          "nodeType": "YulIf",
                          "src": "12977:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13021:14:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "13030:1:105"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "13033:1:105"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "13026:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13026:9:105"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "13021:1:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "12952:1:105",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "12955:1:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "12961:1:105",
                        "type": ""
                      }
                    ],
                    "src": "12921:120:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13095:76:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13117:22:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "13119:16:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13119:18:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13119:18:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "13111:1:105"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "13114:1:105"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "13108:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13108:8:105"
                          },
                          "nodeType": "YulIf",
                          "src": "13105:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13148:17:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "13160:1:105"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "13163:1:105"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "13156:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13156:9:105"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "13148:4:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "13077:1:105",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "13080:1:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "13086:4:105",
                        "type": ""
                      }
                    ],
                    "src": "13046:125:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13229:205:105",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13239:10:105",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13248:1:105",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "13243:1:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13308:63:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "13333:3:105"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "13338:1:105"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "13329:3:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13329:11:105"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "13352:3:105"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "13357:1:105"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "13348:3:105"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13348:11:105"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "13342:5:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13342:18:105"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13322:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13322:39:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13322:39:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "13269:1:105"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13272:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "13266:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13266:13:105"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "13280:19:105",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "13282:15:105",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "13291:1:105"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13294:2:105",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "13287:3:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13287:10:105"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "13282:1:105"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "13262:3:105",
                            "statements": []
                          },
                          "src": "13258:113:105"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13397:31:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "13410:3:105"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "13415:6:105"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "13406:3:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13406:16:105"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13424:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13399:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13399:27:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13399:27:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "13386:1:105"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13389:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13383:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13383:13:105"
                          },
                          "nodeType": "YulIf",
                          "src": "13380:2:105"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "13207:3:105",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "13212:3:105",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "13217:6:105",
                        "type": ""
                      }
                    ],
                    "src": "13176:258:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13494:325:105",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13504:22:105",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13518:1:105",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "13521:4:105"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "13514:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13514:12:105"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "13504:6:105"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13535:38:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "13565:4:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13571:1:105",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13561:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13561:12:105"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "13539:18:105",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13612:31:105",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "13614:27:105",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "13628:6:105"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13636:4:105",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "13624:3:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13624:17:105"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13614:6:105"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "13592:18:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13585:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13585:26:105"
                          },
                          "nodeType": "YulIf",
                          "src": "13582:2:105"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13702:111:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13723:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13730:3:105",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13735:10:105",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "13726:3:105"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13726:20:105"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13716:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13716:31:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13716:31:105"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13767:1:105",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13770:4:105",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13760:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13760:15:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13760:15:105"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13795:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13798:4:105",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13788:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13788:15:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13788:15:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "13658:18:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13681:6:105"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13689:2:105",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13678:2:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13678:14:105"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "13655:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13655:38:105"
                          },
                          "nodeType": "YulIf",
                          "src": "13652:2:105"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "13474:4:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "13483:6:105",
                        "type": ""
                      }
                    ],
                    "src": "13439:380:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13871:88:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13902:22:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "13904:16:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13904:18:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13904:18:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13887:5:105"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13898:1:105",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "13894:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13894:6:105"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "13884:2:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13884:17:105"
                          },
                          "nodeType": "YulIf",
                          "src": "13881:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13933:20:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13944:5:105"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13951:1:105",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13940:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13940:13:105"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "13933:3:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13853:5:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "13863:3:105",
                        "type": ""
                      }
                    ],
                    "src": "13824:135:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14002:74:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14025:22:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "14027:16:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14027:18:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14027:18:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "14022:1:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "14015:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14015:9:105"
                          },
                          "nodeType": "YulIf",
                          "src": "14012:2:105"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14056:14:105",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "14065:1:105"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "14068:1:105"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "14061:3:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14061:9:105"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "14056:1:105"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "13987:1:105",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "13990:1:105",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "13996:1:105",
                        "type": ""
                      }
                    ],
                    "src": "13964:112:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14113:95:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14130:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14137:3:105",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14142:10:105",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14133:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14133:20:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14123:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14123:31:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14123:31:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14170:1:105",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14173:4:105",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14163:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14163:15:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14163:15:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14194:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14197:4:105",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "14187:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14187:15:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14187:15:105"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14081:127:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14245:95:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14262:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14269:3:105",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14274:10:105",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14265:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14265:20:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14255:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14255:31:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14255:31:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14302:1:105",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14305:4:105",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14295:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14295:15:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14295:15:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14326:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14329:4:105",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "14319:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14319:15:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14319:15:105"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14213:127:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14377:95:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14394:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14401:3:105",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14406:10:105",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14397:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14397:20:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14387:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14387:31:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14387:31:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14434:1:105",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14437:4:105",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14427:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14427:15:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14427:15:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14458:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14461:4:105",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "14451:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14451:15:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14451:15:105"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14345:127:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14509:95:105",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14526:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14533:3:105",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14538:10:105",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14529:3:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14529:20:105"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14519:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14519:31:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14519:31:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14566:1:105",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14569:4:105",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14559:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14559:15:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14559:15:105"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14590:1:105",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14593:4:105",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "14583:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14583:15:105"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14583:15:105"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14477:127:105"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14653:87:105",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14718:16:105",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14727:1:105",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14730:1:105",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14720:6:105"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14720:12:105"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14720:12:105"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14676:5:105"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "14687:5:105"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "14698:3:105",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "14703:10:105",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "14694:3:105"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "14694:20:105"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "14683:3:105"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14683:32:105"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "14673:2:105"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14673:43:105"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "14666:6:105"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14666:51:105"
                          },
                          "nodeType": "YulIf",
                          "src": "14663:2:105"
                        }
                      ]
                    },
                    "name": "validator_revert_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "14642:5:105",
                        "type": ""
                      }
                    ],
                    "src": "14609:131:105"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := ret\n        let _1 := 1\n        length := shr(_1, slotValue)\n        let outOfPlaceEncoding := and(slotValue, _1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        let _2 := 32\n        if eq(outOfPlaceEncoding, lt(length, _2))\n        {\n            mstore(ret, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(ret, 0x24)\n        }\n        switch outOfPlaceEncoding\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, length)\n        }\n        case 1 {\n            let dataPos := array_dataslot_string_storage(value0)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        end := abi_encode_string(value1, ret)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_bytes(value3, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: operator query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not ow\")\n        mstore(add(headStart, 96), \"ner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7003d7428552fca483d8ae514dcdd858508b192cded55eb84b078a27247ab7e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Nonexistent token\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC721: balance query for the ze\")\n        mstore(add(headStart, 96), \"ro address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: owner query for nonexist\")\n        mstore(add(headStart, 96), \"ent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: approved query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"ERC721: transfer caller is not o\")\n        mstore(add(headStart, 96), \"wner nor approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n}",
              "id": 105,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506004361061012c5760003560e01c80636c0360eb116100ad578063a22cb46511610071578063a22cb4651461025f578063b88d4fde14610272578063c87b56dd14610285578063e985e9c514610298578063f2fde38b146102d457600080fd5b80636c0360eb1461022357806370a082311461022b578063715018a61461023e5780638da5cb5b1461024657806395d89b411461025757600080fd5b806323b872dd116100f457806323b872dd146101c457806340c10f19146101d757806340d097c3146101ea57806342842e0e146101fd5780636352211e1461021057600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f3660046113bc565b6102e7565b60405190151581526020015b60405180910390f35b610161610339565b604051610150919061153b565b61018161017c3660046113f6565b6103cb565b6040516001600160a01b039091168152602001610150565b6101ac6101a7366004611392565b610465565b005b6101b661057b565b604051908152602001610150565b6101ac6101d236600461123e565b61058b565b6101ac6101e5366004611392565b6105bc565b6101ac6101f83660046111e9565b6105e2565b6101ac61020b36600461123e565b61060b565b61018161021e3660046113f6565b610626565b61016161069d565b6101b66102393660046111e9565b61072b565b6101ac6107b2565b6006546001600160a01b0316610181565b610161610818565b6101ac61026d366004611356565b610827565b6101ac61028036600461127a565b610832565b6101616102933660046113f6565b61086a565b6101446102a636600461120b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101ac6102e23660046111e9565b6108f7565b60006001600160e01b031982166380ac58cd60e01b148061031857506001600160e01b03198216635b5e139f60e01b145b8061033357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461034890611660565b80601f016020809104026020016040519081016040528092919081815260200182805461037490611660565b80156103c15780601f10610396576101008083540402835291602001916103c1565b820191906000526020600020905b8154815290600101906020018083116103a457829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104495760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061047082610626565b9050806001600160a01b0316836001600160a01b031614156104de5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610440565b336001600160a01b03821614806104fa57506104fa81336102a6565b61056c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610440565b61057683836109de565b505050565b600061058660075490565b905090565b6105953382610a4c565b6105b15760405162461bcd60e51b8152600401610440906115a0565b610576838383610b43565b60005b81811015610576576105d0836105e2565b806105da8161169b565b9150506105bf565b60006105ed60075490565b90506105fd600780546001019055565b6106078282610cdf565b5050565b61057683838360405180602001604052806000815250610832565b6000818152600260205260408120546001600160a01b0316806103335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610440565b600880546106aa90611660565b80601f01602080910402602001604051908101604052809291908181526020018280546106d690611660565b80156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b505050505081565b60006001600160a01b0382166107965760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610440565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b0316331461080c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b6108166000610cf9565b565b60606001805461034890611660565b610607338383610d4b565b61083c3383610a4c565b6108585760405162461bcd60e51b8152600401610440906115a0565b61086484848484610e1a565b50505050565b6000818152600260205260409020546060906001600160a01b03166108c55760405162461bcd60e51b81526020600482015260116024820152702737b732bc34b9ba32b73a103a37b5b2b760791b6044820152606401610440565b60086108d083610e4d565b6040516020016108e1929190611457565b6040516020818303038152906040529050919050565b6006546001600160a01b031633146109515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b6001600160a01b0381166109b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610440565b6109bf81610cf9565b50565b5490565b80546001019055565b6001600160a01b03163b151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a1382610626565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610ac55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610440565b6000610ad083610626565b9050806001600160a01b0316846001600160a01b03161480610b0b5750836001600160a01b0316610b00846103cb565b6001600160a01b0316145b80610b3b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610b5682610626565b6001600160a01b031614610bba5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610440565b6001600160a01b038216610c1c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610440565b610c276000826109de565b6001600160a01b0383166000908152600360205260408120805460019290610c5090849061161d565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c7e9084906115f1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610607828260405180602001604052806000815250610f4b565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610dad5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610440565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e25848484610b43565b610e3184848484610f7e565b6108645760405162461bcd60e51b81526004016104409061154e565b606081610e715750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e9b5780610e858161169b565b9150610e949050600a83611609565b9150610e75565b60008167ffffffffffffffff811115610eb657610eb661170c565b6040519080825280601f01601f191660200182016040528015610ee0576020820181803683370190505b5090505b8415610b3b57610ef560018361161d565b9150610f02600a866116b6565b610f0d9060306115f1565b60f81b818381518110610f2257610f226116f6565b60200101906001600160f81b031916908160001a905350610f44600a86611609565b9450610ee4565b610f55838361108b565b610f626000848484610f7e565b6105765760405162461bcd60e51b81526004016104409061154e565b60006001600160a01b0384163b1561108057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610fc29033908990889088906004016114fe565b602060405180830381600087803b158015610fdc57600080fd5b505af192505050801561100c575060408051601f3d908101601f19168201909252611009918101906113d9565b60015b611066573d80801561103a576040519150601f19603f3d011682016040523d82523d6000602084013e61103f565b606091505b50805161105e5760405162461bcd60e51b81526004016104409061154e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b3b565b506001949350505050565b6001600160a01b0382166110e15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610440565b6000818152600260205260409020546001600160a01b0316156111465760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610440565b6001600160a01b038216600090815260036020526040812080546001929061116f9084906115f1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b03811681146111e457600080fd5b919050565b6000602082840312156111fb57600080fd5b611204826111cd565b9392505050565b6000806040838503121561121e57600080fd5b611227836111cd565b9150611235602084016111cd565b90509250929050565b60008060006060848603121561125357600080fd5b61125c846111cd565b925061126a602085016111cd565b9150604084013590509250925092565b6000806000806080858703121561129057600080fd5b611299856111cd565b93506112a7602086016111cd565b925060408501359150606085013567ffffffffffffffff808211156112cb57600080fd5b818701915087601f8301126112df57600080fd5b8135818111156112f1576112f161170c565b604051601f8201601f19908116603f011681019083821181831017156113195761131961170c565b816040528281528a602084870101111561133257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561136957600080fd5b611372836111cd565b91506020830135801515811461138757600080fd5b809150509250929050565b600080604083850312156113a557600080fd5b6113ae836111cd565b946020939093013593505050565b6000602082840312156113ce57600080fd5b813561120481611722565b6000602082840312156113eb57600080fd5b815161120481611722565b60006020828403121561140857600080fd5b5035919050565b60008151808452611427816020860160208601611634565b601f01601f19169290920160200192915050565b6000815161144d818560208601611634565b9290920192915050565b600080845481600182811c91508083168061147357607f831692505b602080841082141561149357634e487b7160e01b86526022600452602486fd5b8180156114a757600181146114b8576114e5565b60ff198616895284890196506114e5565b60008b81526020902060005b868110156114dd5781548b8201529085019083016114c4565b505084890196505b5050505050506114f5818561143b565b95945050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115319083018461140f565b9695505050505050565b602081526000611204602083018461140f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115611604576116046116ca565b500190565b600082611618576116186116e0565b500490565b60008282101561162f5761162f6116ca565b500390565b60005b8381101561164f578181015183820152602001611637565b838111156108645750506000910152565b600181811c9082168061167457607f821691505b6020821081141561169557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156116af576116af6116ca565b5060010190565b6000826116c5576116c56116e0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146109bf57600080fdfea2646970667358221220fa66a82fda69671e502714520863453ef93feead6212d3c0f1ce66c2bd53568664736f6c63430008060033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6C0360EB GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x223 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C4 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x40D097C3 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x159 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1AE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x144 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x13BC JUMP JUMPDEST PUSH2 0x2E7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x161 PUSH2 0x339 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x150 SWAP2 SWAP1 PUSH2 0x153B JUMP JUMPDEST PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0x13F6 JUMP JUMPDEST PUSH2 0x3CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1392 JUMP JUMPDEST PUSH2 0x465 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B6 PUSH2 0x57B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x150 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x123E JUMP JUMPDEST PUSH2 0x58B JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1392 JUMP JUMPDEST PUSH2 0x5BC JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x5E2 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x20B CALLDATASIZE PUSH1 0x4 PUSH2 0x123E JUMP JUMPDEST PUSH2 0x60B JUMP JUMPDEST PUSH2 0x181 PUSH2 0x21E CALLDATASIZE PUSH1 0x4 PUSH2 0x13F6 JUMP JUMPDEST PUSH2 0x626 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x69D JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x72B JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x7B2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x181 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x818 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x26D CALLDATASIZE PUSH1 0x4 PUSH2 0x1356 JUMP JUMPDEST PUSH2 0x827 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x280 CALLDATASIZE PUSH1 0x4 PUSH2 0x127A JUMP JUMPDEST PUSH2 0x832 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x13F6 JUMP JUMPDEST PUSH2 0x86A JUMP JUMPDEST PUSH2 0x144 PUSH2 0x2A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x120B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1AC PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x318 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x333 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x348 SWAP1 PUSH2 0x1660 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x374 SWAP1 PUSH2 0x1660 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3C1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x396 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3C1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3A4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x449 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x470 DUP3 PUSH2 0x626 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x4FA JUMPI POP PUSH2 0x4FA DUP2 CALLER PUSH2 0x2A6 JUMP JUMPDEST PUSH2 0x56C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH2 0x576 DUP4 DUP4 PUSH2 0x9DE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x586 PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x595 CALLER DUP3 PUSH2 0xA4C JUMP JUMPDEST PUSH2 0x5B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x440 SWAP1 PUSH2 0x15A0 JUMP JUMPDEST PUSH2 0x576 DUP4 DUP4 DUP4 PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x576 JUMPI PUSH2 0x5D0 DUP4 PUSH2 0x5E2 JUMP JUMPDEST DUP1 PUSH2 0x5DA DUP2 PUSH2 0x169B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5BF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5ED PUSH1 0x7 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x5FD PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x607 DUP3 DUP3 PUSH2 0xCDF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x576 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x832 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x333 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH2 0x6AA SWAP1 PUSH2 0x1660 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6D6 SWAP1 PUSH2 0x1660 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x723 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6F8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x723 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x706 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x796 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x80C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH2 0x816 PUSH1 0x0 PUSH2 0xCF9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x348 SWAP1 PUSH2 0x1660 JUMP JUMPDEST PUSH2 0x607 CALLER DUP4 DUP4 PUSH2 0xD4B JUMP JUMPDEST PUSH2 0x83C CALLER DUP4 PUSH2 0xA4C JUMP JUMPDEST PUSH2 0x858 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x440 SWAP1 PUSH2 0x15A0 JUMP JUMPDEST PUSH2 0x864 DUP5 DUP5 DUP5 DUP5 PUSH2 0xE1A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x2737B732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x8 PUSH2 0x8D0 DUP4 PUSH2 0xE4D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8E1 SWAP3 SWAP2 SWAP1 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x951 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x9B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH2 0x9BF DUP2 PUSH2 0xCF9 JUMP JUMPDEST POP JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xA13 DUP3 PUSH2 0x626 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAC5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD0 DUP4 PUSH2 0x626 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xB0B JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB00 DUP5 PUSH2 0x3CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0xB3B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB56 DUP3 PUSH2 0x626 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xC1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x440 JUMP JUMPDEST PUSH2 0xC27 PUSH1 0x0 DUP3 PUSH2 0x9DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xC50 SWAP1 DUP5 SWAP1 PUSH2 0x161D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xC7E SWAP1 DUP5 SWAP1 PUSH2 0x15F1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x607 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF4B JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xDAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xE25 DUP5 DUP5 DUP5 PUSH2 0xB43 JUMP JUMPDEST PUSH2 0xE31 DUP5 DUP5 DUP5 DUP5 PUSH2 0xF7E JUMP JUMPDEST PUSH2 0x864 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x440 SWAP1 PUSH2 0x154E JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0xE71 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xE9B JUMPI DUP1 PUSH2 0xE85 DUP2 PUSH2 0x169B JUMP JUMPDEST SWAP2 POP PUSH2 0xE94 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP PUSH2 0xE75 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEB6 JUMPI PUSH2 0xEB6 PUSH2 0x170C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEE0 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0xB3B JUMPI PUSH2 0xEF5 PUSH1 0x1 DUP4 PUSH2 0x161D JUMP JUMPDEST SWAP2 POP PUSH2 0xF02 PUSH1 0xA DUP7 PUSH2 0x16B6 JUMP JUMPDEST PUSH2 0xF0D SWAP1 PUSH1 0x30 PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF22 JUMPI PUSH2 0xF22 PUSH2 0x16F6 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xF44 PUSH1 0xA DUP7 PUSH2 0x1609 JUMP JUMPDEST SWAP5 POP PUSH2 0xEE4 JUMP JUMPDEST PUSH2 0xF55 DUP4 DUP4 PUSH2 0x108B JUMP JUMPDEST PUSH2 0xF62 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0xF7E JUMP JUMPDEST PUSH2 0x576 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x440 SWAP1 PUSH2 0x154E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1080 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xFC2 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x14FE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x100C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1009 SWAP2 DUP2 ADD SWAP1 PUSH2 0x13D9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1066 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x103A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x103F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0x105E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x440 SWAP1 PUSH2 0x154E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xB3B JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x10E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1146 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x440 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x116F SWAP1 DUP5 SWAP1 PUSH2 0x15F1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x11E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1204 DUP3 PUSH2 0x11CD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x121E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1227 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH2 0x1235 PUSH1 0x20 DUP5 ADD PUSH2 0x11CD JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x125C DUP5 PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP PUSH2 0x126A PUSH1 0x20 DUP6 ADD PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1299 DUP6 PUSH2 0x11CD JUMP JUMPDEST SWAP4 POP PUSH2 0x12A7 PUSH1 0x20 DUP7 ADD PUSH2 0x11CD JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x12CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x12DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x12F1 JUMPI PUSH2 0x12F1 PUSH2 0x170C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1319 JUMPI PUSH2 0x1319 PUSH2 0x170C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1372 DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x13A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13AE DUP4 PUSH2 0x11CD JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1204 DUP2 PUSH2 0x1722 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1204 DUP2 PUSH2 0x1722 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1427 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x144D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1634 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x1473 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x1493 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x14A7 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x14B8 JUMPI PUSH2 0x14E5 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x14E5 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x14DD JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x14C4 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP PUSH2 0x14F5 DUP2 DUP6 PUSH2 0x143B JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1531 SWAP1 DUP4 ADD DUP5 PUSH2 0x140F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1204 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x140F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1604 JUMPI PUSH2 0x1604 PUSH2 0x16CA JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1618 JUMPI PUSH2 0x1618 PUSH2 0x16E0 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x162F JUMPI PUSH2 0x162F PUSH2 0x16CA JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x164F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1637 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x864 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1674 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1695 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x16AF JUMPI PUSH2 0x16AF PUSH2 0x16CA JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x16C5 JUMPI PUSH2 0x16C5 PUSH2 0x16E0 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9BF JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL PUSH7 0xA82FDA69671E50 0x27 EQ MSTORE ADDMOD PUSH4 0x453EF93F 0xEE 0xAD PUSH3 0x12D3C0 CALL 0xCE PUSH7 0xC2BD5356866473 PUSH16 0x6C634300080600330000000000000000 ",
          "sourceMap": "282:1076:84:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:23;;;;;;:::i;:::-;;:::i;:::-;;;5921:14:105;;5914:22;5896:41;;5884:2;5869:18;1570:300:23;;;;;;;;2488:98;;;:::i;:::-;;;;;;;:::i;3999:217::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;5219:32:105;;;5201:51;;5189:2;5174:18;3999:217:23;5156:102:105;3537:401:23;;;;;;:::i;:::-;;:::i;:::-;;1251:104:84;;;:::i;:::-;;;12626:25:105;;;12614:2;12599:18;1251:104:84;12581:76:105;4726:330:23;;;;;;:::i;:::-;;:::i;650:131:84:-;;;;;;:::i;:::-;;:::i;1073:170::-;;;;;;:::i;:::-;;:::i;5122:179:23:-;;;;;;:::i;:::-;;:::i;2191:235::-;;;;;;:::i;:::-;;:::i;456:68:84:-;;;:::i;1929:205:23:-;;;;;;:::i;:::-;;:::i;1668:101:11:-;;;:::i;1036:85::-;1108:6;;-1:-1:-1;;;;;1108:6:11;1036:85;;2650:102:23;;;:::i;4283:153::-;;;;;;:::i;:::-;;:::i;5367:320::-;;;;;;:::i;:::-;;:::i;789:276:84:-;;;;;;:::i;:::-;;:::i;4502:162:23:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4622:25:23;;;4599:4;4622:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4502:162;1918:198:11;;;;;;:::i;:::-;;:::i;1570:300:23:-;1672:4;-1:-1:-1;;;;;;1707:40:23;;-1:-1:-1;;;1707:40:23;;:104;;-1:-1:-1;;;;;;;1763:48:23;;-1:-1:-1;;;1763:48:23;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:33;;;1827:36:23;1688:175;1570:300;-1:-1:-1;;1570:300:23:o;2488:98::-;2542:13;2574:5;2567:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2488:98;:::o;3999:217::-;4075:7;7247:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7247:16:23;4094:73;;;;-1:-1:-1;;;4094:73:23;;11088:2:105;4094:73:23;;;11070:21:105;11127:2;11107:18;;;11100:30;11166:34;11146:18;;;11139:62;-1:-1:-1;;;11217:18:105;;;11210:42;11269:19;;4094:73:23;;;;;;;;;-1:-1:-1;4185:24:23;;;;:15;:24;;;;;;-1:-1:-1;;;;;4185:24:23;;3999:217::o;3537:401::-;3617:13;3633:23;3648:7;3633:14;:23::i;:::-;3617:39;;3680:5;-1:-1:-1;;;;;3674:11:23;:2;-1:-1:-1;;;;;3674:11:23;;;3666:57;;;;-1:-1:-1;;;3666:57:23;;11862:2:105;3666:57:23;;;11844:21:105;11901:2;11881:18;;;11874:30;11940:34;11920:18;;;11913:62;-1:-1:-1;;;11991:18:105;;;11984:31;12032:19;;3666:57:23;11834:223:105;3666:57:23;719:10:30;-1:-1:-1;;;;;3755:21:23;;;;:62;;-1:-1:-1;3780:37:23;3797:5;719:10:30;4502:162:23;:::i;3780:37::-;3734:165;;;;-1:-1:-1;;;3734:165:23;;9135:2:105;3734:165:23;;;9117:21:105;9174:2;9154:18;;;9147:30;9213:34;9193:18;;;9186:62;9284:26;9264:18;;;9257:54;9328:19;;3734:165:23;9107:246:105;3734:165:23;3910:21;3919:2;3923:7;3910:8;:21::i;:::-;3607:331;3537:401;;:::o;1251:104:84:-;1295:7;1322:25;:15;918:14:31;;827:112;1322:25:84;1315:32;;1251:104;:::o;4726:330:23:-;4915:41;719:10:30;4948:7:23;4915:18;:41::i;:::-;4907:103;;;;-1:-1:-1;;;4907:103:23;;;;;;;:::i;:::-;5021:28;5031:4;5037:2;5041:7;5021:9;:28::i;650:131:84:-;709:6;704:70;725:3;721:1;:7;704:70;;;750:12;759:2;750:8;:12::i;:::-;730:3;;;;:::i;:::-;;;;704:70;;1073:170;1121:15;1139:25;:15;918:14:31;;827:112;1139:25:84;1121:43;;1175:27;:15;1032:19:31;;1050:1;1032:19;;;945:123;1175:27:84;1213:22;1223:2;1227:7;1213:9;:22::i;:::-;1110:133;1073:170;:::o;5122:179:23:-;5255:39;5272:4;5278:2;5282:7;5255:39;;;;;;;;;;;;:16;:39::i;2191:235::-;2263:7;2298:16;;;:7;:16;;;;;;-1:-1:-1;;;;;2298:16:23;2332:19;2324:73;;;;-1:-1:-1;;;2324:73:23;;10317:2:105;2324:73:23;;;10299:21:105;10356:2;10336:18;;;10329:30;10395:34;10375:18;;;10368:62;-1:-1:-1;;;10446:18:105;;;10439:39;10495:19;;2324:73:23;10289:231:105;456:68:84;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1929:205:23:-;2001:7;-1:-1:-1;;;;;2028:19:23;;2020:74;;;;-1:-1:-1;;;2020:74:23;;9906:2:105;2020:74:23;;;9888:21:105;9945:2;9925:18;;;9918:30;9984:34;9964:18;;;9957:62;-1:-1:-1;;;10035:18:105;;;10028:40;10085:19;;2020:74:23;9878:232:105;2020:74:23;-1:-1:-1;;;;;;2111:16:23;;;;;:9;:16;;;;;;;1929:205::o;1668:101:11:-;1108:6;;-1:-1:-1;;;;;1108:6:11;719:10:30;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;11501:2:105;1240:68:11;;;11483:21:105;;;11520:18;;;11513:30;11579:34;11559:18;;;11552:62;11631:18;;1240:68:11;11473:182:105;1240:68:11;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;2650:102:23:-;2706:13;2738:7;2731:14;;;;;:::i;4283:153::-;4377:52;719:10:30;4410:8:23;4420;4377:18;:52::i;5367:320::-;5536:41;719:10:30;5569:7:23;5536:18;:41::i;:::-;5528:103;;;;-1:-1:-1;;;5528:103:23;;;;;;;:::i;:::-;5641:39;5655:4;5661:2;5665:7;5674:5;5641:13;:39::i;:::-;5367:320;;;;:::o;789:276:84:-;7224:4:23;7247:16;;;:7;:16;;;;;;907:13:84;;-1:-1:-1;;;;;7247:16:23;938:46:84;;;;-1:-1:-1;;;938:46:84;;9560:2:105;938:46:84;;;9542:21:105;9599:2;9579:18;;;9572:30;-1:-1:-1;;;9618:18:105;;;9611:47;9675:18;;938:46:84;9532:167:105;938:46:84;1028:7;1037:18;:7;:16;:18::i;:::-;1011:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;997:60;;789:276;;;:::o;1918:198:11:-;1108:6;;-1:-1:-1;;;;;1108:6:11;719:10:30;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;11501:2:105;1240:68:11;;;11483:21:105;;;11520:18;;;11513:30;11579:34;11559:18;;;11552:62;11631:18;;1240:68:11;11473:182:105;1240:68:11;-1:-1:-1;;;;;2006:22:11;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:11;;6793:2:105;1998:73:11::1;::::0;::::1;6775:21:105::0;6832:2;6812:18;;;6805:30;6871:34;6851:18;;;6844:62;-1:-1:-1;;;6922:18:105;;;6915:36;6968:19;;1998:73:11::1;6765:228:105::0;1998:73:11::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;827:112:31:-;918:14;;827:112::o;945:123::-;1032:19;;1050:1;1032:19;;;945:123::o;1175:320:28:-;-1:-1:-1;;;;;1465:19:28;;:23;;;1175:320::o;11168:171:23:-;11242:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;11242:29:23;-1:-1:-1;;;;;11242:29:23;;;;;;;;:24;;11295:23;11242:24;11295:14;:23::i;:::-;-1:-1:-1;;;;;11286:46:23;;;;;;;;;;;11168:171;;:::o;7442:344::-;7535:4;7247:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7247:16:23;7551:73;;;;-1:-1:-1;;;7551:73:23;;8722:2:105;7551:73:23;;;8704:21:105;8761:2;8741:18;;;8734:30;8800:34;8780:18;;;8773:62;-1:-1:-1;;;8851:18:105;;;8844:42;8903:19;;7551:73:23;8694:234:105;7551:73:23;7634:13;7650:23;7665:7;7650:14;:23::i;:::-;7634:39;;7702:5;-1:-1:-1;;;;;7691:16:23;:7;-1:-1:-1;;;;;7691:16:23;;:51;;;;7735:7;-1:-1:-1;;;;;7711:31:23;:20;7723:7;7711:11;:20::i;:::-;-1:-1:-1;;;;;7711:31:23;;7691:51;:87;;;-1:-1:-1;;;;;;4622:25:23;;;4599:4;4622:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7746:32;7683:96;7442:344;-1:-1:-1;;;;7442:344:23:o;10452:605::-;10606:4;-1:-1:-1;;;;;10579:31:23;:23;10594:7;10579:14;:23::i;:::-;-1:-1:-1;;;;;10579:31:23;;10571:81;;;;-1:-1:-1;;;10571:81:23;;7200:2:105;10571:81:23;;;7182:21:105;7239:2;7219:18;;;7212:30;7278:34;7258:18;;;7251:62;-1:-1:-1;;;7329:18:105;;;7322:35;7374:19;;10571:81:23;7172:227:105;10571:81:23;-1:-1:-1;;;;;10670:16:23;;10662:65;;;;-1:-1:-1;;;10662:65:23;;7963:2:105;10662:65:23;;;7945:21:105;8002:2;7982:18;;;7975:30;8041:34;8021:18;;;8014:62;-1:-1:-1;;;8092:18:105;;;8085:34;8136:19;;10662:65:23;7935:226:105;10662:65:23;10839:29;10856:1;10860:7;10839:8;:29::i;:::-;-1:-1:-1;;;;;10879:15:23;;;;;;:9;:15;;;;;:20;;10898:1;;10879:15;:20;;10898:1;;10879:20;:::i;:::-;;;;-1:-1:-1;;;;;;;10909:13:23;;;;;;:9;:13;;;;;:18;;10926:1;;10909:13;:18;;10926:1;;10909:18;:::i;:::-;;;;-1:-1:-1;;10937:16:23;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;10937:21:23;-1:-1:-1;;;;;10937:21:23;;;;;;;;;10974:27;;10937:16;;10974:27;;;;;;;3607:331;3537:401;;:::o;8116:108::-;8191:26;8201:2;8205:7;8191:26;;;;;;;;;;;;:9;:26::i;2270:187:11:-;2362:6;;;-1:-1:-1;;;;;2378:17:11;;;-1:-1:-1;;;;;;2378:17:11;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;11474:307:23:-;11624:8;-1:-1:-1;;;;;11615:17:23;:5;-1:-1:-1;;;;;11615:17:23;;;11607:55;;;;-1:-1:-1;;;11607:55:23;;8368:2:105;11607:55:23;;;8350:21:105;8407:2;8387:18;;;8380:30;8446:27;8426:18;;;8419:55;8491:18;;11607:55:23;8340:175:105;11607:55:23;-1:-1:-1;;;;;11672:25:23;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;11672:46:23;;;;;;;;;;11733:41;;5896::105;;;11733::23;;5869:18:105;11733:41:23;;;;;;;11474:307;;;:::o;6549:::-;6700:28;6710:4;6716:2;6720:7;6700:9;:28::i;:::-;6746:48;6769:4;6775:2;6779:7;6788:5;6746:22;:48::i;:::-;6738:111;;;;-1:-1:-1;;;6738:111:23;;;;;;;:::i;328:703:32:-;384:13;601:10;597:51;;-1:-1:-1;;627:10:32;;;;;;;;;;;;-1:-1:-1;;;627:10:32;;;;;328:703::o;597:51::-;672:5;657:12;711:75;718:9;;711:75;;743:8;;;;:::i;:::-;;-1:-1:-1;765:10:32;;-1:-1:-1;773:2:32;765:10;;:::i;:::-;;;711:75;;;795:19;827:6;817:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:17:32;;795:39;;844:150;851:10;;844:150;;877:11;887:1;877:11;;:::i;:::-;;-1:-1:-1;945:10:32;953:2;945:5;:10;:::i;:::-;932:24;;:2;:24;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;902:56:32;;;;;;;;-1:-1:-1;972:11:32;981:2;972:11;;:::i;:::-;;;844:150;;8445:311:23;8570:18;8576:2;8580:7;8570:5;:18::i;:::-;8619:54;8650:1;8654:2;8658:7;8667:5;8619:22;:54::i;:::-;8598:151;;;;-1:-1:-1;;;8598:151:23;;;;;;;:::i;12334:778::-;12484:4;-1:-1:-1;;;;;12504:13:23;;1465:19:28;:23;12500:606:23;;12539:72;;-1:-1:-1;;;12539:72:23;;-1:-1:-1;;;;;12539:36:23;;;;;:72;;719:10:30;;12590:4:23;;12596:7;;12605:5;;12539:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12539:72:23;;;;;;;;-1:-1:-1;;12539:72:23;;;;;;;;;;;;:::i;:::-;;;12535:519;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12778:13:23;;12774:266;;12820:60;;-1:-1:-1;;;12820:60:23;;;;;;;:::i;12774:266::-;12992:6;12986:13;12977:6;12973:2;12969:15;12962:38;12535:519;-1:-1:-1;;;;;;12661:51:23;-1:-1:-1;;;12661:51:23;;-1:-1:-1;12654:58:23;;12500:606;-1:-1:-1;13091:4:23;12334:778;;;;;;:::o;9078:427::-;-1:-1:-1;;;;;9157:16:23;;9149:61;;;;-1:-1:-1;;;9149:61:23;;10727:2:105;9149:61:23;;;10709:21:105;;;10746:18;;;10739:30;10805:34;10785:18;;;10778:62;10857:18;;9149:61:23;10699:182:105;9149:61:23;7224:4;7247:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7247:16:23;:30;9220:58;;;;-1:-1:-1;;;9220:58:23;;7606:2:105;9220:58:23;;;7588:21:105;7645:2;7625:18;;;7618:30;7684;7664:18;;;7657:58;7732:18;;9220:58:23;7578:178:105;9220:58:23;-1:-1:-1;;;;;9345:13:23;;;;;;:9;:13;;;;;:18;;9362:1;;9345:13;:18;;9362:1;;9345:18;:::i;:::-;;;;-1:-1:-1;;9373:16:23;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9373:21:23;-1:-1:-1;;;;;9373:21:23;;;;;;;;9410:33;;9373:16;;;9410:33;;9373:16;;9410:33;1110:133:84;1073:170;:::o;14:173:105:-;82:20;;-1:-1:-1;;;;;131:31:105;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;320:1;317;310:12;272:2;343:29;362:9;343:29;:::i;:::-;333:39;262:116;-1:-1:-1;;;262:116:105:o;383:260::-;451:6;459;512:2;500:9;491:7;487:23;483:32;480:2;;;528:1;525;518:12;480:2;551:29;570:9;551:29;:::i;:::-;541:39;;599:38;633:2;622:9;618:18;599:38;:::i;:::-;589:48;;470:173;;;;;:::o;648:328::-;725:6;733;741;794:2;782:9;773:7;769:23;765:32;762:2;;;810:1;807;800:12;762:2;833:29;852:9;833:29;:::i;:::-;823:39;;881:38;915:2;904:9;900:18;881:38;:::i;:::-;871:48;;966:2;955:9;951:18;938:32;928:42;;752:224;;;;;:::o;981:1138::-;1076:6;1084;1092;1100;1153:3;1141:9;1132:7;1128:23;1124:33;1121:2;;;1170:1;1167;1160:12;1121:2;1193:29;1212:9;1193:29;:::i;:::-;1183:39;;1241:38;1275:2;1264:9;1260:18;1241:38;:::i;:::-;1231:48;;1326:2;1315:9;1311:18;1298:32;1288:42;;1381:2;1370:9;1366:18;1353:32;1404:18;1445:2;1437:6;1434:14;1431:2;;;1461:1;1458;1451:12;1431:2;1499:6;1488:9;1484:22;1474:32;;1544:7;1537:4;1533:2;1529:13;1525:27;1515:2;;1566:1;1563;1556:12;1515:2;1602;1589:16;1624:2;1620;1617:10;1614:2;;;1630:18;;:::i;:::-;1705:2;1699:9;1673:2;1759:13;;-1:-1:-1;;1755:22:105;;;1779:2;1751:31;1747:40;1735:53;;;1803:18;;;1823:22;;;1800:46;1797:2;;;1849:18;;:::i;:::-;1889:10;1885:2;1878:22;1924:2;1916:6;1909:18;1964:7;1959:2;1954;1950;1946:11;1942:20;1939:33;1936:2;;;1985:1;1982;1975:12;1936:2;2041;2036;2032;2028:11;2023:2;2015:6;2011:15;1998:46;2086:1;2081:2;2076;2068:6;2064:15;2060:24;2053:35;2107:6;2097:16;;;;;;;1111:1008;;;;;;;:::o;2124:347::-;2189:6;2197;2250:2;2238:9;2229:7;2225:23;2221:32;2218:2;;;2266:1;2263;2256:12;2218:2;2289:29;2308:9;2289:29;:::i;:::-;2279:39;;2368:2;2357:9;2353:18;2340:32;2415:5;2408:13;2401:21;2394:5;2391:32;2381:2;;2437:1;2434;2427:12;2381:2;2460:5;2450:15;;;2208:263;;;;;:::o;2476:254::-;2544:6;2552;2605:2;2593:9;2584:7;2580:23;2576:32;2573:2;;;2621:1;2618;2611:12;2573:2;2644:29;2663:9;2644:29;:::i;:::-;2634:39;2720:2;2705:18;;;;2692:32;;-1:-1:-1;;;2563:167:105:o;2735:245::-;2793:6;2846:2;2834:9;2825:7;2821:23;2817:32;2814:2;;;2862:1;2859;2852:12;2814:2;2901:9;2888:23;2920:30;2944:5;2920:30;:::i;2985:249::-;3054:6;3107:2;3095:9;3086:7;3082:23;3078:32;3075:2;;;3123:1;3120;3113:12;3075:2;3155:9;3149:16;3174:30;3198:5;3174:30;:::i;3239:180::-;3298:6;3351:2;3339:9;3330:7;3326:23;3322:32;3319:2;;;3367:1;3364;3357:12;3319:2;-1:-1:-1;3390:23:105;;3309:110;-1:-1:-1;3309:110:105:o;3424:257::-;3465:3;3503:5;3497:12;3530:6;3525:3;3518:19;3546:63;3602:6;3595:4;3590:3;3586:14;3579:4;3572:5;3568:16;3546:63;:::i;:::-;3663:2;3642:15;-1:-1:-1;;3638:29:105;3629:39;;;;3670:4;3625:50;;3473:208;-1:-1:-1;;3473:208:105:o;3686:185::-;3728:3;3766:5;3760:12;3781:52;3826:6;3821:3;3814:4;3807:5;3803:16;3781:52;:::i;:::-;3849:16;;;;;3736:135;-1:-1:-1;;3736:135:105:o;3876:1174::-;4052:3;4081:1;4114:6;4108:13;4144:3;4166:1;4194:9;4190:2;4186:18;4176:28;;4254:2;4243:9;4239:18;4276;4266:2;;4320:4;4312:6;4308:17;4298:27;;4266:2;4346;4394;4386:6;4383:14;4363:18;4360:38;4357:2;;;-1:-1:-1;;;4421:33:105;;4477:4;4474:1;4467:15;4507:4;4428:3;4495:17;4357:2;4538:18;4565:104;;;;4683:1;4678:320;;;;4531:467;;4565:104;-1:-1:-1;;4598:24:105;;4586:37;;4643:16;;;;-1:-1:-1;4565:104:105;;4678:320;12735:1;12728:14;;;12772:4;12759:18;;4773:1;4787:165;4801:6;4798:1;4795:13;4787:165;;;4879:14;;4866:11;;;4859:35;4922:16;;;;4816:10;;4787:165;;;4791:3;;4981:6;4976:3;4972:16;4965:23;;4531:467;;;;;;;5014:30;5040:3;5032:6;5014:30;:::i;:::-;5007:37;4060:990;-1:-1:-1;;;;;4060:990:105:o;5263:488::-;-1:-1:-1;;;;;5532:15:105;;;5514:34;;5584:15;;5579:2;5564:18;;5557:43;5631:2;5616:18;;5609:34;;;5679:3;5674:2;5659:18;;5652:31;;;5457:4;;5700:45;;5725:19;;5717:6;5700:45;:::i;:::-;5692:53;5466:285;-1:-1:-1;;;;;;5466:285:105:o;5948:219::-;6097:2;6086:9;6079:21;6060:4;6117:44;6157:2;6146:9;6142:18;6134:6;6117:44;:::i;6172:414::-;6374:2;6356:21;;;6413:2;6393:18;;;6386:30;6452:34;6447:2;6432:18;;6425:62;-1:-1:-1;;;6518:2:105;6503:18;;6496:48;6576:3;6561:19;;6346:240::o;12062:413::-;12264:2;12246:21;;;12303:2;12283:18;;;12276:30;12342:34;12337:2;12322:18;;12315:62;-1:-1:-1;;;12408:2:105;12393:18;;12386:47;12465:3;12450:19;;12236:239::o;12788:128::-;12828:3;12859:1;12855:6;12852:1;12849:13;12846:2;;;12865:18;;:::i;:::-;-1:-1:-1;12901:9:105;;12836:80::o;12921:120::-;12961:1;12987;12977:2;;12992:18;;:::i;:::-;-1:-1:-1;13026:9:105;;12967:74::o;13046:125::-;13086:4;13114:1;13111;13108:8;13105:2;;;13119:18;;:::i;:::-;-1:-1:-1;13156:9:105;;13095:76::o;13176:258::-;13248:1;13258:113;13272:6;13269:1;13266:13;13258:113;;;13348:11;;;13342:18;13329:11;;;13322:39;13294:2;13287:10;13258:113;;;13389:6;13386:1;13383:13;13380:2;;;-1:-1:-1;;13424:1:105;13406:16;;13399:27;13229:205::o;13439:380::-;13518:1;13514:12;;;;13561;;;13582:2;;13636:4;13628:6;13624:17;13614:27;;13582:2;13689;13681:6;13678:14;13658:18;13655:38;13652:2;;;13735:10;13730:3;13726:20;13723:1;13716:31;13770:4;13767:1;13760:15;13798:4;13795:1;13788:15;13652:2;;13494:325;;;:::o;13824:135::-;13863:3;-1:-1:-1;;13884:17:105;;13881:2;;;13904:18;;:::i;:::-;-1:-1:-1;13951:1:105;13940:13;;13871:88::o;13964:112::-;13996:1;14022;14012:2;;14027:18;;:::i;:::-;-1:-1:-1;14061:9:105;;14002:74::o;14081:127::-;14142:10;14137:3;14133:20;14130:1;14123:31;14173:4;14170:1;14163:15;14197:4;14194:1;14187:15;14213:127;14274:10;14269:3;14265:20;14262:1;14255:31;14305:4;14302:1;14295:15;14329:4;14326:1;14319:15;14345:127;14406:10;14401:3;14397:20;14394:1;14387:31;14437:4;14434:1;14427:15;14461:4;14458:1;14451:15;14477:127;14538:10;14533:3;14529:20;14526:1;14519:31;14569:4;14566:1;14559:15;14593:4;14590:1;14583:15;14609:131;-1:-1:-1;;;;;;14683:32:105;;14673:43;;14663:2;;14730:1;14727;14720:12"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1199600",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "approve(address,uint256)": "infinite",
            "balanceOf(address)": "2634",
            "baseURI()": "infinite",
            "getApproved(uint256)": "4760",
            "isApprovedForAll(address,address)": "infinite",
            "mint(address,uint256)": "infinite",
            "name()": "infinite",
            "owner()": "2420",
            "ownerOf(uint256)": "2667",
            "renounceOwnership()": "28184",
            "safeMint(address)": "infinite",
            "safeTransferFrom(address,address,uint256)": "infinite",
            "safeTransferFrom(address,address,uint256,bytes)": "infinite",
            "setApprovalForAll(address,bool)": "26708",
            "supportsInterface(bytes4)": "534",
            "symbol()": "infinite",
            "tokenURI(uint256)": "infinite",
            "totalSupply()": "2442",
            "transferFrom(address,address,uint256)": "infinite",
            "transferOwnership(address)": "28422"
          }
        },
        "methodIdentifiers": {
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "baseURI()": "6c0360eb",
          "getApproved(uint256)": "081812fc",
          "isApprovedForAll(address,address)": "e985e9c5",
          "mint(address,uint256)": "40c10f19",
          "name()": "06fdde03",
          "owner()": "8da5cb5b",
          "ownerOf(uint256)": "6352211e",
          "renounceOwnership()": "715018a6",
          "safeMint(address)": "40d097c3",
          "safeTransferFrom(address,address,uint256)": "42842e0e",
          "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
          "setApprovalForAll(address,bool)": "a22cb465",
          "supportsInterface(bytes4)": "01ffc9a7",
          "symbol()": "95d89b41",
          "tokenURI(uint256)": "c87b56dd",
          "totalSupply()": "18160ddd",
          "transferFrom(address,address,uint256)": "23b872dd",
          "transferOwnership(address)": "f2fde38b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mintTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tests/NFTs/DoodleApes.sol\":\"DoodleApes\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/tests/NFTs/DoodleApes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract DoodleApes is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;    \\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n   string public baseURI = 'https://doodleapes.meta.rareboard.com/api/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"Doodle Apes BSC\\\", \\\"dApes\\\") {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x52843bb4d2e58c875ef8975176973ed7be3930dd52c041de41e6d34eee345d6b\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 3406,
            "contract": "contracts/tests/NFTs/DoodleApes.sol:DoodleApes",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3408,
            "contract": "contracts/tests/NFTs/DoodleApes.sol:DoodleApes",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3412,
            "contract": "contracts/tests/NFTs/DoodleApes.sol:DoodleApes",
            "label": "_owners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 3416,
            "contract": "contracts/tests/NFTs/DoodleApes.sol:DoodleApes",
            "label": "_balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3420,
            "contract": "contracts/tests/NFTs/DoodleApes.sol:DoodleApes",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 3426,
            "contract": "contracts/tests/NFTs/DoodleApes.sol:DoodleApes",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 917,
            "contract": "contracts/tests/NFTs/DoodleApes.sol:DoodleApes",
            "label": "_owner",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 19810,
            "contract": "contracts/tests/NFTs/DoodleApes.sol:DoodleApes",
            "label": "_tokenIdCounter",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(Counter)4842_storage"
          },
          {
            "astId": 19813,
            "contract": "contracts/tests/NFTs/DoodleApes.sol:DoodleApes",
            "label": "baseURI",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)4842_storage": {
            "encoding": "inplace",
            "label": "struct Counters.Counter",
            "members": [
              {
                "astId": 4841,
                "contract": "contracts/tests/NFTs/DoodleApes.sol:DoodleApes",
                "label": "_value",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/interfaces/AggregatorV3Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n\\r\\n  function decimals()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint8\\r\\n    );\\r\\n\\r\\n  function description()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      string memory\\r\\n    );\\r\\n\\r\\n  function version()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256\\r\\n    );\\r\\n\\r\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n  // if they do not have data to report, instead of returning unset values\\r\\n  // which could be misinterpreted as actual reported values.\\r\\n  function getRoundData(\\r\\n    uint80 _roundId\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\"\n    },\n    \"contracts/TokenPrices.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\r\\nimport \\\"./interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./interfaces/ITokenPrices.sol\\\";\\r\\n\\r\\nerror PRICE_FEED_NOT_FOUND();\\r\\n\\r\\n/** \\r\\n  @notice Manages and normalizes price feeds.\\r\\n*/\\r\\ncontract TokenPrices is ITokenPrices, Ownable {\\r\\n\\r\\n  mapping(string => mapping(string => TokenFeed)) public feeders;  \\r\\n\\r\\n  function getPrice(string memory currency, string memory token) override public view returns (uint256) {\\r\\n\\r\\n    TokenFeed memory tokenFeed = feeders[currency][token];\\r\\n\\r\\n     // If the currency is the base, return 1 since they are priced the same. Include the desired number of decimals.\\r\\n    if (keccak256(abi.encodePacked(currency)) == keccak256(abi.encodePacked(token))) return 10**tokenFeed.decimals;\\r\\n\\r\\n    // If it exists, return the price.\\r\\n    if (address(tokenFeed.feed) != address(0)) return currentPrice(tokenFeed.feed, tokenFeed.decimals);\\r\\n\\r\\n    // Get the inverse tokenFeed.\\r\\n    tokenFeed = feeders[token][currency];\\r\\n\\r\\n    // If it exists, return the inverse price.\\r\\n    if (address(tokenFeed.feed) != address(0))\\r\\n      return PRBMath.mulDiv(10**tokenFeed.decimals, 10**tokenFeed.decimals, currentPrice(tokenFeed.feed, tokenFeed.decimals));\\r\\n\\r\\n    // No price feed available, revert.\\r\\n    revert PRICE_FEED_NOT_FOUND();\\r\\n  }\\r\\n\\r\\n  function getPrices(string memory currency, string[] memory tokens) override external view returns (uint256[] memory) {\\r\\n    uint256[] memory prices = new uint256[](tokens.length);\\r\\n    for(uint i=0; i < tokens.length; i++) { \\r\\n      prices[i] = getPrice(currency, tokens[i]);\\r\\n    }\\r\\n    return prices;\\r\\n  }\\r\\n\\r\\n  function getFeed(string memory currency, string memory token) override external view returns (TokenFeed memory){\\r\\n    return feeders[currency][token];\\r\\n  }\\r\\n\\r\\n  function addFeed(string memory currency, string memory token, uint256 decimals, AggregatorV3Interface priceFeed) override external onlyOwner {\\r\\n    \\r\\n    feeders[currency][token] = TokenFeed(decimals, priceFeed);\\r\\n\\r\\n    emit AddFeed(currency, token, decimals, priceFeed);\\r\\n  }\\r\\n\\r\\n\\r\\n  function currentPrice(AggregatorV3Interface feed, uint256 decimals) internal view returns (uint256) {\\r\\n    // Get the latest round information. Only need the price is needed.\\r\\n    (, int256 price, , , ) = feed.latestRoundData();\\r\\n\\r\\n    // Get a reference to the number of decimals the feed uses.\\r\\n    uint256 _feedDecimals = feed.decimals();\\r\\n\\r\\n    // Return the price, adjusted to the target decimals.\\r\\n    return adjustDecimals(uint256(price), _feedDecimals, decimals);\\r\\n  }\\r\\n\\r\\n  function adjustDecimals(\\r\\n    uint256 _value,\\r\\n    uint256 _decimals,\\r\\n    uint256 _targetDecimals\\r\\n  ) internal pure returns (uint256) {\\r\\n    // If decimals need adjusting, multiply or divide the price by the decimal adjuster to get the normalized result.\\r\\n    if (_targetDecimals == _decimals) return _value;\\r\\n    else if (_targetDecimals > _decimals) return _value * 10**(_targetDecimals - _decimals);\\r\\n    else return _value / 10**(_decimals - _targetDecimals);\\r\\n  }\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@paulrberg/contracts/math/PRBMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\"\n    },\n    \"contracts/interfaces/ITokenPrices.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./AggregatorV3Interface.sol\\\";\\r\\n\\r\\ninterface ITokenPrices {\\r\\n\\r\\n  struct TokenFeed {    \\r\\n    uint256 decimals;    \\r\\n    AggregatorV3Interface feed;\\r\\n  }\\r\\n\\r\\n  event AddFeed(string currency, string token, uint256 decimals, AggregatorV3Interface feed);\\r\\n\\r\\n  function getPrice(string memory currency, string memory token) external view returns (uint256);\\r\\n\\r\\n  function getPrices(string memory currency, string[] memory tokens) external view returns (uint256[] memory);\\r\\n\\r\\n  function getFeed(string memory currency, string memory token) external view returns (TokenFeed memory);\\r\\n\\r\\n  function addFeed(string memory currency, string memory token, uint256 decimals, AggregatorV3Interface priceFeed) external;\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"prb-math/contracts/PRBMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/tests/NFTs/PandaNFT.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract PandaNFT is ERC721, Ownable {\\r\\n    \\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public baseURI = 'https://www.pandamultiversenft.com/metadata/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"Panda Multiverse\\\", \\\"PNDMLT\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString(),\\\".json\\\"));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/tests/NFTs/DracooMaster.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract DracooMaster is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public baseURI = 'https://api.dracoomaster.com/platform/nft/dracoo/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"Dracoo Master\\\", \\\"Dracoo\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs/DoodleApes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract DoodleApes is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;    \\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n   string public baseURI = 'https://doodleapes.meta.rareboard.com/api/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"Doodle Apes BSC\\\", \\\"dApes\\\") {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs/CyBlocPack.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract CyBlocPack is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;    \\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string constant public baseURI = \\\"https://nftmetadata.cyball.com/blocpack/\\\";\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"CyBall Genesis Pack\\\", \\\"BLOCPACK\\\") {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs-ETH/EthShitBeast.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract EthShitBeast is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public baseURI = 'https://metadata.pieceofshit.wtf/shitbeast/02372da9-ea1b-4bb3-9ff8-f1f89c6a98ed/json/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"ShitBeast\\\", \\\"SB\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {     \\r\\n        require(balanceOf(to) <=3 , 'owner count out of bounds');\\r\\n\\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        require(tokenId <= 10000, \\\"over cap\\\");\\r\\n       \\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs-ETH/EthOtherdeed.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract EthOtherdeed is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n    mapping(address=>uint256) public userMinted;\\r\\n    string public baseURI = 'https://api.otherside.xyz/lands/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"Otherdeed\\\", \\\"OTHR\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        require(userMinted[to] + num <= 6, \\\"mint limit\\\");\\r\\n        userMinted[to] += num;\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {        \\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs-ETH/EthMurakamiFlowers.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract EthMurakamiFlowers is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public baseURI = 'https://mflowers-prod.s3.us-west-1.amazonaws.com/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"Murakami.Flowers\\\", \\\"M.F\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {     \\r\\n        require(balanceOf(to) <=3 , 'owner count out of bounds');\\r\\n\\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        require(tokenId <= 10000, \\\"over cap\\\");\\r\\n       \\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs-ETH/EthMoonbirds.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract EthMoonbirds is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public baseURI = 'https://live---metadata-5covpqijaa-uc.a.run.app/metadata/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"Moonbirds\\\", \\\"MOONBIRD\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {        \\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs-ETH/EthMfers.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract EthMfers is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public baseURI = 'ipfs://QmWiQE65tmpYzcokCheQmng2DCM33DEhjXcPB6PanwpAZo/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"mfers\\\", \\\"MFER\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {     \\r\\n        require(balanceOf(to) <=3 , 'owner count out of bounds');\\r\\n\\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        require(tokenId <= 10000, \\\"over cap\\\");\\r\\n       \\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs-ETH/EthMeebits.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract EthMeebits is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public baseURI = 'https://meebits.larvalabs.com/meebit/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"Meebits\\\", unicode\\\"⚇\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {     \\r\\n        require(balanceOf(to) <=3 , 'owner count out of bounds');\\r\\n\\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        require(tokenId <= 10000, \\\"over cap\\\");\\r\\n       \\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs-ETH/EthGoblintownNFT.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract EthGoblintownNFT is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public baseURI = 'ipfs://QmewJ9GaaH11Z8n1muXUndrivPi5CmENxV1nx7P5A23VQx/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"goblintown\\\", \\\"GOBLIN\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {     \\r\\n        require(balanceOf(to) <=3 , 'owner count out of bounds');\\r\\n\\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        require(tokenId <= 10000, \\\"over cap\\\");\\r\\n       \\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n\\r\\ncontract EthCryptoPunksMarket is ERC721, Ownable {\\r\\n  // You can use this hash to verify the image file containing all the punks\\r\\n  string public imageHash = \\\"ac39af4793119ee46bbff351d8cb6b5f23da60222126add4268e261199a2921b\\\";\\r\\n  string public baseURI = \\\"https://wrappedpunks.com:3000/api/punks/metadata/\\\";\\r\\n\\r\\n  string public standard = \\\"CryptoPunks\\\";\\r\\n  uint8 public decimals;\\r\\n  uint256 public totalSupply;\\r\\n\\r\\n  uint256 public nextPunkIndexToAssign = 0;\\r\\n\\r\\n  bool public allPunksAssigned = false;\\r\\n  uint256 public punksRemainingToAssign = 0;\\r\\n\\r\\n  //mapping (address => uint) public addressToPunkIndex;\\r\\n  mapping(uint256 => address) public punkIndexToAddress;    \\r\\n\\r\\n  struct Offer {\\r\\n    bool isForSale;\\r\\n    uint256 punkIndex;\\r\\n    address seller;\\r\\n    uint256 minValue; // in ether\\r\\n    address onlySellTo; // specify to sell only to a specific person\\r\\n  }\\r\\n\\r\\n  struct Bid {\\r\\n    bool hasBid;\\r\\n    uint256 punkIndex;\\r\\n    address bidder;\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  // A record of punks that are offered for sale at a specific minimum value, and perhaps to a specific person\\r\\n  mapping(uint256 => Offer) public punksOfferedForSale;\\r\\n\\r\\n  // A record of the highest punk bid\\r\\n  mapping(uint256 => Bid) public punkBids;\\r\\n\\r\\n  mapping(address => uint256) public pendingWithdrawals;\\r\\n\\r\\n  event Assign(address indexed to, uint256 punkIndex);  \\r\\n  event PunkTransfer(address indexed from, address indexed to, uint256 punkIndex);\\r\\n  event PunkOffered(uint256 indexed punkIndex, uint256 minValue, address indexed toAddress);\\r\\n  event PunkBidEntered(uint256 indexed punkIndex, uint256 value, address indexed fromAddress);\\r\\n  event PunkBidWithdrawn(uint256 indexed punkIndex, uint256 value, address indexed fromAddress);\\r\\n  event PunkBought(uint256 indexed punkIndex, uint256 value, address indexed fromAddress, address indexed toAddress);\\r\\n  event PunkNoLongerForSale(uint256 indexed punkIndex);\\r\\n\\r\\n  /* Initializes contract with initial supply tokens to the creator of the contract */\\r\\n  constructor() ERC721(\\\"CRYPTOPUNKS\\\", \\\"\\\\x3FE\\\"){\\r\\n    //        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\\r\\n    totalSupply = 10000; // Update total supply\\r\\n    punksRemainingToAssign = totalSupply;\\r\\n    decimals = 0; // Amount of decimals for display purposes\\r\\n  }\\r\\n\\r\\n  function setInitialOwner(address to, uint256 punkIndex) public onlyOwner {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket:  allPunksAssigned\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    if (punkIndexToAddress[punkIndex] != to) {\\r\\n      if (punkIndexToAddress[punkIndex] != address(0)) {      \\r\\n        _safeMint(to, punkIndex);\\r\\n      } else {\\r\\n        punksRemainingToAssign--;\\r\\n      }\\r\\n      punkIndexToAddress[punkIndex] = to;\\r\\n      \\r\\n      emit Assign(to, punkIndex);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setInitialOwners(address[] calldata addresses, uint256[] calldata indices) public onlyOwner {\\r\\n    uint256 n = addresses.length;\\r\\n    for (uint256 i = 0; i < n; i++) {\\r\\n      setInitialOwner(addresses[i], indices[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function allInitialOwnersAssigned() public onlyOwner {\\r\\n    allPunksAssigned = true;\\r\\n  }\\r\\n\\r\\n  function getPunk(uint256 punkIndex) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punksRemainingToAssign != 0, \\\"CryptoPunksMarket: empty punksRemainingToAssign\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == address(0), \\\"CryptoPunksMarket: already got\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n    require(balanceOf(msg.sender) <=3 , 'owner count out of bounds');\\r\\n\\r\\n    punkIndexToAddress[punkIndex] = msg.sender;\\r\\n    _safeMint(msg.sender, punkIndex);\\r\\n    punksRemainingToAssign--;\\r\\n\\r\\n    emit Assign(msg.sender, punkIndex);\\r\\n  }\\r\\n\\r\\n  // Transfer ownership of a punk to another user without requiring payment\\r\\n  function transferPunk(address to, uint256 punkIndex) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == msg.sender, \\\"CryptoPunksMarket: not owner\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    if (punksOfferedForSale[punkIndex].isForSale) {\\r\\n      punkNoLongerForSale(punkIndex);\\r\\n    }\\r\\n    punkIndexToAddress[punkIndex] = to;\\r\\n  \\r\\n    _transfer(msg.sender, to, punkIndex);\\r\\n\\r\\n    emit Transfer(msg.sender, to, 1);\\r\\n    emit PunkTransfer(msg.sender, to, punkIndex);\\r\\n\\r\\n    // Check for the case where there is a bid from the new owner and refund it.\\r\\n    // Any other bid can stay in place.\\r\\n    Bid memory bid = punkBids[punkIndex];\\r\\n    if (bid.bidder == to) {\\r\\n      // Kill bid and refund value\\r\\n      pendingWithdrawals[to] += bid.value;\\r\\n      punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function punkNoLongerForSale(uint256 punkIndex) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == msg.sender, \\\"CryptoPunksMarket: not owner\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    punksOfferedForSale[punkIndex] = Offer(false, punkIndex, msg.sender, 0, address(0));\\r\\n\\r\\n    emit PunkNoLongerForSale(punkIndex);\\r\\n  }\\r\\n\\r\\n  function offerPunkForSale(uint256 punkIndex, uint256 minSalePriceInWei) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == msg.sender, \\\"CryptoPunksMarket: not owner\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    punksOfferedForSale[punkIndex] = Offer(true, punkIndex, msg.sender, minSalePriceInWei, address(0));\\r\\n\\r\\n    emit PunkOffered(punkIndex, minSalePriceInWei, address(0));\\r\\n  }\\r\\n\\r\\n  function offerPunkForSaleToAddress(\\r\\n    uint256 punkIndex,\\r\\n    uint256 minSalePriceInWei,\\r\\n    address toAddress\\r\\n  ) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == msg.sender, \\\"CryptoPunksMarket: not owner\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    punksOfferedForSale[punkIndex] = Offer(true, punkIndex, msg.sender, minSalePriceInWei, toAddress);\\r\\n\\r\\n    emit PunkOffered(punkIndex, minSalePriceInWei, toAddress);\\r\\n  }\\r\\n\\r\\n  function buyPunk(uint256 punkIndex) public payable {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    Offer memory offer = punksOfferedForSale[punkIndex];\\r\\n    require(offer.isForSale, \\\"CryptoPunksMarket: punk not actually for sale\\\");\\r\\n    require(\\r\\n      offer.onlySellTo == address(0) || offer.onlySellTo == msg.sender,\\r\\n      \\\"CryptoPunksMarket: punk not supposed to be sold to this user\\\"\\r\\n    );\\r\\n\\r\\n    require(msg.value >= offer.minValue, \\\"CryptoPunksMarket: Didn't send enough ETH\\\");\\r\\n    require(offer.seller == punkIndexToAddress[punkIndex], \\\"CryptoPunksMarket: Seller no longer owner of punk\\\");\\r\\n\\r\\n    address seller = offer.seller;\\r\\n\\r\\n    punkIndexToAddress[punkIndex] = msg.sender;\\r\\n   \\r\\n   _transfer(seller, msg.sender, punkIndex);\\r\\n\\r\\n    emit Transfer(seller, msg.sender, 1);\\r\\n\\r\\n    punkNoLongerForSale(punkIndex);\\r\\n    pendingWithdrawals[seller] += msg.value;\\r\\n\\r\\n    emit PunkBought(punkIndex, msg.value, seller, msg.sender);\\r\\n\\r\\n    // Check for the case where there is a bid from the new owner and refund it.\\r\\n    // Any other bid can stay in place.\\r\\n    Bid memory bid = punkBids[punkIndex];\\r\\n    if (bid.bidder == msg.sender) {\\r\\n      // Kill bid and refund value\\r\\n      pendingWithdrawals[msg.sender] += bid.value;\\r\\n      punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function withdraw() public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n\\r\\n    uint256 amount = pendingWithdrawals[msg.sender];\\r\\n    // Remember to zero the pending refund before\\r\\n    // sending to prevent re-entrancy attacks\\r\\n    pendingWithdrawals[msg.sender] = 0;\\r\\n\\r\\n    _safeTransferETH(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function enterBidForPunk(uint256 punkIndex) public payable {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n    require(punkIndexToAddress[punkIndex] != msg.sender, \\\"CryptoPunksMarket: can not buy your own punk\\\");\\r\\n    require(punkIndexToAddress[punkIndex] != address(0), \\\"CryptoPunksMarket: can not buy unassigned punk\\\");\\r\\n    require(msg.value > 0, \\\"CryptoPunksMarket: should send eth value\\\");\\r\\n\\r\\n    Bid memory existing = punkBids[punkIndex];\\r\\n    require(msg.value > existing.value, \\\"CryptoPunksMarket: should send more eth value\\\");\\r\\n\\r\\n    if (existing.value > 0) {\\r\\n      // Refund the failing bid\\r\\n      pendingWithdrawals[existing.bidder] += existing.value;\\r\\n    }\\r\\n    punkBids[punkIndex] = Bid(true, punkIndex, msg.sender, msg.value);\\r\\n\\r\\n    emit PunkBidEntered(punkIndex, msg.value, msg.sender);\\r\\n  }\\r\\n\\r\\n  function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == msg.sender, \\\"CryptoPunksMarket: not owner\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    address seller = msg.sender;\\r\\n\\r\\n    Bid memory bid = punkBids[punkIndex];\\r\\n    require(bid.value >= minPrice, \\\"CryptoPunksMarket: bid value to small\\\");\\r\\n\\r\\n    punkIndexToAddress[punkIndex] = bid.bidder;\\r\\n\\r\\n    _transfer(seller, bid.bidder, punkIndex);\\r\\n\\r\\n    emit Transfer(seller, bid.bidder, 1);\\r\\n\\r\\n    punksOfferedForSale[punkIndex] = Offer(false, punkIndex, bid.bidder, 0, address(0));\\r\\n    uint256 amount = bid.value;\\r\\n    punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\r\\n    pendingWithdrawals[seller] += amount;\\r\\n\\r\\n    emit PunkBought(punkIndex, bid.value, seller, bid.bidder);\\r\\n  }\\r\\n\\r\\n  function withdrawBidForPunk(uint256 punkIndex) public {\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] != address(0), \\\"CryptoPunksMarket: punk not assigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] != msg.sender, \\\"CryptoPunksMarket: can not withdraw self\\\");\\r\\n\\r\\n    Bid memory bid = punkBids[punkIndex];\\r\\n    require(bid.bidder == msg.sender, \\\"CryptoPunksMakrket: not bid bidder\\\");\\r\\n\\r\\n    emit PunkBidWithdrawn(punkIndex, bid.value, msg.sender);\\r\\n\\r\\n    uint256 amount = bid.value;\\r\\n\\r\\n    punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\r\\n\\r\\n    // Refund the bid money\\r\\n    _safeTransferETH(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev transfer ETH to an address, revert if it fails.\\r\\n   * @param to recipient of the transfer\\r\\n   * @param value the amount to send\\r\\n   */\\r\\n  function _safeTransferETH(address to, uint256 value) internal {\\r\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n    require(success, \\\"ETH_TRANSFER_FAILED\\\");\\r\\n  }\\r\\n\\r\\n  function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual        \\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(tokenId <= 10000, \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, toString(tokenId)));\\r\\n    }\\r\\n\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/tests/NFTs-ETH/EthBoredApeYachtClub.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract EthBoredApeYachtClub is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public baseURI = 'ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"BoredApeYachtClub\\\", \\\"BAYC\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {        \\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/NFTs-ETH/EthAzuki.sol\": {\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract EthAzuki is ERC721, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public baseURI = 'https://ikzttp.mypinata.cloud/ipfs/QmQFkLSQysj94s5GvTHPyzTxrawwtjgiiYS2TBLgrvw8CW/';\\r\\n\\r\\n    constructor(address mintTo, uint num) ERC721(\\\"Azuki\\\", \\\"AZUKI\\\")  {\\r\\n        mint(mintTo, num);\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint num) public {\\r\\n        for (uint i = 0; i < num; i++) {\\r\\n            safeMint(to);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) public {        \\r\\n        _tokenIdCounter.increment();\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIdCounter.current();\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/ProxyNFTStation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// imports\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport {IProxyNFTStation, DepositNFT} from \\\"./interfaces/IProxyNFTStation.sol\\\";\\r\\n\\r\\ncontract ProxyNFTStation is IProxyNFTStation, ERC721Holder, ERC1155Holder, Ownable {\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _depositIds;\\r\\n\\r\\n    // ============ Public  ============    \\r\\n\\r\\n    // interfaceID\\r\\n    bytes4 public constant ID_ERC721 = 0x80ac58cd;  // ERC721    \\r\\n    bytes4 public constant ID_ERC1155 = 0xd9b67a26; // ERC1155    \\r\\n\\r\\n    // OpenLuck executors\\r\\n    mapping(address => bool) public executors;\\r\\n\\r\\n    // store user deposited nfts, support multiple executors (executor-address => depositId => NFT)    \\r\\n    mapping(address => mapping(uint256 => DepositNFT)) public deposits;\\r\\n\\r\\n\\r\\n    modifier onlyExecutor() {\\r\\n        require(executors[msg.sender] == true, \\\"Lucks: onlyExecutor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ======== Constructor =========\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     * @param _executor address\\r\\n     */\\r\\n    constructor(address _executor) {\\r\\n       executors[_executor]= true;\\r\\n    }\\r\\n\\r\\n    // ============ Public functions ============\\r\\n\\r\\n    function getNFT(address executor, uint256 depositId) public view override returns(DepositNFT memory){\\r\\n        return deposits[executor][depositId];\\r\\n    }\\r\\n\\r\\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) override external payable onlyExecutor \\r\\n        returns(uint256 depositId) { \\r\\n\\r\\n        // transfer nft to this contract\\r\\n        _transferNFTs(nft, user, address(this), tokenIds, amounts);    \\r\\n\\r\\n        // store deposit record\\r\\n        _depositIds.increment();\\r\\n        depositId = _depositIds.current();\\r\\n\\r\\n        deposits[msg.sender][depositId] = DepositNFT(user, nft, tokenIds, amounts, endTime);\\r\\n        \\r\\n        emit Deposit(msg.sender, depositId, user, nft, tokenIds, amounts, endTime);   \\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 depositId, address to) override external onlyExecutor {\\r\\n\\r\\n        require(deposits[msg.sender][depositId].tokenIds.length > 0, \\\"Invalid depositId\\\");\\r\\n\\r\\n        address nft = deposits[msg.sender][depositId].nftContract;\\r\\n        uint256[] memory tokenIds = deposits[msg.sender][depositId].tokenIds;\\r\\n        uint256[] memory amounts = deposits[msg.sender][depositId].amounts;\\r\\n\\r\\n        // update storage\\r\\n        delete deposits[msg.sender][depositId];\\r\\n\\r\\n        // transfer out nft\\r\\n        _transferNFTs(nft, address(this), to, tokenIds, amounts);\\r\\n\\r\\n        emit Withdraw(msg.sender, depositId, to, nft, tokenIds, amounts);   \\r\\n    }\\r\\n\\r\\n\\r\\n    // ============ Internal functions ============\\r\\n\\r\\n    /**\\r\\n     * @notice batch transfer NFTs (seller/winner <-> protocol)\\r\\n     * @param nft NFT contract address\\r\\n     * @param from sender\\r\\n     * @param to reciever\\r\\n     * @param tokenIds tokenId array\\r\\n     * @param amounts amounts array (ERC721 can be null)\\r\\n     */\\r\\n    function _transferNFTs(address nft, address from, address to, uint256[] memory tokenIds, uint256[] memory amounts) internal\\r\\n    {\\r\\n        require(nft != from && from != to, \\\"Invalid address\\\");\\r\\n\\r\\n        if (IERC165(nft).supportsInterface(ID_ERC721)) {\\r\\n            // transfer ERC721\\r\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n                IERC721(nft).transferFrom(from, to, tokenIds[i]);\\r\\n            }\\r\\n        } else if (IERC165(nft).supportsInterface(ID_ERC1155)) {\\r\\n            // transfer ERC1155\\r\\n            require(tokenIds.length == amounts.length, \\\"Invalid ids & amounts\\\");\\r\\n            IERC1155(nft).safeBatchTransferFrom(from, to, tokenIds, amounts, \\\"\\\");\\r\\n        } \\r\\n        else {\\r\\n            revert(\\\"Unsupport NFT\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    // ============ only Owner ============\\r\\n\\r\\n    /**\\r\\n     * @notice for enmergency case\\r\\n     * for user to redeem\\r\\n     * in case of cross chain withdraw suck nft, enable to redeem back to seller nft after endTime\\r\\n    */\\r\\n    function redeem(address executor, uint256 depositId, address to) override external onlyOwner {\\r\\n        \\r\\n        require(deposits[executor][depositId].tokenIds.length > 0, \\\"Invalid depositId\\\");\\r\\n        require(block.timestamp > deposits[executor][depositId].endTime, \\\"Not time to redeem\\\");\\r\\n        require(deposits[executor][depositId].user == to , \\\"Invalid redeem to\\\");\\r\\n\\r\\n        address nft = deposits[executor][depositId].nftContract;\\r\\n        uint256[] memory tokenIds = deposits[executor][depositId].tokenIds;\\r\\n        uint256[] memory amounts = deposits[executor][depositId].amounts;\\r\\n\\r\\n        // update storage\\r\\n        delete deposits[executor][depositId];\\r\\n\\r\\n        // transfer back nft to user\\r\\n        _transferNFTs(nft, address(this), to, tokenIds, amounts);\\r\\n\\r\\n        emit Redeem(msg.sender, depositId, to, nft, tokenIds, amounts);   \\r\\n    }\\r\\n\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n\\r\\n    /**\\r\\n    @notice set operator\\r\\n     */\\r\\n    function setExecutor(address executor) external onlyOwner {\\r\\n        executors[executor] = true;\\r\\n    }\\r\\n} \"\n    },\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IProxyNFTStation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct DepositNFT {\\r\\n    address user; // deposit user\\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] amounts; // support ERC1155\\r\\n    uint256 endTime; // Task end time\\r\\n}\\r\\n\\r\\ninterface IProxyNFTStation {\\r\\n\\r\\n    event Deposit(address indexed executor, uint256 depositId, address indexed user, address nft, uint256[] tokenIds, uint256[] amounts, uint256 endTime);\\r\\n    event Withdraw(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n    event Redeem(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n\\r\\n    function getNFT(address executor, uint256 depositId) external view returns(DepositNFT memory);\\r\\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) external payable returns (uint256 depositId);    \\r\\n    function withdraw(uint256 depositId, address to) external;    \\r\\n    function redeem(address executor, uint256 depositId, address to) external;    \\r\\n}\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/ProxyCryptoPunks.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// imports\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport {IProxyNFTStation, DepositNFT} from \\\"./interfaces/IProxyNFTStation.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./interfaces/ILucksHelper.sol\\\";\\r\\nimport \\\"./interfaces/IPunks.sol\\\";\\r\\n\\r\\ncontract ProxyCryptoPunks is IProxyNFTStation, Ownable {\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _depositIds;\\r\\n\\r\\n    // ============ Public  ============    \\r\\n\\r\\n    ILucksHelper public HELPER;\\r\\n\\r\\n    // OpenLuck executors\\r\\n    mapping(address => bool) public executors;\\r\\n\\r\\n    // store user deposited nfts, support multiple executors (executor-address => depositId => NFT)    \\r\\n    mapping(address => mapping(uint256 => DepositNFT)) public deposits;\\r\\n\\r\\n\\r\\n    modifier onlyExecutor() {\\r\\n        require(executors[msg.sender] == true, \\\"Lucks: onlyExecutor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ======== Constructor =========\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     * @param _executor address\\r\\n     */\\r\\n    constructor(address _executor, ILucksHelper _helper) {       \\r\\n       executors[_executor]= true;\\r\\n       HELPER = _helper;\\r\\n    }\\r\\n\\r\\n    // ============ Public functions ============\\r\\n\\r\\n    function getNFT(address executor, uint256 depositId) public view override returns(DepositNFT memory){\\r\\n        return deposits[executor][depositId];\\r\\n    }\\r\\n\\r\\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) override external payable onlyExecutor \\r\\n        returns(uint256 depositId) { \\r\\n\\r\\n        require(HELPER.isPunks(nft), \\\"Punks: not Punks\\\");\\r\\n\\r\\n        // transfer punks to this contract\\r\\n        // user need to offerPunkForSaleToAddress before createTask\\r\\n        IPunks punks = HELPER.getPunks();\\r\\n        \\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n\\r\\n            address holder = punks.punkIndexToAddress(tokenIds[i]);\\r\\n            require(holder == user, \\\"Punks: not owner of punkIndex\\\");\\r\\n\\r\\n            punks.buyPunk(tokenIds[i]);    \\r\\n        }     \\r\\n\\r\\n        // store deposit record\\r\\n        _depositIds.increment();\\r\\n        depositId = _depositIds.current();\\r\\n\\r\\n        deposits[msg.sender][depositId] = DepositNFT(user, nft, tokenIds, amounts, endTime);\\r\\n        \\r\\n        emit Deposit(msg.sender, depositId, user, nft, tokenIds, amounts, endTime);   \\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 depositId, address to) override external onlyExecutor {\\r\\n\\r\\n        require(deposits[msg.sender][depositId].tokenIds.length > 0, \\\"Invalid depositId\\\");\\r\\n\\r\\n        address nft = deposits[msg.sender][depositId].nftContract;\\r\\n        uint256[] memory tokenIds = deposits[msg.sender][depositId].tokenIds;\\r\\n        uint256[] memory amounts = deposits[msg.sender][depositId].amounts;\\r\\n\\r\\n        // update storage\\r\\n        delete deposits[msg.sender][depositId];\\r\\n\\r\\n        // transfer out nft\\r\\n        IPunks punks = HELPER.getPunks();\\r\\n      \\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            address holder = punks.punkIndexToAddress(tokenIds[i]);\\r\\n            require(holder == address(this), \\\"Punks: proxy is not owner\\\");\\r\\n\\r\\n            punks.transferPunk(to, tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        emit Withdraw(msg.sender, depositId, to, nft, tokenIds, amounts);   \\r\\n    }\\r\\n\\r\\n    \\r\\n    // ============ only Owner ============\\r\\n\\r\\n    /**\\r\\n     * @notice for enmergency case\\r\\n     * for user to redeem\\r\\n     * in case of cross chain withdraw suck nft, enable to redeem back to seller nft after endTime\\r\\n    */\\r\\n    function redeem(address executor, uint256 depositId, address to) override external onlyOwner {\\r\\n        \\r\\n        require(deposits[executor][depositId].tokenIds.length > 0, \\\"Invalid depositId\\\");\\r\\n        require(block.timestamp > deposits[executor][depositId].endTime, \\\"Not time to redeem\\\");\\r\\n        require(deposits[executor][depositId].user == to , \\\"Invalid redeem to\\\");\\r\\n\\r\\n        address nft = deposits[executor][depositId].nftContract;\\r\\n        uint256[] memory tokenIds = deposits[executor][depositId].tokenIds;\\r\\n        uint256[] memory amounts = deposits[executor][depositId].amounts;\\r\\n\\r\\n        // update storage\\r\\n        delete deposits[executor][depositId];\\r\\n\\r\\n        // transfer back nft to user\\r\\n        IPunks punks = HELPER.getPunks();\\r\\n      \\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            address holder = punks.punkIndexToAddress(tokenIds[i]);\\r\\n            require(holder == address(this), \\\"Punks: proxy is not owner\\\");\\r\\n\\r\\n            punks.transferPunk(to, tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        emit Redeem(msg.sender, depositId, to, nft, tokenIds, amounts);   \\r\\n    }\\r\\n\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n\\r\\n    function setExecutor(address executor) external onlyOwner {\\r\\n        executors[executor] = true;\\r\\n    }\\r\\n} \"\n    },\n    \"contracts/interfaces/ILucksHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksVRF} from \\\"./ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"./ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"./ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"./ILucksAuto.sol\\\";\\r\\nimport {IPunks} from \\\"./IPunks.sol\\\";\\r\\nimport {IProxyNFTStation} from \\\"./IProxyNFTStation.sol\\\";\\r\\n\\r\\ninterface ILucksHelper {\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\r\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\r\\n    function checkNFTContract(address addr) external view returns (bool);\\r\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\r\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\r\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\r\\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\r\\n    function isPunks(address nftContract) external view returns(bool);\\r\\n\\r\\n    function getProtocolFeeRecipient() external view returns (address);\\r\\n    function getProtocolFee() external view returns (uint256);\\r\\n    function getMinTargetLimit(address token) external view returns (uint256);\\r\\n    function getDrawDelay() external view returns (uint32);\\r\\n\\r\\n    function getVRF() external view returns (ILucksVRF);\\r\\n    function getGROUPS() external view returns (ILucksGroup);\\r\\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\\r\\n    function getAutoClose() external view returns (ILucksAuto);\\r\\n    function getAutoDraw() external view returns (ILucksAuto);\\r\\n\\r\\n    function getPunks() external view returns (IPunks);\\r\\n    function getProxyPunks() external view returns (IProxyNFTStation);\\r\\n\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/IPunks.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface for a permittable ERC721 contract\\r\\n * See https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC72 allowance (see {IERC721-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC721-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IPunks {\\r\\n  \\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  function punkIndexToAddress(uint256 punkIndex) external view returns (address owner);\\r\\n\\r\\n  function buyPunk(uint256 punkIndex) external;\\r\\n\\r\\n  function transferPunk(address to, uint256 punkIndex) external;\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/ILucksExecutor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\nstruct TaskInfo {\\r\\n    uint256 lastTID;\\r\\n    uint256 closeTime;\\r\\n    uint256 finalNo;\\r\\n}\\r\\n \\r\\nstruct UserState {\\r\\n    uint256 num; // user buyed tickets count\\r\\n    bool claimed;  // user claimed\\r\\n}\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint256 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);    \\r\\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\\r\\n\\r\\n    event TransferFee(uint256 taskId, address to, address token, uint256 amount); // for protocol\\r\\n    event TransferShareAmount(uint256 taskId, address to, address token, uint256 amount); // for winners\\r\\n    event TransferPayment(uint256 taskId, address to, address token, uint256 amount); // for seller\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\\r\\n    function isFail(uint256 taskId) external view returns(bool);\\r\\n    function getChainId() external view returns (uint16);\\r\\n    function getUserState(uint256 taskId, address user) external view returns(UserState memory);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function reCreateTask(uint256 taskId, TaskItem memory item, TaskExt memory ext) external payable;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/ILucksVRF.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILucksVRF {\\r\\n\\r\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\r\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \\r\\n\\r\\n    /**\\r\\n     * Requests randomness from a user-provided max\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\r\\n\\r\\n    /**\\r\\n     * Views random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\r\\n}\"\n    },\n    \"contracts/interfaces/ILucksGroup.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksGroup {    \\r\\n\\r\\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\\r\\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\\r\\n   \\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\\r\\n    function createGroup(uint256 taskId, uint16 seat) external;\\r\\n}\"\n    },\n    \"contracts/interfaces/ILucksPaymentStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface ILucksPaymentStrategy {\\r\\n    \\r\\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\\r\\n}\"\n    },\n    \"contracts/interfaces/ILucksAuto.sol\": {\n      \"content\": \"  // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);    \\r\\n    \\r\\n    event RevertInvoke(uint256 taskId, string reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function addTasks(uint256[] memory taskIds, uint[] memory endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\"\n    },\n    \"contracts/interfaces/ILucksBridge.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n    bytes zroPaymentAddr; //  the address of the ZRO token holder who would pay for the transaction\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n    \\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n    event InvokeFailed(uint64 nonce, string reason);\\r\\n\\r\\n    // ============= Task functions ====================\\r\\n\\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _refundAddress,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _refundAddress,\\r\\n        address payable _user,\\r\\n        address nftContract,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,\\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateCreateTaskFee(\\r\\n        uint16 _dstChainId,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateWithdrawNFTsFee(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        address nftContract,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n}\\r\\n\"\n    },\n    \"contracts/lucks/LucksHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskExt, TaskStatus} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"../interfaces/ILucksHelper.sol\\\";\\r\\nimport {ILucksVRF} from \\\"../interfaces/ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"../interfaces/ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"../interfaces/ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"../interfaces/ILucksAuto.sol\\\";\\r\\nimport {IPunks} from \\\"../interfaces/IPunks.sol\\\";\\r\\nimport {IProxyNFTStation} from \\\"../interfaces/IProxyNFTStation.sol\\\";\\r\\n\\r\\n/** @title Openluck LucksHelper.\\r\\n * @notice It is the contract for protocol settings\\r\\n */\\r\\ncontract LucksHelper is ILucksHelper, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    // ============ Openluck interfaces ============\\r\\n\\r\\n    ILucksExecutor public EXECUTOR;\\r\\n    ILucksVRF public VRF;\\r\\n    ILucksGroup public GROUPS;\\r\\n    ILucksPaymentStrategy public STRATEGY;  \\r\\n\\r\\n    ILucksAuto public AUTO_CLOSE;  \\r\\n    ILucksAuto public AUTO_DRAW;  \\r\\n    \\r\\n    IPunks public PUNKS;\\r\\n    IProxyNFTStation public PROXY_PUNKS; \\r\\n\\r\\n    address public feeRecipient;    // protocol fee recipient\\r\\n\\r\\n    uint32 public MAX_PER_JOIN_NUM = 10000;    // limit user per jointask num (default 10000), to avoid block fail and huge gas fee\\r\\n    uint32 public DRAW_DELAY_SEC = 120;    // picker winner need a delay time from task close. (default 120sec)\\r\\n    uint256 public protocolFee = 200;     // acceptToken (200 = 2%, 1,000 = 10%)\\r\\n\\r\\n    mapping(address => bool) public operators;     // protocol income balance (address => bool)\\r\\n    mapping(address => bool) public acceptTokens;   // accept payment tokens (Chain Token equals to zero address)     \\r\\n    mapping(address => uint256) public minTargetAmount;  // when seller create task, check the min targetAmount limit (token address => min amount)\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _acceptTokens,\\r\\n        address _recipient,\\r\\n        uint256 _fee,\\r\\n        ILucksExecutor  _executor,\\r\\n        ILucksVRF _vrf,\\r\\n        ILucksGroup _groups,\\r\\n        ILucksPaymentStrategy _strategy,\\r\\n        ILucksAuto _auto_close,\\r\\n        ILucksAuto _auto_draw        \\r\\n    ) {\\r\\n        feeRecipient = _recipient;\\r\\n        protocolFee = _fee;\\r\\n        EXECUTOR = _executor;\\r\\n        VRF = _vrf;        \\r\\n        GROUPS = _groups;\\r\\n        STRATEGY = _strategy;\\r\\n        AUTO_CLOSE = _auto_close;\\r\\n        AUTO_DRAW = _auto_draw;\\r\\n        setAcceptTokens(_acceptTokens, true);\\r\\n    }\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(msg.sender == owner() || operators[msg.sender], \\\"onlyOperator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getMinTargetLimit(address token) external view override returns (uint256) {\\r\\n        return minTargetAmount[token];\\r\\n    }\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) public view override returns (bool) {\\r\\n        return MAX_PER_JOIN_NUM < 1 || num <= MAX_PER_JOIN_NUM;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice check acceptToken support\\r\\n    @param acceptToken token address, blockchain token is address(0)\\r\\n    @return bool\\r\\n    */\\r\\n    function checkAcceptToken(address acceptToken)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return acceptTokens[acceptToken];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice check nft contract, support erc721 & erc1155\\r\\n     */\\r\\n    function checkNFTContract(address addr) public view override returns (bool) {\\r\\n        require(addr != address(0) && Address.isContract(addr), \\\"nft\\\");\\r\\n        require(            \\r\\n            isPunks(addr) || \\r\\n            IERC165(addr).supportsInterface(0x80ac58cd) ||  // ERC721 interfaceID\\r\\n            IERC165(addr).supportsInterface(0xd9b67a26), // ERC1155 interfaceID\\r\\n            \\\"Invalid contract\\\"\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice check the new task inputs\\r\\n     */\\r\\n    function checkNewTask(address user, TaskItem memory item) public view override returns(bool) { \\r\\n\\r\\n        require(item.seller != address(0) && item.seller == user, \\\"seller\\\");      \\r\\n        require(item.nftChainId > 0, \\\"nftChain\\\");       \\r\\n        require(item.tokenIds.length > 0, \\\"tokenIds\\\");\\r\\n        require(block.timestamp < item.endTime, \\\"endTime\\\");\\r\\n         require(item.endTime - block.timestamp > 84600 && item.endTime - block.timestamp < 2678400, \\\"duration\\\"); // at least 23.5 hour, 31 days limit\\r\\n        require(item.price > 0 && item.price < item.targetAmount && item.targetAmount.mod(item.price) == 0,\\\"price or targetAmount\\\");\\r\\n\\r\\n        uint num = item.targetAmount.div(item.price);\\r\\n        require(num > 0 && num <= 100000 && num.mod(10) == 0, \\\"num\\\");\\r\\n\\r\\n        require(item.amountCollected == 0, \\\"collect\\\");    \\r\\n       \\r\\n        // check nftContract\\r\\n        require(checkNFTContract(item.nftContract), \\\"nft\\\");\\r\\n        (bool checkState, string memory checkMsg) = checkTokenListing(item.nftContract, item.seller, item.tokenIds, item.tokenAmounts);\\r\\n        require(checkState, checkMsg);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkNewTaskExt(TaskExt memory ext) public pure override returns(bool) {\\r\\n        require(bytes(ext.title).length >=0 && bytes(ext.title).length <= 256, \\\"title\\\");\\r\\n        require(bytes(ext.note).length <= 256, \\\"note\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkNewTaskRemote(TaskItem memory item) public view override returns (bool) \\r\\n    {        \\r\\n        if (address(item.exclusiveToken.token) != address(0) && item.exclusiveToken.amount > 0) {\\r\\n            require(Address.isContract(item.exclusiveToken.token), \\\"exclusive\\\");\\r\\n        }       \\r\\n        require(checkAcceptToken(item.acceptToken), \\\"Unsupported acceptToken\\\");\\r\\n        uint256 minTarget = minTargetAmount[item.acceptToken];\\r\\n        require(minTarget == 0 || item.targetAmount >= minTarget, \\\"target\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) public view override returns(bool) {\\r\\n\\r\\n        require(bytes(note).length <= 256, \\\"Note too large\\\");\\r\\n        require(checkPerJoinLimit(num), \\\"Over join limit\\\");                \\r\\n        require(num > 0, \\\"num\\\");\\r\\n\\r\\n        TaskItem memory item = EXECUTOR.getTask(taskId);\\r\\n\\r\\n        require(item.seller != user, \\\"Not allow owner\\\");\\r\\n        require(block.timestamp >= item.startTime && block.timestamp <= item.endTime, \\\"endTime\\\");\\r\\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \\\"status\\\");\\r\\n\\r\\n        // Calculate number of TOKEN to this contract\\r\\n        uint256 amount = item.price.mul(num);\\r\\n        require(amount > 0, \\\"amount\\\");\\r\\n\\r\\n        // check Exclusive\\r\\n        if (address(item.exclusiveToken.token) != address(0) && item.exclusiveToken.amount > 0) {\\r\\n            require(\\r\\n                checkExclusive(user, address(item.exclusiveToken.token), item.exclusiveToken.amount),\\r\\n                \\\"Not pass EXCLUSIVE\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checking seller listing NFTs ownership and balance\\r\\n     * @param addr NFT contract address\\r\\n     * @param tokenIds tokenId array\\r\\n     * @param amounts tokenId amount array (ERC721 can be null)\\r\\n     */\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) public view override returns (bool, string memory)\\r\\n    {\\r\\n        if(isPunks(addr)){\\r\\n             for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n                address holder = PUNKS.punkIndexToAddress(tokenIds[i]);\\r\\n                if (holder != seller) {\\r\\n                    return (false, \\\"Token listed or not owner\\\");\\r\\n                }               \\r\\n            }           \\r\\n        }\\r\\n        else if (IERC165(addr).supportsInterface(0x80ac58cd)) {         // ERC721 interfaceID\\r\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n                if (IERC721(addr).ownerOf(tokenIds[i]) != seller) {\\r\\n                    return (false, \\\"Token listed or not owner\\\");\\r\\n                }               \\r\\n            }\\r\\n        } else if (IERC165(addr).supportsInterface(0xd9b67a26)) {  // ERC1155 interfaceID\\r\\n            require(tokenIds.length == amounts.length, \\\"Invalid ids len\\\");\\r\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n                if (!(IERC1155(addr).balanceOf(seller, tokenIds[i]) >= amounts[i] && amounts[i] > 0)) {\\r\\n                    return (false, \\\"amount or balance\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return (true ,\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function checkExclusive(address account, address token, uint256 amount) override public view returns (bool){\\r\\n        if (amount > 0 && Address.isContract(token)) {\\r\\n            if (IERC165(token).supportsInterface(0x80ac58cd)) {\\r\\n                return IERC721(token).balanceOf(account) >= amount;\\r\\n            }\\r\\n            return IERC20(token).balanceOf(account) >= amount;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isPunks(address nftContract) public override view returns(bool) {\\r\\n        if (address(PUNKS) == nftContract && address(PUNKS) != address(0)) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getProtocolFeeRecipient()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        return feeRecipient;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get protocol fee for eache success TaskItem payment, default is 2%\\r\\n    @return fee (200 = 25%, 1,000 = 10%)\\r\\n    */\\r\\n    function getProtocolFee() external view override returns (uint256) {\\r\\n        return protocolFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get Draw Delay second for security\\r\\n     */\\r\\n    function getDrawDelay() external view override returns (uint32) {\\r\\n        return DRAW_DELAY_SEC;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get ILucksVRF instance  \\r\\n    */\\r\\n    function getVRF() public view override returns (ILucksVRF) {\\r\\n        return VRF;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get ILucksGroup instance  \\r\\n    */\\r\\n    function getGROUPS() public view override returns (ILucksGroup) {\\r\\n        return GROUPS;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get ILucksPaymentStrategy instance  \\r\\n    */\\r\\n    function getSTRATEGY() public view override returns (ILucksPaymentStrategy) {\\r\\n        return STRATEGY;\\r\\n    }\\r\\n\\r\\n    function getAutoClose() external view override returns (ILucksAuto) {\\r\\n        return AUTO_CLOSE;\\r\\n    }\\r\\n\\r\\n    function getAutoDraw() external view override returns (ILucksAuto) {\\r\\n        return AUTO_DRAW;\\r\\n    }\\r\\n\\r\\n    function getPunks() external view override returns (IPunks) {\\r\\n        return PUNKS;\\r\\n    }\\r\\n\\r\\n    function getProxyPunks() external view override returns (IProxyNFTStation) {\\r\\n        return PROXY_PUNKS;\\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n\\r\\n    /**\\r\\n    @notice set operator\\r\\n     */\\r\\n    function setOperator(address addr, bool enable) external onlyOwner {\\r\\n        operators[addr] = enable;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set the ProtocolFeeRecipient\\r\\n     */\\r\\n    function setProtocolFeeRecipient(address addr) external onlyOwner {\\r\\n        feeRecipient = addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set protocol fee for eache success TaskItem payment, default is 5%\\r\\n    @param fee fee (500 = 5%, 1,000 = 10%)\\r\\n    */\\r\\n    function setProtocolFee(uint256 fee) external onlyOwner {\\r\\n        protocolFee = fee;\\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner & onlyOperator functions  ============\\r\\n\\r\\n    /**\\r\\n    @notice set the set MAX_PER_JOIN_NUM\\r\\n     */\\r\\n    function setJoinLimitNum(uint32 num) external onlyOperator {\\r\\n        MAX_PER_JOIN_NUM = num;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set Draw Delay for security\\r\\n     */\\r\\n    function setDrawDelay(uint32 second) external onlyOperator {\\r\\n        DRAW_DELAY_SEC = second;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set the acceptTokens\\r\\n     */\\r\\n    function setAcceptTokens(address[] memory tokens, bool enable)\\r\\n        public\\r\\n        onlyOperator\\r\\n    {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            acceptTokens[tokens[i]] = enable;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function setMinTargetAmount(address[] memory tokens, uint256[] memory amounts)\\r\\n        public\\r\\n        onlyOperator\\r\\n    {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            minTargetAmount[tokens[i]] = amounts[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set operator\\r\\n     */\\r\\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set the VRF\\r\\n     */\\r\\n    function setLucksVRF(ILucksVRF addr) external onlyOperator {\\r\\n        VRF = addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set the LucksGroup\\r\\n     */\\r\\n    function setLucksGroup(ILucksGroup addr) external onlyOperator {\\r\\n        GROUPS = addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set the PaymentStrategy\\r\\n     */\\r\\n    function setPaymentStrategy(ILucksPaymentStrategy addr) external onlyOperator {\\r\\n        STRATEGY = addr;\\r\\n    }\\r\\n\\r\\n    function setLucksAuto(ILucksAuto _auto_close, ILucksAuto _auto_draw) external onlyOperator {\\r\\n        AUTO_CLOSE = _auto_close;\\r\\n        AUTO_DRAW = _auto_draw;\\r\\n    }\\r\\n\\r\\n    function setPunks(IPunks punks, IProxyNFTStation proxyPunks) external onlyOperator {\\r\\n        PUNKS = punks;\\r\\n        PROXY_PUNKS = proxyPunks; \\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/lucks/LucksAutoTask.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\nimport {ILucksAuto,Task} from \\\"../interfaces/ILucksAuto.sol\\\";\\r\\nimport {lzTxObj} from \\\"../interfaces/ILucksBridge.sol\\\";\\r\\nimport \\\"../libraries/SortedLinkMap.sol\\\";\\r\\n\\r\\nabstract contract LucksAutoTask is ILucksAuto, Ownable, Pausable {\\r\\n\\r\\n    using SortedLinkMap for SortedLinkMap.SortedMap;    \\r\\n\\r\\n    SortedLinkMap.SortedMap internal taskList;\\r\\n    \\r\\n    uint256 public BATCH_PERFORM_LIMIT = 5; // perform limist, default 5\\r\\n    uint256 public DST_GAS_AMOUNT = 0; // layer zero dstGasAmount\\r\\n\\r\\n    address public KEEPER; // chainLink keeper Registry Address\\r\\n    ILucksExecutor public EXECUTOR;    \\r\\n\\r\\n    /**\\r\\n    * @param _keeperRegAddr The address of the keeper registry contract\\r\\n    * @param _executor The LucksExecutor contract\\r\\n    */\\r\\n    constructor(address _keeperRegAddr, ILucksExecutor _executor) {        \\r\\n        KEEPER = _keeperRegAddr;\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyKeeper() {\\r\\n        require(msg.sender == KEEPER || msg.sender == owner(), \\\"onlyKeeperRegistry\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyExecutor() {\\r\\n        require(msg.sender == address(EXECUTOR) || msg.sender == owner(), \\\"onlyExecutor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Receive funds\\r\\n    */\\r\\n    receive() external payable {\\r\\n        emit FundsAdded(msg.value, address(this).balance, msg.sender);\\r\\n    }\\r\\n\\r\\n    //  ============ Public  functions  ============\\r\\n\\r\\n    function size() external view returns(uint256) {\\r\\n        return taskList.count;\\r\\n    }\\r\\n\\r\\n    function first() external view returns(uint256) {\\r\\n        return taskList.first();\\r\\n    }\\r\\n\\r\\n    function last() external view returns(uint256) {\\r\\n        return taskList.last();\\r\\n    }\\r\\n\\r\\n    function prev(uint256 taskId) external view returns(uint256) {\\r\\n        return taskList.prev(taskId);\\r\\n    }   \\r\\n\\r\\n    function next(uint256 taskId) external view returns(uint256) {\\r\\n        return taskList.next(taskId);\\r\\n    }    \\r\\n\\r\\n    function get(uint256 taskId) external view returns(uint256) {\\r\\n        return taskList.nodes[taskId].value;\\r\\n    }\\r\\n\\r\\n    function top(uint256 num) external view returns(uint256[] memory) {\\r\\n        return taskList.top(num);\\r\\n    }\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external override onlyExecutor {    \\r\\n        if (taskId > 0 && endTime > 0) {            \\r\\n            taskList.add(taskId, endTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addTasks(uint256[] memory taskIds, uint[] memory endTimes) external override onlyExecutor {    \\r\\n        require(taskIds.length > 0 && taskIds.length == endTimes.length, \\\"Invalid len\\\");\\r\\n        for(uint i=0; i < taskIds.length; i++) {\\r\\n            if (taskIds[i] > 0 && endTimes[i] > 0) {            \\r\\n                taskList.add(taskIds[i], endTimes[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeTask(uint256 taskId) external override onlyExecutor {        \\r\\n        _removeTask(taskId);\\r\\n    }\\r\\n\\r\\n    function getQueueTasks() public override view virtual returns (uint256[] memory) {\\r\\n        \\r\\n        uint256[] memory ids = new uint256[](BATCH_PERFORM_LIMIT);\\r\\n\\r\\n        uint256 count = 0;\\r\\n        uint taskId = taskList.first();\\r\\n       \\r\\n        while (taskId > 0 && count < BATCH_PERFORM_LIMIT) {\\r\\n                  \\r\\n            if (taskList.nodes[taskId].value <= block.timestamp) {                \\r\\n                ids[count] = taskId;    \\r\\n                count++;                   \\r\\n            }else {\\r\\n                break;\\r\\n            }\\r\\n            taskId = taskList.next(taskId);           \\r\\n        }\\r\\n       \\r\\n        if (count != BATCH_PERFORM_LIMIT) {\\r\\n            assembly {\\r\\n                mstore(ids, count)\\r\\n            }\\r\\n        }\\r\\n        return ids;   \\r\\n    }\\r\\n\\r\\n    //  ============ internal  functions  ============\\r\\n\\r\\n    function _removeTask(uint256 taskId) internal {                \\r\\n        taskList.remove(taskId);\\r\\n    }\\r\\n\\r\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return '';\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    function invokeTasks(uint256[] memory _taskIds) internal virtual {       \\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n    \\r\\n    /**\\r\\n    * @notice Pauses the contrac t, which prevents executing performUpkeep\\r\\n    */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Unpauses the contract\\r\\n    */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Withdraws the contract balance\\r\\n    * @param amount The amount of eth (in wei) to withdraw\\r\\n    * @param payee The address to pay\\r\\n    */\\r\\n    function withdraw(uint256 amount, address payable payee) external onlyOwner {\\r\\n        require(payee != address(0));\\r\\n        emit FundsWithdrawn(amount, payee);\\r\\n        payee.transfer(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Sets the keeper registry address\\r\\n    */\\r\\n    function setKeeper(address _keeperRegAddr) public onlyOwner {\\r\\n        require(_keeperRegAddr != address(0));\\r\\n        emit KeeperRegistryAddressUpdated(KEEPER, _keeperRegAddr);\\r\\n        KEEPER = _keeperRegAddr;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setBatchPerformLimist(uint256 num) public onlyOwner {      \\r\\n        require(num > 0, \\\"Invalid limit num\\\");\\r\\n        BATCH_PERFORM_LIMIT = num;\\r\\n    }\\r\\n\\r\\n    function setDstGasAmount(uint256 amount) public onlyOwner {      \\r\\n        DST_GAS_AMOUNT = amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set operator\\r\\n     */\\r\\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/SortedLinkMap.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\nlibrary SortedLinkMap {\\r\\n\\r\\n    struct Item {        \\r\\n        uint id;\\r\\n        uint value;\\r\\n        uint leftId;\\r\\n    }\\r\\n\\r\\n    uint constant None = uint(0);\\r\\n\\r\\n    struct SortedMap {\\r\\n        uint count;\\r\\n        uint maxId;\\r\\n        mapping(uint => uint) keys; // id => id , linked list\\r\\n        mapping(uint => Item) nodes; // id => value item\\r\\n    }\\r\\n    \\r\\n    function add(SortedMap storage self, uint id, uint value) internal {                \\r\\n\\r\\n        require(id > 0, \\\"require id > 0\\\");\\r\\n        \\r\\n        if (self.nodes[id].value > 0){\\r\\n            // not allow duplicate key\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint leftId = findPrevByValue(self, value);\\r\\n        uint rightId = next(self, leftId);\\r\\n\\r\\n        // update prev item link\\r\\n        self.keys[leftId] = id;\\r\\n\\r\\n        // update current item\\r\\n        self.keys[id] = rightId;        \\r\\n        self.nodes[id] = Item(id, value, leftId);   \\r\\n\\r\\n        // update max item\\r\\n        if (rightId == None) {\\r\\n            self.maxId = id;\\r\\n        }        \\r\\n        else {\\r\\n            // upate next item link\\r\\n            self.nodes[rightId].leftId = id;   \\r\\n        }\\r\\n\\r\\n        // update counts\\r\\n        self.count ++;                    \\r\\n    }\\r\\n\\r\\n    function remove(SortedMap storage self, uint id) internal {\\r\\n\\r\\n        if (exists(self, id)) {\\r\\n\\r\\n            // get left and right\\r\\n            uint leftId = prev(self, id);\\r\\n            uint rightId = next(self, id);\\r\\n\\r\\n            self.keys[leftId] = rightId;\\r\\n\\r\\n            if (rightId > 0) {\\r\\n                self.nodes[rightId].leftId = leftId;\\r\\n            }\\r\\n\\r\\n            // update max item\\r\\n            if (rightId == None) {\\r\\n                self.maxId = leftId;\\r\\n            }   \\r\\n\\r\\n            delete self.nodes[id]; // remove value\\r\\n            delete self.keys[id]; // remove key\\r\\n\\r\\n            self.count --;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function exists(SortedMap storage self, uint id) internal view returns(bool) {\\r\\n        require(id > 0);\\r\\n        return self.nodes[id].value > 0;\\r\\n    }\\r\\n\\r\\n    function first(SortedMap storage self) internal view returns(uint) {\\r\\n        return next(self, 0);\\r\\n    }\\r\\n       \\r\\n    function last(SortedMap storage self) internal view returns(uint) {\\r\\n        return self.maxId;\\r\\n    }\\r\\n\\r\\n    function size(SortedMap storage self) internal view returns(uint) {\\r\\n        return self.count;\\r\\n    }\\r\\n\\r\\n    function findPrevByValue(SortedMap storage self, uint target) internal view returns(uint256) {  \\r\\n\\r\\n        require(target > 0, \\\"require target > 0\\\");\\r\\n\\r\\n        if (self.count == 0) return None;\\r\\n        \\r\\n        // try to match last item\\r\\n        uint lastId = self.maxId;        \\r\\n        uint lastValue = self.nodes[lastId].value;\\r\\n        if (target >= lastValue) {            \\r\\n            return lastId; // return max\\r\\n        }\\r\\n\\r\\n        // try to match first item\\r\\n        uint firstId = first(self);\\r\\n        uint firsValue = self.nodes[firstId].value;\\r\\n        if (target <= firsValue) {\\r\\n            return None;  // return head\\r\\n        }\\r\\n\\r\\n        uint mid = (firsValue + lastValue) >> 1;\\r\\n\\r\\n        if (target >= mid) {\\r\\n            // find prev item step by step (right to left)\\r\\n            uint curentId = lastId;\\r\\n            while (curentId > 0) {\\r\\n                curentId = prev(self, curentId);\\r\\n                if (curentId > 0 && target >= self.nodes[curentId].value) {\\r\\n                    return curentId;\\r\\n                }        \\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            // find next item step by step (left to right)\\r\\n            uint curentId = firstId;\\r\\n            while (curentId > 0) { // the lastId node is zero\\r\\n                curentId = next(self, curentId);\\r\\n                if (curentId > 0 && target >= self.nodes[curentId].value) {\\r\\n                    return curentId;\\r\\n                }        \\r\\n            }\\r\\n        }\\r\\n\\r\\n        return None;\\r\\n    }\\r\\n\\r\\n    function prev(SortedMap storage self, uint id) internal view returns(uint256) {\\r\\n        if (exists(self, id)) {\\r\\n            return self.nodes[id].leftId;\\r\\n        }  \\r\\n        return None;     \\r\\n    }\\r\\n\\r\\n    function next(SortedMap storage self, uint id) internal view returns(uint256) {\\r\\n        uint nextId = self.keys[id];\\r\\n        return nextId;\\r\\n    }  \\r\\n\\r\\n    function get(SortedMap storage self, uint id) internal view returns(Item memory) {\\r\\n        return self.nodes[id];\\r\\n    }  \\r\\n\\r\\n    function top(SortedMap storage self, uint num) internal view returns(uint[] memory){        \\r\\n        if(num > self.count) {\\r\\n            num = self.count;\\r\\n        }\\r\\n        if (num < 1) {\\r\\n            return new uint[](0);\\r\\n        }\\r\\n\\r\\n        uint[] memory items = new uint[](num);\\r\\n\\r\\n        uint curentId = first(self);\\r\\n        for(uint i=0; i < num; i++) {            \\r\\n            if (curentId > 0) {\\r\\n                items[i] = curentId;\\r\\n            }   \\r\\n            curentId = next(self, curentId);\\r\\n        }\\r\\n        \\r\\n        return items;\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/lucks/LucksAutoDrawTask.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Chainlink contracts\\r\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksBridge, lzTxObj} from \\\"../interfaces/ILucksBridge.sol\\\";\\r\\nimport \\\"./LucksAutoTask.sol\\\";\\r\\n\\r\\ncontract LucksAutoDrawTask is LucksAutoTask, KeeperCompatibleInterface {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint16 public immutable lzChainId;\\r\\n\\r\\n    ILucksBridge public BRIDGE;\\r\\n\\r\\n    // add a little more quote fee 0.000001\\r\\n    uint256 public QUOTE_FEE_ADD = 1000000000000;\\r\\n\\r\\n    /**\\r\\n    * @param _keeperRegAddr The address of the keeper registry contract\\r\\n    * @param _executor The LucksExecutor contract\\r\\n    * @param _bridge The LucksBridge contract\\r\\n    */\\r\\n    constructor(address _keeperRegAddr, ILucksExecutor _executor, ILucksBridge _bridge, uint16 _lzChainId) LucksAutoTask(_keeperRegAddr, _executor){        \\r\\n        DST_GAS_AMOUNT = 550000;\\r\\n        BRIDGE = _bridge;\\r\\n        lzChainId = _lzChainId;\\r\\n    }    \\r\\n\\r\\n    //  ============ internal  functions  ============\\r\\n\\r\\n    function invokeTasks(uint256[] memory _taskIds) internal override {\\r\\n\\r\\n        lzTxObj memory _lzTxObj = lzTxObj(DST_GAS_AMOUNT, 0, bytes(\\\"0x\\\"), bytes(\\\"0x\\\"));\\r\\n              \\r\\n        for (uint256 i = 0; i < _taskIds.length; i++) {\\r\\n\\r\\n            uint256 taskId = _taskIds[i];\\r\\n            _removeTask(taskId);\\r\\n\\r\\n            uint256 quoteLayerZeroFee = 0;\\r\\n            TaskItem memory item = EXECUTOR.getTask(taskId);\\r\\n            if (item.nftChainId != lzChainId) {\\r\\n                if (address(BRIDGE) != address(0)) {\\r\\n                    (quoteLayerZeroFee,) = BRIDGE.quoteLayerZeroFee(item.nftChainId, 2, \\\"\\\", _lzTxObj);\\r\\n                    quoteLayerZeroFee = quoteLayerZeroFee.add(QUOTE_FEE_ADD);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (address(this).balance < quoteLayerZeroFee) {\\r\\n                emit RevertInvoke(taskId, \\\"AutoDraw: not enough fees\\\");\\r\\n            }            \\r\\n            else {             \\r\\n\\r\\n                try EXECUTOR.pickWinner{value: quoteLayerZeroFee}(taskId, _lzTxObj){\\r\\n\\r\\n                } catch(bytes memory reason) {\\r\\n                    emit RevertInvoke(taskId, _getRevertMsg(reason));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //  ============ Keeper  functions  ============\\r\\n\\r\\n    function checkUpkeep(bytes calldata /* checkData */) external view override whenNotPaused returns (bool upkeepNeeded, bytes memory performData) {\\r\\n        uint256[] memory ids = getQueueTasks();\\r\\n        upkeepNeeded = ids.length > 0;\\r\\n        performData = abi.encode(ids);\\r\\n        return (upkeepNeeded, performData);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata performData) external override whenNotPaused onlyKeeper {\\r\\n        uint256[] memory ids = abi.decode(performData, (uint256[]));\\r\\n        invokeTasks(ids);\\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============      \\r\\n\\r\\n    /**\\r\\n    @notice set BRIDGE\\r\\n     */\\r\\n    function setBridge(ILucksBridge _bridge) external onlyOwner {\\r\\n        BRIDGE = _bridge;\\r\\n    }\\r\\n\\r\\n    function setQuoteFeeAdd(uint256 amount) external onlyOwner {\\r\\n        QUOTE_FEE_ADD = amount;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/KeeperBase.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\"\n    },\n    \"contracts/LucksExecutor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// imports\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskExt, TaskStatus, Ticket, TaskInfo, UserState } from \\\"./interfaces/ILucksExecutor.sol\\\";\\r\\nimport {IProxyNFTStation, DepositNFT} from \\\"./interfaces/IProxyNFTStation.sol\\\";\\r\\nimport {IProxyTokenStation} from \\\"./interfaces/IProxyTokenStation.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./interfaces/ILucksHelper.sol\\\";\\r\\nimport {ILucksBridge, lzTxObj} from \\\"./interfaces/ILucksBridge.sol\\\";\\r\\nimport {LucksValidator} from \\\"./libraries/LucksValidator.sol\\\";\\r\\n\\r\\n/** @title Openluck LucksTrade.\\r\\n * @notice It is the core contract for crowd funds to buy NFTs result to one lucky winner\\r\\n * randomness provided externally.\\r\\n */\\r\\ncontract LucksExecutor is ILucksExecutor, ReentrancyGuardUpgradeable, OwnableUpgradeable {    \\r\\n    using SafeMath for uint256;\\r\\n    using Arrays for uint256[];\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private ids;\\r\\n\\r\\n    // ============ Openluck interfaces ============\\r\\n    ILucksHelper public HELPER;    \\r\\n    IProxyNFTStation public NFT;\\r\\n    IProxyTokenStation public TOKEN;\\r\\n    ILucksBridge public BRIDGE;\\r\\n    \\r\\n    uint16 public lzChainId;\\r\\n    bool public isAllowTask; // this network allow running task or not (ethereum & Rinkeby not allow)\\r\\n\\r\\n    // ============ Public Mutable Storage ============\\r\\n\\r\\n    // VARIABLES    \\r\\n    mapping(uint256 => TaskItem) public tasks; // store tasks info by taskId    \\r\\n    mapping(uint256 => TaskInfo) public infos; // store task updated info (taskId=>TaskInfo)\\r\\n    mapping(uint256 => mapping(uint256 => Ticket)) public tickets; // store tickets (taskId => ticketId => ticket)    \\r\\n    mapping(uint256 => uint256[]) public ticketIds; // store ticket ids (taskId => lastTicketIds)             \\r\\n    mapping(address => mapping(uint256 => UserState)) public userState; // Keep track of user ticket ids for a given taskId (user => taskId => userstate)        \\r\\n\\r\\n    // ======== Constructor =========\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor / initialize\\r\\n     * @param _chainId layerZero chainId\\r\\n     * @param _allowTask allow running task\\r\\n     */\\r\\n    function initialize(uint16 _chainId, bool _allowTask) external initializer { \\r\\n        __ReentrancyGuard_init();\\r\\n        __Ownable_init();\\r\\n        lzChainId = _chainId;\\r\\n        isAllowTask = _allowTask;\\r\\n    }\\r\\n\\r\\n    //  ============ Modifiers  ============\\r\\n\\r\\n    // MODIFIERS\\r\\n    modifier isExists(uint256 taskId) {\\r\\n        require(exists(taskId), \\\"not exists\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Public functions ============\\r\\n\\r\\n    function count() public view override returns (uint256) {\\r\\n        return ids.current();\\r\\n    }\\r\\n\\r\\n    function exists(uint256 taskId) public view override returns (bool) {\\r\\n        return taskId > 0 && taskId <= ids.current();\\r\\n    }\\r\\n\\r\\n    function getTask(uint256 taskId) public view override returns (TaskItem memory) {\\r\\n        return tasks[taskId];\\r\\n    }\\r\\n\\r\\n    function getInfo(uint256 taskId) public view override returns (TaskInfo memory) {\\r\\n        return infos[taskId];\\r\\n    }\\r\\n    \\r\\n    function isFail(uint256 taskId) public view override returns(bool) {\\r\\n        return tasks[taskId].status == TaskStatus.Fail ||\\r\\n            (tasks[taskId].amountCollected < tasks[taskId].targetAmount && block.timestamp > tasks[taskId].endTime);\\r\\n    }\\r\\n\\r\\n    function getChainId() external view override returns (uint16) {\\r\\n        return lzChainId;\\r\\n    }\\r\\n\\r\\n    function getUserState(uint256 taskId, address user) external view override returns(UserState memory){\\r\\n        return userState[user][taskId];\\r\\n    }\\r\\n    \\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable override nonReentrant {\\r\\n        \\r\\n        require(lzChainId == item.nftChainId, \\\"chainId\\\"); // action must start from NFTChain   \\r\\n        require(address(NFT) != address(0), \\\"ProxyNFT\\\");\\r\\n\\r\\n        // inputs validation\\r\\n        LucksValidator.checkNewTask(msg.sender, item);\\r\\n        LucksValidator.checkNewTaskNFTs(msg.sender, item.nftContract, item.tokenIds, item.tokenAmounts, HELPER);\\r\\n        LucksValidator.checkNewTaskExt(ext);  \\r\\n\\r\\n        // adapt to CryptoPunks\\r\\n        if (HELPER.isPunks(item.nftContract)) {\\r\\n\\r\\n            item.depositId = HELPER.getProxyPunks().deposit(msg.sender, item.nftContract, item.tokenIds, item.tokenAmounts, item.endTime);\\r\\n        }\\r\\n        else {\\r\\n\\r\\n            // Transfer nfts to proxy station (NFTChain) \\r\\n            // in case of dst chain transection fail, enable user redeem nft back, after endTime            \\r\\n            item.depositId = NFT.deposit(msg.sender, item.nftContract, item.tokenIds, item.tokenAmounts, item.endTime);\\r\\n        }\\r\\n             \\r\\n        // Create Task Item           \\r\\n        if (ext.chainId == item.nftChainId) { // same chain creation              \\r\\n            _createTask(item, ext);\\r\\n        }\\r\\n        else {\\r\\n            // cross chain creation\\r\\n            require(address(BRIDGE) != address(0), \\\"Bridge unset\\\");\\r\\n            BRIDGE.sendCreateTask{value: msg.value}(ext.chainId, payable(msg.sender), item, ext, _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice Use the original NFTs to reCreateTask\\r\\n    Only if the task fails or can be cancelled\\r\\n    and the NFTs has not been claimed\\r\\n     */\\r\\n    function reCreateTask(uint256 taskId, TaskItem memory item, TaskExt memory ext) external payable override nonReentrant {\\r\\n        \\r\\n        LucksValidator.checkReCreateTask(tasks, userState, taskId, item, ext);\\r\\n       \\r\\n        // update originTask claim info\\r\\n        userState[tasks[taskId].seller][taskId].claimed = true;\\r\\n\\r\\n        // update task status\\r\\n        if (tasks[taskId].amountCollected > 0) {\\r\\n            tasks[taskId].status = TaskStatus.Fail; \\r\\n            emit CloseTask(taskId, msg.sender, tasks[taskId].status);\\r\\n        }\\r\\n        else {\\r\\n            tasks[taskId].status = TaskStatus.Cancel; \\r\\n            emit CancelTask(taskId, msg.sender);\\r\\n        }\\r\\n\\r\\n        // create new task\\r\\n        _createTask(item, ext);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice buyer join a task\\r\\n    num: how many ticket\\r\\n    */\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable override isExists(taskId) nonReentrant \\r\\n    {\\r\\n        // check inputs and task\\r\\n        LucksValidator.checkJoinTask(tasks[taskId], msg.sender, num, note, HELPER);\\r\\n\\r\\n        // Calculate number of TOKEN to this contract\\r\\n        uint256 amount = tasks[taskId].price.mul(num);\\r\\n\\r\\n        // deposit payment to token station.        \\r\\n        TOKEN.deposit{value: msg.value}(msg.sender, tasks[taskId].acceptToken, amount);\\r\\n\\r\\n        // create tickets\\r\\n        uint256 lastTID = _createTickets(taskId, num, msg.sender);\\r\\n\\r\\n        // update task item info\\r\\n        if (tasks[taskId].status == TaskStatus.Pending) {\\r\\n            tasks[taskId].status = TaskStatus.Open; \\r\\n        }\\r\\n        tasks[taskId].amountCollected = tasks[taskId].amountCollected.add(amount);\\r\\n\\r\\n        //if reach target amount, trigger to close task\\r\\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {\\r\\n            if (address(HELPER.getAutoClose()) != address(0)) {\\r\\n                HELPER.getAutoClose().addTask(taskId, tasks[taskId].endTime);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit JoinTask(taskId, msg.sender, amount, num, lastTID, note);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice seller cancel the task, only when task status equal to 'Pending' or no funds amount\\r\\n    */\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \\r\\n    {                                \\r\\n        require((tasks[taskId].status == TaskStatus.Pending || tasks[taskId].status == TaskStatus.Open) && infos[taskId].lastTID <= 0, \\\"Opening or canceled\\\");        \\r\\n        require(tasks[taskId].seller == msg.sender, \\\"Owner\\\"); // only seller can cancel\\r\\n        \\r\\n        // update status\\r\\n        tasks[taskId].status = TaskStatus.Close;\\r\\n        \\r\\n        _withdrawNFTs(taskId, payable(tasks[taskId].seller), true, _param);\\r\\n\\r\\n        emit CancelTask(taskId, msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice finish a Task, \\r\\n    case 1: reach target crowd amount, status success, and start to pick a winner\\r\\n    case 2: time out and not reach the target amount, status close, and returns funds to claimable pool\\r\\n    */\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \\r\\n    {        \\r\\n        require(tasks[taskId].status == TaskStatus.Open, \\\"Not Open\\\");\\r\\n        require(tasks[taskId].amountCollected >= tasks[taskId].targetAmount || block.timestamp > tasks[taskId].endTime, \\\"Not reach target or not expired\\\");\\r\\n\\r\\n        // mark operation time\\r\\n        infos[taskId].closeTime = block.timestamp;\\r\\n\\r\\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {    \\r\\n            // Reached task target        \\r\\n            // update task, Task Close & start to draw\\r\\n            tasks[taskId].status = TaskStatus.Close; \\r\\n\\r\\n            // Request a random number from the generator based on a seed(max ticket number)\\r\\n            HELPER.getVRF().reqRandomNumber(taskId, infos[taskId].lastTID);\\r\\n\\r\\n            // add to auto draw Queue\\r\\n            if (address(HELPER.getAutoDraw()) != address(0)) {\\r\\n                HELPER.getAutoDraw().addTask(taskId, block.timestamp + HELPER.getDrawDelay());\\r\\n            }\\r\\n\\r\\n            // cancel the auto close queue if seller open directly\\r\\n             if (msg.sender == tasks[taskId].seller && address(HELPER.getAutoClose()) != address(0)) {\\r\\n                HELPER.getAutoClose().removeTask(taskId);\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            // Task Fail & Expired\\r\\n            // update task\\r\\n            tasks[taskId].status = TaskStatus.Fail; \\r\\n\\r\\n            // NFTs back to seller            \\r\\n            _withdrawNFTs(taskId, payable(tasks[taskId].seller), false, _param);                            \\r\\n        }\\r\\n\\r\\n        emit CloseTask(taskId, msg.sender, tasks[taskId].status);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice start to picker a winner via chainlink VRF\\r\\n    */\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant\\r\\n    {                \\r\\n        require(tasks[taskId].status == TaskStatus.Close, \\\"Not Close\\\");\\r\\n         \\r\\n        // get drawn number from Chainlink VRF\\r\\n        uint32 finalNo = HELPER.getVRF().viewRandomResult(taskId);\\r\\n        require(finalNo > 0, \\\"Not Drawn\\\");\\r\\n        require(finalNo <= infos[taskId].lastTID, \\\"finalNo\\\");\\r\\n\\r\\n        // find winner by drawn number\\r\\n        Ticket memory ticket = _findWinner(taskId, finalNo);    \\r\\n        require(ticket.number > 0, \\\"Lost winner\\\");\\r\\n        \\r\\n        // update store item\\r\\n        tasks[taskId].status = TaskStatus.Success;    \\r\\n        infos[taskId].finalNo = ticket.number;          \\r\\n        \\r\\n        // withdraw NFTs to winner (maybe cross chain)         \\r\\n        _withdrawNFTs(taskId, payable(ticket.owner), true, _param);\\r\\n\\r\\n        // dispatch Payment\\r\\n        _payment(taskId, ticket.owner);    \\r\\n        \\r\\n        emit PickWinner(taskId, ticket.owner, finalNo);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim tokens back \\r\\n    */\\r\\n    function claimTokens(uint256[] memory taskIds) override external nonReentrant\\r\\n    {\\r\\n        for (uint256 i = 0; i < taskIds.length; i++) {\\r\\n            _claimToken(taskIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim NFTs back (cross-chain case)\\r\\n    */\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) override external payable nonReentrant\\r\\n    {  \\r\\n        for (uint256 i = 0; i < taskIds.length; i++) {\\r\\n            _claimNFTs(taskIds[i], _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Remote(destination) functions ============\\r\\n    \\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) override external {\\r\\n        require(msg.sender == address(BRIDGE) || msg.sender == owner(), \\\"Executor: onlyBridge\\\");\\r\\n        if (functionType == 1) { //TYPE_CREATE_TASK\\r\\n            (, TaskItem memory item, TaskExt memory ext) = abi.decode(_payload, (uint256, TaskItem, TaskExt));             \\r\\n\\r\\n            _createTask(item, ext);\\r\\n                    \\r\\n        } else if (functionType == 2) { //TYPE_WITHDRAW_NFT\\r\\n            (, address user, address nftContract, uint256 depositId) = abi.decode(_payload, (uint8, address, address, uint256));                        \\r\\n            _doWithdrawNFTs(depositId, nftContract, user);\\r\\n        }\\r\\n    }    \\r\\n\\r\\n    // ============ Internal functions ============\\r\\n\\r\\n    function _createTask(TaskItem memory item, TaskExt memory ext) internal \\r\\n    {        \\r\\n        require(isAllowTask, \\\"Not allow\\\");\\r\\n        LucksValidator.checkNewTaskRemote(item, HELPER);  \\r\\n\\r\\n        //create TaskId\\r\\n        ids.increment();\\r\\n        uint256 taskId = ids.current();\\r\\n\\r\\n        // start now\\r\\n        if (item.status == TaskStatus.Open) {\\r\\n            item.startTime = item.startTime < block.timestamp ? item.startTime : block.timestamp;\\r\\n        } else {\\r\\n            require(block.timestamp <= item.startTime && item.startTime < item.endTime, \\\"endTime\\\");\\r\\n            // start in future\\r\\n            item.status = TaskStatus.Pending;\\r\\n        }\\r\\n\\r\\n        //store taskItem\\r\\n        tasks[taskId] = item;\\r\\n\\r\\n        emit CreateTask(taskId, item, ext);\\r\\n    }\\r\\n\\r\\n    function _createTickets(uint256 taskId, uint32 num, address buyer) internal returns (uint256) \\r\\n    {\\r\\n        uint256 start = infos[taskId].lastTID.add(1);\\r\\n        uint256 lastTID = start.add(num).sub(1);\\r\\n\\r\\n        tickets[taskId][lastTID] = Ticket(lastTID, num, buyer);\\r\\n        ticketIds[taskId].push(lastTID);\\r\\n\\r\\n        userState[buyer][taskId].num += num;\\r\\n        infos[taskId].lastTID = lastTID;\\r\\n\\r\\n        emit CreateTickets(taskId, buyer, num, start, lastTID);\\r\\n        return lastTID;\\r\\n    }\\r\\n\\r\\n    function _findWinner(\\r\\n        uint256 taskId, \\r\\n        uint32 number\\r\\n        ) internal view returns (Ticket memory)\\r\\n    {\\r\\n        // find by ticketId\\r\\n        Ticket memory ticket = tickets[taskId][number];\\r\\n\\r\\n        if (ticket.number == 0) {\\r\\n\\r\\n            uint256 idx = ticketIds[taskId].findUpperBound(number);\\r\\n            uint256 lastTID = ticketIds[taskId][idx];\\r\\n            ticket = tickets[taskId][lastTID];\\r\\n        }\\r\\n\\r\\n        return ticket;\\r\\n    }\\r\\n\\r\\n    function _claimToken(uint256 taskId) internal isExists(taskId)\\r\\n    {\\r\\n        TaskItem storage item = tasks[taskId];\\r\\n        require(isFail(taskId), \\\"Not Fail\\\");\\r\\n        require(userState[msg.sender][taskId].claimed == false, \\\"Claimed\\\");\\r\\n\\r\\n        // Calculate the funds buyer payed\\r\\n        uint256 amount = item.price.mul(userState[msg.sender][taskId].num);\\r\\n        \\r\\n        // update claim info\\r\\n        userState[msg.sender][taskId].claimed = true;\\r\\n        \\r\\n        // Transfer\\r\\n        _transferOut(item.acceptToken, msg.sender, amount);\\r\\n\\r\\n        emit ClaimToken(taskId, msg.sender, amount, item.acceptToken);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _claimNFTs(uint256 taskId, lzTxObj memory _param) internal isExists(taskId)\\r\\n    {\\r\\n        address seller = tasks[taskId].seller;\\r\\n        require(isFail(taskId), \\\"Not Fail\\\");\\r\\n        require(userState[seller][taskId].claimed == false, \\\"Claimed\\\");\\r\\n        \\r\\n        // update claim info\\r\\n        userState[seller][taskId].claimed = true;\\r\\n        \\r\\n        // withdraw NFTs to winner (maybe cross chain)     \\r\\n        _withdrawNFTs(taskId, payable(seller), true, _param);\\r\\n\\r\\n        emit ClaimNFT(taskId, seller, tasks[taskId].nftContract, tasks[taskId].tokenIds);\\r\\n    }\\r\\n\\r\\n    function _withdrawNFTs(uint256 taskId, address payable user, bool enableCrossChain, lzTxObj memory _param) internal\\r\\n    {\\r\\n        if (lzChainId == tasks[taskId].nftChainId) { // same chain    \\r\\n\\r\\n           _doWithdrawNFTs(tasks[taskId].depositId, tasks[taskId].nftContract, user);\\r\\n            \\r\\n        }\\r\\n        else if (enableCrossChain){ // cross chain            \\r\\n            BRIDGE.sendWithdrawNFTs{value: msg.value}(tasks[taskId].nftChainId, payable(msg.sender), user,tasks[taskId].nftContract, tasks[taskId].depositId, _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _doWithdrawNFTs(uint256 depositId, address nftContract, address user) internal {\\r\\n       \\r\\n        // adapt to CryptoPunks\\r\\n        if (HELPER.isPunks(nftContract)) {\\r\\n             HELPER.getProxyPunks().withdraw(depositId, user);\\r\\n        }\\r\\n        else {\\r\\n            NFT.withdraw(depositId, user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice transfer protocol fee and funds\\r\\n     * @param taskId taskId\\r\\n     * @param winner winner address\\r\\n     * paymentStrategy for winner share is up to 50% (500 = 5%, 5,000 = 50%)\\r\\n     */\\r\\n    function _payment(uint256 taskId, address winner) internal\\r\\n    {\\r\\n        // inner variables\\r\\n        address acceptToken = tasks[taskId].acceptToken;\\r\\n\\r\\n        // Calculate amount to seller\\r\\n        uint256 collected = tasks[taskId].amountCollected;\\r\\n        uint256 sellerAmount = collected;\\r\\n\\r\\n        // 1. Calculate protocol fee\\r\\n        uint256 fee = (collected.mul(HELPER.getProtocolFee())).div(10000);\\r\\n        address feeRecipient = HELPER.getProtocolFeeRecipient();\\r\\n        require(fee >= 0, \\\"fee\\\");\\r\\n        sellerAmount = sellerAmount.sub(fee);\\r\\n\\r\\n        // 2. Calculate winner share amount with payment stragey (up to 50%)\\r\\n        uint256 winnerAmount = 0;\\r\\n        uint256 winnerShare = 0;\\r\\n        uint256[] memory splitShare;\\r\\n        address[] memory splitAddr;\\r\\n        if (tasks[taskId].paymentStrategy > 0) {\\r\\n            (winnerShare, splitShare, splitAddr) = HELPER.getSTRATEGY().viewPaymentShares(tasks[taskId].paymentStrategy, winner, taskId);\\r\\n            require(winnerShare >= 0 && winnerShare <= 5000, \\\"strategy\\\");\\r\\n            require(splitShare.length <= 10, \\\"splitShare\\\"); // up to 10 splitter\\r\\n            if (winnerShare > 0) {\\r\\n                winnerAmount = (collected.mul(winnerShare)).div(10000);\\r\\n                sellerAmount = sellerAmount.sub(winnerAmount);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // 3. transfer funds\\r\\n\\r\\n        // transfer protocol fee\\r\\n        _transferOut(acceptToken, feeRecipient, fee);\\r\\n        emit TransferFee(taskId, feeRecipient, acceptToken, fee);     \\r\\n\\r\\n        // transfer winner share\\r\\n        if (winnerAmount > 0) {\\r\\n            if (splitShare.length > 0 && splitShare.length == splitAddr.length) {  \\r\\n                // split winner share for strategy case\\r\\n                uint256 splited = 10000;                \\r\\n                for (uint i=0; i < splitShare.length; i++) {   \\r\\n                    // make sure spliter cannot overflow\\r\\n                    if ((splited.sub(splitShare[i])) >=0 && splitShare[i] > 0) { \\r\\n                        uint256 splitAmount = (winnerAmount.mul(splitShare[i]).div(10000));\\r\\n                        _transferOut(acceptToken, splitAddr[i], splitAmount);\\r\\n                        splited = splited.sub(splitShare[i]);\\r\\n\\r\\n                        emit TransferShareAmount(taskId, splitAddr[i], acceptToken, splitAmount); \\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (splited > 0) {\\r\\n                    // if there's a remainder of splitShare, give it to the seller\\r\\n                    sellerAmount = sellerAmount.add((winnerAmount.mul(splited).div(10000)));\\r\\n                }\\r\\n            }\\r\\n            else {                \\r\\n                _transferOut(acceptToken, winner, winnerAmount);\\r\\n\\r\\n                emit TransferShareAmount(taskId, winner, acceptToken, winnerAmount); \\r\\n            }\\r\\n        }    \\r\\n\\r\\n        // transfer funds to seller\\r\\n        _transferOut(acceptToken, tasks[taskId].seller, sellerAmount);  \\r\\n\\r\\n        emit TransferPayment(taskId, tasks[taskId].seller, acceptToken, sellerAmount);                    \\r\\n    }\\r\\n\\r\\n    function _transferOut(address token, address to, uint256 amount) internal {        \\r\\n        TOKEN.withdraw(to, token, amount);\\r\\n    }    \\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n\\r\\n    function setAllowTask(bool enable) external onlyOwner {\\r\\n        isAllowTask = enable;\\r\\n    }\\r\\n\\r\\n    function setLucksHelper(ILucksHelper addr) external onlyOwner {\\r\\n        HELPER = addr;\\r\\n    }\\r\\n\\r\\n    function setBridgeAndProxy(ILucksBridge _bridge, IProxyTokenStation _token, IProxyNFTStation _nft) external onlyOwner {\\r\\n\\r\\n        require(address(_bridge) != address(0x0), \\\"BRIDGE\\\");\\r\\n        if (isAllowTask) {\\r\\n            require(address(_token) != address(0x0), \\\"TOKEN\\\");\\r\\n        }\\r\\n        require(address(_nft) != address(0x0), \\\"NFT\\\");\\r\\n\\r\\n        BRIDGE = _bridge;\\r\\n        TOKEN = _token;\\r\\n        NFT = _nft;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Arrays.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IProxyTokenStation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IProxyTokenStation {\\r\\n\\r\\n    event Deposit(address indexed executor, address indexed user, address token, uint256 amount);\\r\\n    event Withdraw(address indexed executor, address indexed user, address token, uint256 amount);\\r\\n\\r\\n    function deposit(address user, address token, uint256 amount) external payable;\\r\\n    function withdraw(address user, address token, uint256 amount) external;\\r\\n}\"\n    },\n    \"contracts/libraries/LucksValidator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt, TaskStatus, UserState} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"../interfaces/ILucksHelper.sol\\\";\\r\\n\\r\\nlibrary LucksValidator {\\r\\n    \\r\\n    using SafeMath for uint256;   \\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    /**\\r\\n     * @notice check the new task inputs\\r\\n     */\\r\\n    function checkNewTask(address user, TaskItem memory item) internal view returns(bool) { \\r\\n\\r\\n        require(item.seller != address(0) && item.seller == user, \\\"seller\\\");      \\r\\n        require(item.nftChainId > 0, \\\"nftChain\\\");       \\r\\n        require(item.tokenIds.length > 0, \\\"tokenIds\\\");\\r\\n        require(block.timestamp < item.endTime, \\\"endTime\\\");\\r\\n        require(item.endTime - block.timestamp > 84600 && item.endTime - block.timestamp < 2678400, \\\"duration\\\"); // at least 23.5 hour, 31 days limit\\r\\n        require(item.price > 0 && item.price < item.targetAmount && item.targetAmount.mod(item.price) == 0,\\\"price or targetAmount\\\");\\r\\n\\r\\n        uint num = item.targetAmount.div(item.price);\\r\\n        require(num > 0 && num <= 100000 && num.mod(10) == 0, \\\"num\\\");\\r\\n\\r\\n        require(item.amountCollected == 0, \\\"collect\\\");        \\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkNewTaskNFTs(address seller, address nft, uint256[] memory tokenIds, uint256[] memory amounts,ILucksHelper HELPER) internal view {\\r\\n        // check nftContract\\r\\n        require(HELPER.checkNFTContract(nft), \\\"nft\\\");\\r\\n        (bool checkState, string memory checkMsg) = HELPER.checkTokenListing(nft, seller, tokenIds, amounts);\\r\\n        require(checkState, checkMsg);\\r\\n    }\\r\\n\\r\\n    function checkNewTaskExt(TaskExt memory ext) internal pure returns(bool) {\\r\\n        require(bytes(ext.title).length >=0 && bytes(ext.title).length <= 256, \\\"title\\\");\\r\\n        require(bytes(ext.note).length <= 256, \\\"note\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkNewTaskRemote(TaskItem memory item, ILucksHelper HELPER) internal view returns (bool) \\r\\n    {        \\r\\n        if (address(item.exclusiveToken.token) != address(0) && item.exclusiveToken.amount > 0) {\\r\\n            require(item.exclusiveToken.token.isContract(), \\\"exclusive\\\");\\r\\n        }       \\r\\n        require(HELPER.checkAcceptToken(item.acceptToken), \\\"Unsupported acceptToken\\\");\\r\\n        uint256 minTarget = HELPER.getMinTargetLimit(item.acceptToken);\\r\\n        require(minTarget == 0 || item.targetAmount >= minTarget, \\\"target\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkReCreateTask(       \\r\\n        mapping(uint256 => TaskItem) storage tasks,\\r\\n        mapping(address => mapping(uint256 => UserState)) storage userState,         \\r\\n        uint256 taskId,\\r\\n        TaskItem memory item, \\r\\n        TaskExt memory ext\\r\\n        ) \\r\\n        internal view {\\r\\n\\r\\n        TaskItem storage task = tasks[taskId];\\r\\n\\r\\n        require(task.seller == msg.sender, \\\"owner\\\"); // only seller\\r\\n\\r\\n        bool canReCreate = false;\\r\\n\\r\\n        // checking state\\r\\n\\r\\n        if((task.status == TaskStatus.Fail || (task.amountCollected < task.targetAmount && block.timestamp > task.endTime))\\r\\n            && (userState[task.seller][taskId].claimed == false)) {\\r\\n            // can Claim\\r\\n            canReCreate = true;\\r\\n        }else if((task.status == TaskStatus.Pending || task.status == TaskStatus.Open) && task.amountCollected == 0) {\\r\\n            // can Cancel\\r\\n            canReCreate = true;\\r\\n        }     \\r\\n\\r\\n        require(canReCreate, \\\"state\\\");\\r\\n      \\r\\n        // checking inputs\\r\\n        require(task.nftChainId == item.nftChainId, \\\"nftChain\\\"); // action must start from NFTChain   \\r\\n        require(task.nftContract == item.nftContract, \\\"nft\\\");\\r\\n        require(keccak256(abi.encodePacked(task.tokenIds)) == keccak256(abi.encodePacked(item.tokenIds)), \\\"tokenIds\\\");\\r\\n        require(keccak256(abi.encodePacked(task.tokenAmounts)) == keccak256(abi.encodePacked(item.tokenAmounts)), \\\"tokenAmounts\\\");\\r\\n        require(task.seller == item.seller, \\\"owner\\\");\\r\\n        require(task.depositId == item.depositId, \\\"depositId\\\");\\r\\n                \\r\\n        checkNewTask(msg.sender, item);\\r\\n        checkNewTaskExt(ext);\\r\\n    }\\r\\n\\r\\n    function checkJoinTask(\\r\\n        TaskItem storage item,\\r\\n        address user, \\r\\n        uint32 num, \\r\\n        string memory note, \\r\\n        ILucksHelper HELPER) internal view returns(bool) {\\r\\n\\r\\n        require(bytes(note).length <= 256, \\\"Note len\\\");\\r\\n        require(HELPER.checkPerJoinLimit(num), \\\"Join limit\\\");                \\r\\n        require(num > 0, \\\"num\\\");\\r\\n\\r\\n        require(item.seller != user, \\\"Not owner\\\");\\r\\n        require(block.timestamp >= item.startTime && block.timestamp <= item.endTime, \\\"endTime\\\");\\r\\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \\\"status\\\");\\r\\n\\r\\n        // Calculate number of TOKEN to this contract\\r\\n        uint256 amount = item.price.mul(num);\\r\\n        require(amount > 0, \\\"amount\\\");\\r\\n\\r\\n        // check Exclusive\\r\\n        if (address(item.exclusiveToken.token) != address(0) && item.exclusiveToken.amount > 0) {\\r\\n            require(\\r\\n                checkExclusive(user, address(item.exclusiveToken.token), item.exclusiveToken.amount),\\r\\n                \\\"Exclusive\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function checkExclusive(address account, address token, uint256 amount) internal view returns (bool){\\r\\n        if (amount > 0 && token.isContract()) {\\r\\n            if (IERC165(token).supportsInterface(0x80ac58cd)) {\\r\\n                return IERC721(token).balanceOf(account) >= amount;\\r\\n            }\\r\\n            return IERC20(token).balanceOf(account) >= amount;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/ILucksRewards.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksRewards {        \\r\\n\\r\\n    event RewardCreateTask(address seller, uint256 taskId);\\r\\n    event RewardJoinTask(address user, uint256 taskId, address acceptToken, uint256 amount);\\r\\n    event RewardTaskSucess(uint256 taskId);\\r\\n    event RewardTaskFail(uint256 taskId);   \\r\\n\\r\\n    function getInviter(address invitee) view external returns (address);\\r\\n    function invite(address invitee, address inviter) external;\\r\\n\\r\\n    function rewardCreateTask(address seller, uint256 taskId) external;\\r\\n    function rewardJoinTask(address user, uint256 taskId, address acceptToken, uint256 amount) external;\\r\\n    function rewardTaskSucess(uint256 taskId) external;\\r\\n    function rewardTaskFail(uint256 taskId) external;   \\r\\n\\r\\n}\"\n    },\n    \"contracts/lucks/LucksRewards.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksRewards} from \\\"../interfaces/ILucksRewards.sol\\\";\\r\\nimport {Ticket} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksRewards\\r\\n * @notice It is the contract for LucksRewards\\r\\n */\\r\\ncontract LucksRewards is ILucksRewards {\\r\\n\\r\\n    using Counters for Counters.Counter;    \\r\\n\\r\\n    ILucksExecutor public EXECUTOR;\\r\\n\\r\\n    address public OpenLuckToken;\\r\\n\\r\\n    mapping(address => address) private inviters;     // store invite relationship (invitee => inviter)\\r\\n    mapping(address => uint256) private inviteNums;    // store invter fans count (inviter => invitee count)\\r\\n    \\r\\n    constructor(address _executor, address _token) {\\r\\n        EXECUTOR =  ILucksExecutor(_executor);        \\r\\n        OpenLuckToken = _token;\\r\\n    }\\r\\n\\r\\n    function getInviter(address invitee) override view public returns (address) {\\r\\n        return inviters[invitee];\\r\\n    }\\r\\n\\r\\n    function invite(address invitee, address inviter) override public {\\r\\n        require(inviters[invitee] == address(0), \\\"Already invite\\\");\\r\\n        inviters[invitee] = inviter;\\r\\n        inviteNums[inviter] += 1;\\r\\n    }\\r\\n\\r\\n    function rewardCreateTask(address seller, uint256 taskId) override public {\\r\\n        emit RewardCreateTask(seller, taskId);\\r\\n    }\\r\\n\\r\\n    function rewardJoinTask(address user, uint256 taskId, address acceptToken, uint256 amount) override public {\\r\\n        emit RewardJoinTask(user, taskId, acceptToken, amount);\\r\\n    }\\r\\n\\r\\n    function rewardTaskSucess(uint256 taskId) override public {\\r\\n        emit RewardTaskSucess(taskId);\\r\\n    }\\r\\n\\r\\n    function rewardTaskFail(uint256 taskId) override public {\\r\\n        emit RewardTaskFail(taskId);\\r\\n    } \\r\\n}\"\n    },\n    \"contracts/LucksBridge.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\n// imports\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"layerzero-contracts/contracts/lzApp/NonblockingLzApp.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"./interfaces/ILucksExecutor.sol\\\";\\r\\nimport \\\"./interfaces/ILucksBridge.sol\\\";\\r\\n\\r\\ncontract LucksBridge is NonblockingLzApp, ILucksBridge {\\r\\n    using SafeMath for uint256;\\r\\n    //---------------------------------------------------------------------------\\r\\n    // CONSTANTS\\r\\n    uint8 internal constant TYPE_CREATE_TASK = 1;\\r\\n    uint8 internal constant TYPE_WITHDRAW_NFT = 2;\\r\\n\\r\\n    //---------------------------------------------------------------------------\\r\\n    // VARIABLES\\r\\n    mapping(uint16 => mapping(uint8 => uint256)) public gasLookup;\\r\\n    ILucksExecutor public EXECUTOR;\\r\\n    bool public useLayerZeroToken;\\r\\n\\r\\n    // add a little more quote fee 0.000001\\r\\n    uint256 public QUOTE_FEE_ADD = 1000000000000;\\r\\n\\r\\n    //---------------------------------------------------------------------------\\r\\n    // MODIFIERS\\r\\n    modifier onlyExecutor() {\\r\\n        require(msg.sender == address(EXECUTOR), \\\"Lucks: caller must be LucksExecutor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _lzEndpoint, address _executor) NonblockingLzApp(_lzEndpoint) {\\r\\n        require(_executor != address(0x0), \\\"Lucks: _executor cannot be 0x0\\\");\\r\\n        EXECUTOR = ILucksExecutor(_executor);\\r\\n    }\\r\\n\\r\\n    // main method\\r\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\r\\n        uint8 functionType;\\r\\n        assembly {\\r\\n            functionType := mload(add(_payload, 32))\\r\\n        }\\r\\n\\r\\n        // invoke executor\\r\\n        EXECUTOR.onLzReceive(functionType, _payload);\\r\\n    }\\r\\n\\r\\n    // ============ EXTERNAL functions ============\\r\\n    // estimateSendFee\\r\\n\\r\\n    function quoteLayerZeroFee(uint16 _dstChainId, uint8 _functionType, string memory _note, lzTxObj memory _lzTxParams) \\r\\n        external view override returns (uint256 nativeFee, uint256 zroFee) {\\r\\n        bytes memory payload = \\\"\\\";\\r\\n        uint256[] memory amounts = new uint256[](2);\\r\\n        amounts[0] = 10000;\\r\\n        amounts[1] = 10000;\\r\\n\\r\\n        if (_functionType == TYPE_CREATE_TASK) {\\r\\n            TaskItem memory item = TaskItem(\\r\\n                address(0),\\r\\n                0,\\r\\n                address(0),\\r\\n                amounts,\\r\\n                amounts,\\r\\n                address(0),\\r\\n                TaskStatus.Open,\\r\\n                block.timestamp,\\r\\n                block.timestamp,\\r\\n                1000e18,\\r\\n                1e18,\\r\\n                1,\\r\\n                ExclusiveToken(address(0), 1e18),\\r\\n                0,\\r\\n                10000\\r\\n            );\\r\\n            TaskExt memory ext = TaskExt(1, \\\"nft collection item title\\\", _note);\\r\\n\\r\\n            payload = abi.encode(TYPE_CREATE_TASK, item, ext);\\r\\n\\r\\n        } else if (_functionType == TYPE_WITHDRAW_NFT) {\\r\\n\\r\\n            payload = abi.encode(TYPE_WITHDRAW_NFT, address(0), 10000);\\r\\n\\r\\n        } else {\\r\\n            revert(\\\"Lucks: unsupported function type\\\");\\r\\n        }\\r\\n\\r\\n        bytes memory lzTxParamBuilt = _txParamBuilder( _dstChainId, _functionType, _lzTxParams);\\r\\n        (nativeFee,zroFee) = lzEndpoint.estimateFees(_dstChainId, address(this), payload, useLayerZeroToken, lzTxParamBuilt);\\r\\n        nativeFee = nativeFee.add(QUOTE_FEE_ADD);\\r\\n    }\\r\\n\\r\\n    function estimateCreateTaskFee(uint16 _dstChainId, TaskItem memory item, TaskExt memory ext, lzTxObj memory _lzTxParams) \\r\\n        external view override returns (uint256 nativeFee, uint256 zroFee) {\\r\\n        bytes memory payload = abi.encode(TYPE_CREATE_TASK, item, ext);\\r\\n        bytes memory lzTxParamBuilt = _txParamBuilder(_dstChainId, TYPE_CREATE_TASK, _lzTxParams);\\r\\n        (nativeFee,zroFee) = lzEndpoint.estimateFees(_dstChainId, address(this), payload, useLayerZeroToken, lzTxParamBuilt);\\r\\n        nativeFee = nativeFee.add(QUOTE_FEE_ADD);\\r\\n    }\\r\\n\\r\\n    function estimateWithdrawNFTsFee(uint16 _dstChainId, address payable _user, address nftContract, uint256 depositId, lzTxObj memory _lzTxParams) \\r\\n        external view override returns (uint256 nativeFee, uint256 zroFee) {\\r\\n        bytes memory payload = abi.encode(TYPE_WITHDRAW_NFT, _user, nftContract, depositId);\\r\\n        bytes memory lzTxParamBuilt = _txParamBuilder(_dstChainId, TYPE_WITHDRAW_NFT, _lzTxParams);\\r\\n        (nativeFee,zroFee) = lzEndpoint.estimateFees(_dstChainId, address(this), payload, useLayerZeroToken,lzTxParamBuilt);\\r\\n        nativeFee = nativeFee.add(QUOTE_FEE_ADD);\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public override onlyOwner {}\\r\\n\\r\\n    // ============  LOCAL CHAIN (send out message to destination chain)============\\r\\n\\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _refundAddress,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable override onlyExecutor {\\r\\n        bytes memory payload = abi.encode(TYPE_CREATE_TASK, item, ext);\\r\\n        _call(_dstChainId, TYPE_CREATE_TASK, _refundAddress, _lzTxParams, payload);\\r\\n    }\\r\\n\\r\\n    function sendWithdrawNFTs(\\r\\n        uint16 _dstChainId,        \\r\\n        address payable _refundAddress,\\r\\n        address payable _user,\\r\\n        address nftContract,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable override onlyExecutor {\\r\\n        bytes memory payload = abi.encode(TYPE_WITHDRAW_NFT, _user, nftContract, depositId);\\r\\n        _call(_dstChainId, TYPE_WITHDRAW_NFT, _refundAddress, _lzTxParams, payload);\\r\\n    }\\r\\n\\r\\n    // ============ onlyOwner functions ============\\r\\n\\r\\n    function setGasAmount(uint16 _dstChainId, uint8 _functionType, uint256 _gasAmount) external onlyOwner {\\r\\n        require(\\r\\n            _functionType >= 1 && _functionType <= 4,\\r\\n            \\\"Lucks: invalid _functionType\\\"\\r\\n        );\\r\\n        gasLookup[_dstChainId][_functionType] = _gasAmount;\\r\\n    }\\r\\n\\r\\n    // ============ INTERNAL functions ============\\r\\n\\r\\n    function txParamBuilderType1(uint256 _gasAmount) internal pure returns (bytes memory) {\\r\\n        uint16 txType = 1;\\r\\n        return abi.encodePacked(txType, _gasAmount);\\r\\n    }\\r\\n\\r\\n    function txParamBuilderType2(uint256 _gasAmount, uint256 _dstNativeAmount, bytes memory _dstNativeAddr) internal pure returns (bytes memory) {\\r\\n        uint16 txType = 2;\\r\\n        return abi.encodePacked(txType, _gasAmount, _dstNativeAmount,_dstNativeAddr);\\r\\n    }\\r\\n\\r\\n    function _txParamBuilder(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _type,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) internal view returns (bytes memory) {\\r\\n        bytes memory lzTxParam;\\r\\n        address dstNativeAddr;\\r\\n        {\\r\\n            bytes memory dstNativeAddrBytes = _lzTxParams.dstNativeAddr;\\r\\n            assembly {\\r\\n                dstNativeAddr := mload(add(dstNativeAddrBytes, 20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 totalGas = gasLookup[_dstChainId][_type].add(_lzTxParams.dstGasForCall);\\r\\n        if (_lzTxParams.dstNativeAmount > 0 && dstNativeAddr != address(0x0)) {\\r\\n            lzTxParam = txParamBuilderType2(totalGas, _lzTxParams.dstNativeAmount, _lzTxParams.dstNativeAddr);\\r\\n        } else {\\r\\n            lzTxParam = txParamBuilderType1(totalGas);\\r\\n        }\\r\\n\\r\\n        return lzTxParam;\\r\\n    }\\r\\n\\r\\n    function _call(\\r\\n        uint16 _dstChainId, // dst chainId\\r\\n        uint8 _type, // function type\\r\\n        address payable _refundAddress, // _user refundAddress\\r\\n        lzTxObj memory _lzTxParams,\\r\\n        bytes memory _payload\\r\\n    ) internal {\\r\\n        bytes memory _adapterParams = _txParamBuilder(_dstChainId, _type, _lzTxParams);\\r\\n        address zroPaymentAddr;\\r\\n        {\\r\\n            bytes memory zroPaymentAddrBytes = _lzTxParams.zroPaymentAddr;\\r\\n            assembly {\\r\\n                zroPaymentAddr := mload(add(zroPaymentAddrBytes, 20))\\r\\n            }\\r\\n        }\\r\\n        _lzSend(_dstChainId, _payload, _refundAddress, zroPaymentAddr, _adapterParams);\\r\\n\\r\\n        uint64 nextNonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\\r\\n        emit SendMsg(_type, nextNonce);\\r\\n    }\\r\\n\\r\\n    // ============ onlyOwner ============\\r\\n\\r\\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n\\r\\n    function setUseLayerZeroToken(bool enable) external onlyOwner {\\r\\n        useLayerZeroToken = enable;\\r\\n    }\\r\\n\\r\\n    function setQuoteFeeAdd(uint256 amount) external onlyOwner {\\r\\n        QUOTE_FEE_ADD = amount;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\n    },\n    \"layerzero-contracts/contracts/lzApp/NonblockingLzApp.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./LzApp.sol\\\";\\r\\n\\r\\n/*\\r\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\r\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\r\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\r\\n */\\r\\nabstract contract NonblockingLzApp is LzApp {\\r\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\r\\n\\r\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\r\\n\\r\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\\r\\n\\r\\n    // overriding the virtual function in LzReceiver\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\r\\n        // try-catch all errors/exceptions\\r\\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\r\\n            // do nothing\\r\\n        } catch {\\r\\n            // error / exception\\r\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\r\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual {\\r\\n        // only internal transaction\\r\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    //@notice override this function\\r\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public payable virtual {\\r\\n        // assert there is message to retry\\r\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\r\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\r\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\r\\n        // clear the stored message\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\r\\n        // execute the message. revert if it fails again\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"layerzero-contracts/contracts/lzApp/LzApp.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\r\\n\\r\\n/*\\r\\n * a generic LzReceiver implementation\\r\\n */\\r\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\r\\n\\r\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\r\\n\\r\\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\r\\n\\r\\n    constructor(address _endpoint) {\\r\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual override {\\r\\n        // lzReceive must be called by the endpoint for security\\r\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\r\\n\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\r\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\r\\n        require(_srcAddress.length == trustedRemote.length && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\r\\n\\r\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\r\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\r\\n        lzEndpoint.send{value: msg.value}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    //---------------------------UserApplication config----------------------------------------\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\r\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\r\\n    }\\r\\n\\r\\n    // generic config for LayerZero user Application\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\r\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setSendVersion(_version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setReceiveVersion(_version);\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\r\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // allow owner to set it multiple times.\\r\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyOwner {\\r\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\r\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\r\\n\\r\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\r\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\r\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"layerzero-contracts/contracts/interfaces/ILayerZeroReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\\r\\n\"\n    },\n    \"layerzero-contracts/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\\r\\n\"\n    },\n    \"layerzero-contracts/contracts/interfaces/ILayerZeroEndpoint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\\r\\n\"\n    },\n    \"layerzero-contracts/contracts/token/oft/OFTCore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../lzApp/NonblockingLzApp.sol\\\";\\r\\nimport \\\"./IOFTCore.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\nabstract contract OFTCore is NonblockingLzApp, ERC165, IOFTCore {\\r\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\r\\n        // mock the payload for send()\\r\\n        bytes memory payload = abi.encode(_toAddress, _amount);\\r\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\\r\\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\r\\n        // decode and load the toAddress\\r\\n        (bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (bytes, uint));\\r\\n        address toAddress;\\r\\n        assembly {\\r\\n            toAddress := mload(add(toAddressBytes, 20))\\r\\n        }\\r\\n\\r\\n        _creditTo(_srcChainId, toAddress, amount);\\r\\n\\r\\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, amount, _nonce);\\r\\n    }\\r\\n\\r\\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\r\\n        _debitFrom(_from, _dstChainId, _toAddress, _amount);\\r\\n\\r\\n        bytes memory payload = abi.encode(_toAddress, _amount);\\r\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n\\r\\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\\r\\n        emit SendToChain(_from, _dstChainId, _toAddress, _amount, nonce);\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual;\\r\\n\\r\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual;\\r\\n}\\r\\n\"\n    },\n    \"layerzero-contracts/contracts/token/oft/IOFTCore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the IOFT core standard\\r\\n */\\r\\ninterface IOFTCore is IERC165 {\\r\\n    /**\\r\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\r\\n     * _dstChainId - L0 defined chain id to send tokens too\\r\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\r\\n     * _amount - amount of the tokens to transfer\\r\\n     * _useZro - indicates to use zro to pay L0 fees\\r\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\r\\n     */\\r\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    /**\\r\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\r\\n     * `_from` the owner of token\\r\\n     * `_dstChainId` the destination chain identifier\\r\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\r\\n     * `_amount` the quantity of tokens in wei\\r\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\r\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\r\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\r\\n     */\\r\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev returns the circulating amount of tokens on current chain\\r\\n     */\\r\\n    function circulatingSupply() external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\r\\n     * `_nonce` is the outbound nonce\\r\\n     */\\r\\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _amount, uint64 _nonce);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\r\\n     * `_nonce` is the inbound nonce.\\r\\n     */\\r\\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _amount, uint64 _nonce);\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"layerzero-contracts/contracts/token/oft/OFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"./OFTCore.sol\\\";\\r\\nimport \\\"./IOFT.sol\\\";\\r\\n\\r\\n// override decimal() function is needed\\r\\ncontract OFT is OFTCore, ERC20, IOFT {\\r\\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC20(_name, _symbol) OFTCore(_lzEndpoint) {}\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\\r\\n        return interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function circulatingSupply() public view virtual override returns (uint) {\\r\\n        return totalSupply();\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override {\\r\\n        address spender = _msgSender();\\r\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\r\\n        _burn(_from, _amount);\\r\\n    }\\r\\n\\r\\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\\r\\n        _mint(_toAddress, _amount);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"layerzero-contracts/contracts/token/oft/IOFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IOFTCore.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the OFT standard\\r\\n */\\r\\ninterface IOFT is IOFTCore, IERC20 {\\r\\n\\r\\n}\\r\\n\"\n    },\n    \"layerzero-contracts/contracts/token/oft/extension/BasedOFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../OFT.sol\\\";\\r\\n\\r\\ncontract BasedOFT is OFT {\\r\\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) OFT(_name, _symbol, _lzEndpoint) {}\\r\\n\\r\\n    function circulatingSupply() public view virtual override returns (uint) {\\r\\n        unchecked {\\r\\n            return totalSupply() - balanceOf(address(this));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override {\\r\\n        address spender = _msgSender();\\r\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\r\\n        _transfer(_from, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\\r\\n        _transfer(address(this), _toAddress, _amount);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/token/OpenLuckToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"layerzero-contracts/contracts/token/oft/extension/BasedOFT.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\n\\r\\ncontract OpenLuckToken is BasedOFT, Pausable {\\r\\n\\r\\n    uint256 public immutable SUPPLY_CAP;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     * @param _lzEndpoint _lzEndpoint address\\r\\n     * @param _premintReceiver address that receives the premint\\r\\n     * @param _premintAmount amount to premint\\r\\n     * @param _cap supply cap (to prevent abusive mint)\\r\\n     */\\r\\n    constructor(\\r\\n        address _lzEndpoint,\\r\\n        address _premintReceiver,\\r\\n        uint256 _premintAmount,\\r\\n        uint256 _cap\\r\\n    ) BasedOFT(\\\"OpenLuckToken\\\", \\\"LUCK\\\", _lzEndpoint) {    \\r\\n        require(_cap > _premintAmount, \\\"Cap limit\\\");  \\r\\n        _mint(_premintReceiver, _premintAmount);\\r\\n        SUPPLY_CAP = _cap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint tokens\\r\\n     * @param account address to receive tokens\\r\\n     * @param amount amount to mint\\r\\n     * @return status true if mint is successful, false if not\\r\\n     */\\r\\n    function mint(address account, uint256 amount) external onlyOwner returns (bool status) {\\r\\n        if (totalSupply() + amount <= SUPPLY_CAP) {\\r\\n            _mint(account, amount);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual override whenNotPaused {\\r\\n        super._debitFrom(_from, _dstChainId, _toAddress, _amount);\\r\\n    }\\r\\n\\r\\n    function pauseSendTokens(bool pause) external onlyOwner {\\r\\n        pause ? _pause() : _unpause();\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/token/OpenLuckOFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"layerzero-contracts/contracts/token/oft/OFT.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\n\\r\\ncontract OpenLuckOFT is OFT, Pausable {\\r\\n\\r\\n    constructor(address _lzEndpoint) OFT(\\\"OpenLuckToken\\\", \\\"LUCK\\\", _lzEndpoint) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual override whenNotPaused {\\r\\n        super._debitFrom(_from, _dstChainId, _toAddress, _amount);\\r\\n    }\\r\\n\\r\\n    function pauseSendTokens(bool pause) external onlyOwner {\\r\\n        pause ? _pause() : _unpause();\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/interfaces/IWrappedPunks.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for a permittable ERC721 contract\\r\\n * See https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC72 allowance (see {IERC721-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC721-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IWrappedPunks is IERC721 {\\r\\n  function punkContract() external view returns (address);\\r\\n\\r\\n  function mint(uint256 punkIndex) external;\\r\\n\\r\\n  function burn(uint256 punkIndex) external;\\r\\n\\r\\n  function registerProxy() external;\\r\\n\\r\\n  function proxyInfo(address user) external returns (address proxy);\\r\\n}\\r\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/ProxyTokenStation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// imports\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport {IProxyTokenStation} from \\\"./interfaces/IProxyTokenStation.sol\\\";\\r\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\r\\n\\r\\ncontract ProxyTokenStation is IProxyTokenStation, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // ============ Public  ============    \\r\\n\\r\\n    uint public GAS_LIMIT = 100000;\\r\\n   \\r\\n    // OpenLuck executors\\r\\n    mapping(address => bool) public executors;\\r\\n\\r\\n    // support multiple executors (executor-address => token address => amount)    \\r\\n    mapping(address => mapping(address => uint256)) public deposits;\\r\\n\\r\\n    address public WETH;\\r\\n   \\r\\n    modifier onlyExecutor() {\\r\\n        require(executors[msg.sender] == true, \\\"Lucks: onlyExecutor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ======== Constructor =========\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     * @param _executor executor address\\r\\n     */\\r\\n    constructor(address _executor, address _weth) {\\r\\n        executors[_executor] = true;\\r\\n        WETH = _weth;\\r\\n    }\\r\\n\\r\\n    // ============ external functions ============\\r\\n\\r\\n    function deposit(address user, address token, uint256 amount) override external payable onlyExecutor {\\r\\n        \\r\\n        _deposit(msg.sender, user, token, amount);\\r\\n        \\r\\n        emit Deposit(msg.sender, user, token, amount);        \\r\\n    }\\r\\n\\r\\n    function withdraw(address user, address token, uint256 amount) override external onlyExecutor {\\r\\n\\r\\n        _withdraw(msg.sender, user, token, amount);\\r\\n\\r\\n        emit Withdraw(msg.sender, user, token, amount);   \\r\\n    }\\r\\n\\r\\n    // ============ Internal functions ============\\r\\n\\r\\n    function _deposit(address executor, address user, address token, uint256 amount) internal {\\r\\n        //zero address means Chain Navite Token, support ETH+WETH\\r\\n         if (token == address(0)) { \\r\\n            // allow ETH+WETH\\r\\n            uint256 wrapTokenAmount = amount.sub(msg.value);\\r\\n            require(wrapTokenAmount >= 0, \\\"deposit: Msg.value too high\\\");\\r\\n            if (wrapTokenAmount > 0) {\\r\\n                require(address(WETH) != address(0), \\\"wrapp token not set or msg.value too small\\\");\\r\\n                require(IERC20(WETH).balanceOf(user) >= wrapTokenAmount, \\\"Insufficient balance\\\");\\r\\n                require(IERC20(WETH).allowance(user, address(this)) >= wrapTokenAmount, \\\"Insufficient allowance\\\");       \\r\\n                // Transfer WETH to this contract\\r\\n                IERC20(WETH).transferFrom(user, address(this), wrapTokenAmount);\\r\\n                // transfer WETH to ETH\\r\\n                IWETH(WETH).withdraw(wrapTokenAmount);\\r\\n\\r\\n            }\\r\\n            \\r\\n        } else {\\r\\n            require(IERC20(token).balanceOf(user) >= amount, \\\"Insufficient token balance\\\");\\r\\n            require(IERC20(token).allowance(user, address(this)) >= amount, \\\"Insufficient token allowance\\\");\\r\\n            // Transfer tokens to this contract\\r\\n            IERC20(token).transferFrom(user, address(this), amount);\\r\\n        }\\r\\n\\r\\n        // update deposits balance\\r\\n        deposits[executor][token] = deposits[executor][token].add(amount);\\r\\n    }\\r\\n\\r\\n    function _withdraw(address executor, address user, address token, uint256 amount) internal {\\r\\n        \\r\\n        require(user != address(0) && user != address(this), \\\"Invalid address\\\");\\r\\n        require(amount > 0, \\\"amount\\\");\\r\\n        require(deposits[executor][token] >= amount, \\\"Insufficient deposited balance for this executor\\\");\\r\\n\\r\\n        // update deposits balance\\r\\n        deposits[executor][token] = deposits[executor][token].sub(amount);\\r\\n\\r\\n        // transfer\\r\\n        if (token == address(0)) {    \\r\\n            require(address(this).balance >= amount, \\\"Lack of funds\\\");  \\r\\n\\r\\n            // transfer funds \\r\\n            if (Address.isContract(user)) {\\r\\n                (bool state,) = address(user).call{ value: amount, gas: GAS_LIMIT}(\\\"\\\");\\r\\n                require(state, \\\"send value failed\\\");                \\r\\n            }\\r\\n            else {\\r\\n                payable(user).transfer(amount);  \\r\\n            }                  \\r\\n\\r\\n        } else {        \\r\\n            require(IERC20(token).balanceOf(address(this)) >= amount, \\\"Lack of token\\\");\\r\\n            // Transfer tokens                \\r\\n            IERC20(token).transfer(user, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set operator\\r\\n     */\\r\\n    function setExecutor(address executor) external onlyOwner {\\r\\n        executors[executor] = true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice set IWETH\\r\\n     */\\r\\n    function setWETH(address _eth) external onlyOwner {\\r\\n        WETH = _eth;\\r\\n    }\\r\\n\\r\\n    function setGasLimit(uint amount) external onlyOwner {\\r\\n        GAS_LIMIT = amount;\\r\\n    }\\r\\n} \"\n    },\n    \"contracts/interfaces/IWETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GNU\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address dst, uint256 wad) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\"\n    },\n    \"contracts/interfaces/IOpenLuckToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IOpenLuckToken is IERC20 {\\r\\n    \\r\\n    function SUPPLY_CAP() external view returns (uint256);\\r\\n\\r\\n    function mint(address account, uint256 amount) external returns (bool);\\r\\n}\"\n    },\n    \"contracts/tests/TokenUSDT.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n// Just for local testing\\r\\ncontract TokenUSDT is ERC20 {\\r\\n\\r\\n    constructor()\\r\\n        ERC20('TokenUSDT', 'USDT')\\r\\n    {}\\r\\n    \\r\\n    function mint(address to, uint256 amount) public {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/TokenUSDC.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n// Just for local testing\\r\\ncontract TokenUSDC is ERC20 {\\r\\n\\r\\n    constructor()\\r\\n        ERC20('TokenUSDC', 'USDC')\\r\\n    {}\\r\\n    \\r\\n    function mint(address to, uint256 amount) public {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/TokenERC20ETH.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n// Just for local testing\\r\\ncontract TokenERC20ETH is ERC20 {\\r\\n\\r\\n    constructor()\\r\\n        ERC20('TokenETH', 'ETH')\\r\\n    {}\\r\\n    \\r\\n    function mint(address to, uint256 amount) public {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/TokenBUSD.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n// Just for local testing\\r\\ncontract TokenBUSD is ERC20 {\\r\\n\\r\\n    constructor()\\r\\n        ERC20('TokenBUSD', 'BUSD')\\r\\n    {}\\r\\n    \\r\\n    function mint(address to, uint256 amount) public {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/mocks/MockToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ncontract MockToken is ERC20 {\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_\\r\\n    ) ERC20(name_, symbol_) {\\r\\n        _mint(msg.sender, 1000000000 * (10**decimals_));\\r\\n    }\\r\\n\\r\\n    bool paused;\\r\\n\\r\\n    function mint(address _to, uint256 _amount) public {\\r\\n        _mint(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        // need to mock some failed transfer events\\r\\n        require(!paused, \\\"Failed transfer due to pause\\\");\\r\\n\\r\\n        return super.transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        // need to mock some failed transfer events\\r\\n        require(!paused, \\\"Failed transfer due to pause\\\");\\r\\n        return super.transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function pauseTransfers(bool _paused) external {\\r\\n        paused = _paused;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/tests/NFTs/WatcherMinter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\n\\r\\ncontract WatcherMinter is ERC1155 {\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    string public contractURI =\\r\\n        \\\"QmdqrVASguJRJHAzbfys3xdfbhLCTyKogGNyQiDQeNSgss\\\";\\r\\n\\r\\n    bytes32 public OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\r\\n    bytes32 public ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n\\r\\n    mapping(uint256 => string) public tokenURI;\\r\\n    mapping(address => bool) public isAdmin;\\r\\n\\r\\n    address public owner;\\r\\n    address payable public royaltyAddress =\\r\\n        payable(0x21ff1ac88a4A7c07C7573132f976D05B259632EE);\\r\\n\\r\\n    constructor() ERC1155(\\\"\\\") {\\r\\n        name = \\\"Frontier\\\";\\r\\n        symbol = \\\"FRONTIER\\\";\\r\\n\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier adminOnly() {\\r\\n        require(msg.sender == owner || isAdmin[msg.sender] == true);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier ownerOnly() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addAdmin(address _address) external ownerOnly {\\r\\n        isAdmin[_address] = true;\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _amount\\r\\n    ) external adminOnly {\\r\\n        _mint(_to, _id, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function mintBatch(\\r\\n        address _to,\\r\\n        uint256[] memory _ids,\\r\\n        uint256[] memory _amounts\\r\\n    ) external adminOnly {\\r\\n        _mintBatch(_to, _ids, _amounts, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _id, uint256 _amount) external {\\r\\n        _burn(msg.sender, _id, _amount);\\r\\n    }\\r\\n\\r\\n    function burnBatch(uint256[] memory _ids, uint256[] memory _amounts)\\r\\n        external\\r\\n    {\\r\\n        _burnBatch(msg.sender, _ids, _amounts);\\r\\n    }\\r\\n\\r\\n    function burnForMint(\\r\\n        address _from,\\r\\n        uint256[] memory _burnIds,\\r\\n        uint256[] memory _burnAmounts,\\r\\n        uint256[] memory _mintIds,\\r\\n        uint256[] memory _mintAmounts\\r\\n    ) external adminOnly {\\r\\n        _burnBatch(_from, _burnIds, _burnAmounts);\\r\\n        _mintBatch(_from, _mintIds, _mintAmounts, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function setURI(uint256 _id, string memory _uri) external adminOnly {\\r\\n        require(bytes(tokenURI[_id]).length == 0);\\r\\n        tokenURI[_id] = _uri;\\r\\n\\r\\n        emit URI(_uri, _id);\\r\\n    }\\r\\n\\r\\n    function uri(uint256 _id) public view override returns (string memory) {\\r\\n        return tokenURI[_id];\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/mocks/LZEndpointMock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"layerzero-contracts/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"layerzero-contracts/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\r\\n\\r\\n/*\\r\\nmocking multi endpoint connection.\\r\\n- send() will short circuit to lzReceive() directly\\r\\n- no reentrancy guard. the real LayerZero endpoint on main net has a send and receive guard, respectively.\\r\\nif we run a ping-pong-like application, the recursive call might use all gas limit in the block.\\r\\n- not using any messaging library, hence all messaging library func, e.g. estimateFees, version, will not work\\r\\n*/\\r\\ncontract LZEndpointMock is ILayerZeroEndpoint {\\r\\n    mapping(address => address) public lzEndpointLookup;\\r\\n\\r\\n    uint16 public mockChainId;\\r\\n    address payable public mockOracle;\\r\\n    address payable public mockRelayer;\\r\\n    uint public mockBlockConfirmations;\\r\\n    uint16 public mockLibraryVersion;\\r\\n    uint public mockStaticNativeFee;\\r\\n    uint16 public mockLayerZeroVersion;\\r\\n    uint public nativeFee;\\r\\n    uint public zroFee;\\r\\n    bool nextMsgBLocked;\\r\\n\\r\\n    struct StoredPayload {\\r\\n        uint64 payloadLength;\\r\\n        address dstAddress;\\r\\n        bytes32 payloadHash;\\r\\n    }\\r\\n\\r\\n    struct QueuedPayload {\\r\\n        address dstAddress;\\r\\n        uint64 nonce;\\r\\n        bytes payload;\\r\\n    }\\r\\n\\r\\n    // inboundNonce = [srcChainId][srcAddress].\\r\\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\\r\\n    // outboundNonce = [dstChainId][srcAddress].\\r\\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\\r\\n    // storedPayload = [srcChainId][srcAddress]\\r\\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\\r\\n    // msgToDeliver = [srcChainId][srcAddress]\\r\\n    mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;\\r\\n\\r\\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\\r\\n    event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);\\r\\n    event PayloadStored(uint16 srcChainId, bytes srcAddress, address dstAddress, uint64 nonce, bytes payload, bytes reason);\\r\\n\\r\\n    constructor(uint16 _chainId) {\\r\\n        mockStaticNativeFee = 42;\\r\\n        mockLayerZeroVersion = 1;\\r\\n        mockChainId = _chainId;\\r\\n    }\\r\\n\\r\\n    // mock helper to set the value returned by `estimateNativeFees`\\r\\n    function setEstimatedFees(uint _nativeFee, uint _zroFee) public {\\r\\n        nativeFee = _nativeFee;\\r\\n        zroFee = _zroFee;\\r\\n    }\\r\\n\\r\\n    function getChainId() external view override returns (uint16) {\\r\\n        return mockChainId;\\r\\n    }\\r\\n\\r\\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\\r\\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\\r\\n    }\\r\\n\\r\\n    function send(\\r\\n        uint16 _chainId,\\r\\n        bytes calldata _destination,\\r\\n        bytes calldata _payload,\\r\\n        address payable, // _refundAddress\\r\\n        address, // _zroPaymentAddress\\r\\n        bytes memory _adapterParams\\r\\n    ) external payable override {\\r\\n        address destAddr = packedBytesToAddr(_destination);\\r\\n        address lzEndpoint = lzEndpointLookup[destAddr];\\r\\n\\r\\n        require(lzEndpoint != address(0), \\\"LayerZeroMock: destination LayerZero Endpoint not found\\\");\\r\\n\\r\\n        require(msg.value >= nativeFee * _payload.length, \\\"LayerZeroMock: not enough native for fees\\\");\\r\\n\\r\\n        uint64 nonce;\\r\\n        {\\r\\n            nonce = ++outboundNonce[_chainId][msg.sender];\\r\\n        }\\r\\n\\r\\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\\r\\n        {\\r\\n            uint extraGas;\\r\\n            uint dstNative;\\r\\n            address dstNativeAddr;\\r\\n            assembly {\\r\\n                extraGas := mload(add(_adapterParams, 34))\\r\\n                dstNative := mload(add(_adapterParams, 66))\\r\\n                dstNativeAddr := mload(add(_adapterParams, 86))\\r\\n            }\\r\\n\\r\\n            // to simulate actually sending the ether, add a transfer call and ensure the LZEndpointMock contract has an ether balance\\r\\n        }\\r\\n\\r\\n        bytes memory bytesSourceUserApplicationAddr = addrToPackedBytes(address(msg.sender)); // cast this address to bytes\\r\\n\\r\\n        // not using the extra gas parameter because this is a single tx call, not split between different chains\\r\\n        // LZEndpointMock(lzEndpoint).receivePayload(mockChainId, bytesSourceUserApplicationAddr, destAddr, nonce, extraGas, _payload);\\r\\n        LZEndpointMock(lzEndpoint).receivePayload(mockChainId, bytesSourceUserApplicationAddr, destAddr, nonce, 0, _payload);\\r\\n    }\\r\\n\\r\\n    function receivePayload(\\r\\n        uint16 _srcChainId,\\r\\n        bytes calldata _srcAddress,\\r\\n        address _dstAddress,\\r\\n        uint64 _nonce,\\r\\n        uint, /*_gasLimit*/\\r\\n        bytes calldata _payload\\r\\n    ) external override {\\r\\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\\r\\n\\r\\n        // assert and increment the nonce. no message shuffling\\r\\n        require(_nonce == ++inboundNonce[_srcChainId][_srcAddress], \\\"LayerZero: wrong nonce\\\");\\r\\n\\r\\n        // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst\\r\\n        if (sp.payloadHash != bytes32(0)) {\\r\\n            QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];\\r\\n            QueuedPayload memory newMsg = QueuedPayload(_dstAddress, _nonce, _payload);\\r\\n\\r\\n            // warning, might run into gas issues trying to forward through a bunch of queued msgs\\r\\n            // shift all the msgs over so we can treat this like a fifo via array.pop()\\r\\n            if (msgs.length > 0) {\\r\\n                // extend the array\\r\\n                msgs.push(newMsg);\\r\\n\\r\\n                // shift all the indexes up for pop()\\r\\n                for (uint i = 0; i < msgs.length - 1; i++) {\\r\\n                    msgs[i + 1] = msgs[i];\\r\\n                }\\r\\n\\r\\n                // put the newMsg at the bottom of the stack\\r\\n                msgs[0] = newMsg;\\r\\n            } else {\\r\\n                msgs.push(newMsg);\\r\\n            }\\r\\n        } else if (nextMsgBLocked) {\\r\\n            storedPayload[_srcChainId][_srcAddress] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\\r\\n            emit PayloadStored(_srcChainId, _srcAddress, _dstAddress, _nonce, _payload, bytes(\\\"\\\"));\\r\\n            // ensure the next msgs that go through are no longer blocked\\r\\n            nextMsgBLocked = false;\\r\\n        } else {\\r\\n            // we ignore the gas limit because this call is made in one tx due to being \\\"same chain\\\"\\r\\n            // ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\\r\\n            ILayerZeroReceiver(_dstAddress).lzReceive(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // used to simulate messages received get stored as a payload\\r\\n    function blockNextMsg() external {\\r\\n        nextMsgBLocked = true;\\r\\n    }\\r\\n\\r\\n    function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint) {\\r\\n        return msgsToDeliver[_srcChainId][_srcAddress].length;\\r\\n    }\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16, address, bytes memory _payload, bool, bytes memory) external view override returns (uint _nativeFee, uint _zroFee) {\\r\\n        _nativeFee = nativeFee * _payload.length;\\r\\n        _zroFee = zroFee;\\r\\n    }\\r\\n\\r\\n    // give 20 bytes, return the decoded address\\r\\n    function packedBytesToAddr(bytes calldata _b) public pure returns (address) {\\r\\n        address addr;\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            calldatacopy(ptr, sub(_b.offset, 2), add(_b.length, 2))\\r\\n            addr := mload(sub(ptr, 10))\\r\\n        }\\r\\n        return addr;\\r\\n    }\\r\\n\\r\\n    // given an address, return the 20 bytes\\r\\n    function addrToPackedBytes(address _a) public pure returns (bytes memory) {\\r\\n        bytes memory data = abi.encodePacked(_a);\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    function setConfig(\\r\\n        uint16, /*_version*/\\r\\n        uint16, /*_chainId*/\\r\\n        uint, /*_configType*/\\r\\n        bytes memory /*_config*/\\r\\n    ) external override {}\\r\\n\\r\\n    function getConfig(\\r\\n        uint16, /*_version*/\\r\\n        uint16, /*_chainId*/\\r\\n        address, /*_ua*/\\r\\n        uint /*_configType*/\\r\\n    ) external pure override returns (bytes memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function setSendVersion(\\r\\n        uint16 /*version*/\\r\\n    ) external override {}\\r\\n\\r\\n    function setReceiveVersion(\\r\\n        uint16 /*version*/\\r\\n    ) external override {}\\r\\n\\r\\n    function getSendVersion(\\r\\n        address /*_userApplication*/\\r\\n    ) external pure override returns (uint16) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function getReceiveVersion(\\r\\n        address /*_userApplication*/\\r\\n    ) external pure override returns (uint16) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function getInboundNonce(uint16 _chainID, bytes calldata _srcAddress) external view override returns (uint64) {\\r\\n        return inboundNonce[_chainID][_srcAddress];\\r\\n    }\\r\\n\\r\\n    function getOutboundNonce(uint16 _chainID, address _srcAddress) external view override returns (uint64) {\\r\\n        return outboundNonce[_chainID][_srcAddress];\\r\\n    }\\r\\n\\r\\n    // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload\\r\\n    function _clearMsgQue(uint16 _srcChainId, bytes calldata _srcAddress) internal {\\r\\n        QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];\\r\\n\\r\\n        // warning, might run into gas issues trying to forward through a bunch of queued msgs\\r\\n        while (msgs.length > 0) {\\r\\n            QueuedPayload memory payload = msgs[msgs.length - 1];\\r\\n            ILayerZeroReceiver(payload.dstAddress).lzReceive(_srcChainId, _srcAddress, payload.nonce, payload.payload);\\r\\n            msgs.pop();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override {\\r\\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\\r\\n        // revert if no messages are cached. safeguard malicious UA behaviour\\r\\n        require(sp.payloadHash != bytes32(0), \\\"LayerZero: no stored payload\\\");\\r\\n        require(sp.dstAddress == msg.sender, \\\"LayerZero: invalid caller\\\");\\r\\n\\r\\n        // empty the storedPayload\\r\\n        sp.payloadLength = 0;\\r\\n        sp.dstAddress = address(0);\\r\\n        sp.payloadHash = bytes32(0);\\r\\n\\r\\n        emit UaForceResumeReceive(_srcChainId, _srcAddress);\\r\\n\\r\\n        // resume the receiving of msgs after we force clear the \\\"stuck\\\" msg\\r\\n        _clearMsgQue(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external override {\\r\\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\\r\\n        require(sp.payloadHash != bytes32(0), \\\"LayerZero: no stored payload\\\");\\r\\n        require(_payload.length == sp.payloadLength && keccak256(_payload) == sp.payloadHash, \\\"LayerZero: invalid payload\\\");\\r\\n\\r\\n        address dstAddress = sp.dstAddress;\\r\\n        // empty the storedPayload\\r\\n        sp.payloadLength = 0;\\r\\n        sp.dstAddress = address(0);\\r\\n        sp.payloadHash = bytes32(0);\\r\\n\\r\\n        uint64 nonce = inboundNonce[_srcChainId][_srcAddress];\\r\\n\\r\\n        ILayerZeroReceiver(dstAddress).lzReceive(_srcChainId, _srcAddress, nonce, _payload);\\r\\n        emit PayloadCleared(_srcChainId, _srcAddress, nonce, dstAddress);\\r\\n    }\\r\\n\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view override returns (bool) {\\r\\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\\r\\n        return sp.payloadHash != bytes32(0);\\r\\n    }\\r\\n\\r\\n    function isSendingPayload() external pure override returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function isReceivingPayload() external pure override returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getSendLibraryAddress(address) external view override returns (address) {\\r\\n        return address(this);\\r\\n    }\\r\\n\\r\\n    function getReceiveLibraryAddress(address) external view override returns (address) {\\r\\n        return address(this);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/lucks/LucksPaymentStrategy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksPaymentStrategy} from \\\"../interfaces/ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksGroup} from \\\"../interfaces/ILucksGroup.sol\\\";\\r\\nimport {ILucksExecutor, Ticket} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksPaymentStrategy\\r\\n * @notice It is the contract for PaymentStrategy\\r\\n */\\r\\ncontract LucksPaymentStrategy is ILucksPaymentStrategy, Ownable {    \\r\\n\\r\\n    ILucksExecutor public EXECUTOR;\\r\\n    ILucksGroup public GROUPS;\\r\\n\\r\\n    constructor(address _executor, ILucksGroup _groups) {\\r\\n        EXECUTOR = ILucksExecutor(_executor);\\r\\n        GROUPS = _groups;\\r\\n    }\\r\\n\\r\\n    function getShareRate(uint16 strategyId) public override pure returns (uint32) {\\r\\n        if (strategyId == 1){ // 10%\\r\\n            return 1000;  \\r\\n        } else if (strategyId == 2) { // 20%\\r\\n            return 2000;   \\r\\n        }\\r\\n        else if (strategyId == 3){ // 30%\\r\\n            return 3000;\\r\\n        }\\r\\n        else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) \\r\\n      override public view returns (uint256, uint256[] memory, address[] memory) \\r\\n    {        \\r\\n        uint32 rate = getShareRate(strategyId);\\r\\n        uint256[] memory spliter;\\r\\n        address[] memory users;\\r\\n\\r\\n        if (rate > 0) {                               \\r\\n            users = GROUPS.getGroupUsers(taskId, winner);\\r\\n            if (users.length > 1){            \\r\\n                spliter = new uint256[](users.length);\\r\\n                uint256 splitShare = 10000 / users.length;\\r\\n                for (uint i=0; i< users.length; i++) {\\r\\n                    spliter[i] = splitShare;\\r\\n                }            \\r\\n            }             \\r\\n        }\\r\\n\\r\\n        return (rate,spliter,users);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setLucksGroup(ILucksGroup _group) external onlyOwner {\\r\\n        GROUPS = _group;\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/lucks/LucksGroup.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksGroup} from \\\"../interfaces/ILucksGroup.sol\\\";\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, UserState} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksGroup\\r\\n * @notice It is the contract for LucksGroup\\r\\n */\\r\\ncontract LucksGroup is ILucksGroup, ReentrancyGuardUpgradeable, OwnableUpgradeable {\\r\\n\\r\\n    using Counters for Counters.Counter;    \\r\\n\\r\\n    ILucksExecutor public EXECUTOR;\\r\\n\\r\\n    uint32 public MAX_SEAT;\\r\\n    \\r\\n    mapping(uint256 => uint256) public groupIds;               // groupId counter (taskId => groupId)\\r\\n    mapping(uint256 => mapping(uint256 => address[])) public groups;     // store task groups (taskId => groupId => group member address)\\r\\n    mapping(address => mapping(uint256 => uint256)) public userGroups;   // store user joined groups (user => taskId => groupId)\\r\\n    mapping(uint256 => mapping(uint256 => uint16)) public groupSeat;     // store group setting(task=> groupId = > group seat)\\r\\n\\r\\n    function initialize(address _executor, uint32 _maxSeat) external initializer { \\r\\n        __ReentrancyGuard_init();\\r\\n        __Ownable_init();\\r\\n        EXECUTOR = ILucksExecutor(_executor);        \\r\\n        MAX_SEAT = _maxSeat;\\r\\n    }\\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address user) override view public returns (address[] memory){                \\r\\n        return groups[taskId][userGroups[user][taskId]];\\r\\n    }\\r\\n\\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) override public {   \\r\\n        address user = msg.sender;                  \\r\\n        require(groupId > 0 && groupId <= groupIds[taskId], \\\"Invalid groupId\\\");\\r\\n        require(seat <= MAX_SEAT, \\\"Invalid seat\\\");\\r\\n        require(userGroups[user][taskId] == 0, \\\"Already join a group\\\");\\r\\n        require(address(EXECUTOR)!=address(0), \\\"EXECUTOR not set\\\");\\r\\n            \\r\\n        TaskItem memory item = EXECUTOR.getTask(taskId);        \\r\\n        require(block.timestamp <= item.endTime, \\\"endTime\\\");    \\r\\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \\\"status\\\");\\r\\n\\r\\n        // join\\r\\n        if (groups[taskId][groupId].length < MAX_SEAT) {      \\r\\n\\r\\n            UserState memory state = EXECUTOR.getUserState(taskId, user);\\r\\n            require(state.num > 0, \\\"No tickets\\\");\\r\\n\\r\\n            groups[taskId][groupId].push(user);\\r\\n            userGroups[user][taskId] = groupId;\\r\\n\\r\\n            emit JoinGroup(user, taskId, groupId);\\r\\n        }\\r\\n        else {\\r\\n            if (seat > 1) {\\r\\n                // over seat, create new group\\r\\n                _createGroup(user, taskId, seat); \\r\\n            }\\r\\n            else {\\r\\n                revert(\\\"Exceed seat\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createGroup(uint256 taskId, uint16 seat) override public {  \\r\\n        _createGroup(msg.sender, taskId, seat);\\r\\n    }\\r\\n\\r\\n    function _createGroup(address user, uint256 taskId, uint16 seat) internal {            \\r\\n                 \\r\\n        require(seat <= MAX_SEAT && seat > 1, \\\"Invalid seat\\\");\\r\\n        require(userGroups[user][taskId] == 0, \\\"Already join a group\\\");\\r\\n        require(address(EXECUTOR)!=address(0), \\\"EXECUTOR not set\\\");\\r\\n            \\r\\n        TaskItem memory item = EXECUTOR.getTask(taskId);        \\r\\n        require(block.timestamp <= item.endTime, \\\"endTime\\\");    \\r\\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \\\"status\\\");\\r\\n\\r\\n        UserState memory state = EXECUTOR.getUserState(taskId, user);\\r\\n        require(state.num > 0, \\\"No tickets\\\");\\r\\n        \\r\\n        uint256 groupId = groupIds[taskId] + 1;\\r\\n        groupIds[taskId] = groupId;\\r\\n\\r\\n        groups[taskId][groupId].push(user);\\r\\n        userGroups[user][taskId] = groupId;\\r\\n\\r\\n        emit CreateGroup(user, taskId, groupId, seat);\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n    @notice set operator\\r\\n     */\\r\\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/tests/LocalLucksVRF.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n// Chainlink contracts\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksVRF} from \\\"./../interfaces/ILucksVRF.sol\\\";\\r\\n\\r\\ncontract LocalLucksVRF is VRFConsumerBaseV2, ILucksVRF, Ownable {\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private currentNonce;   \\r\\n\\r\\n    VRFCoordinatorV2Interface COORDINATOR;\\r\\n    LinkTokenInterface LINKTOKEN;\\r\\n\\r\\n    // Your subscription ID.\\r\\n    uint64 s_subscriptionId;\\r\\n\\r\\n    // Rinkeby coordinator. For other networks,\\r\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n    address vrfCoordinator = 0x6168499c0cFfCaCD319c818142124B7A15E857ab;\\r\\n\\r\\n    // Rinkeby LINK token contract. For other networks,\\r\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n    address link = 0x01BE23585060835E02B77ef475b0Cc51aA1e0709;\\r\\n\\r\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\r\\n    // For a list of available gas lanes on each network,\\r\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n    bytes32 keyHash =\\r\\n        0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc;\\r\\n\\r\\n    // Depends on the number of requested values that you want sent to the\\r\\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\r\\n    // so 100,000 is a safe default for this example contract. Test and adjust\\r\\n    // this limit based on the network that you select, the size of the request,\\r\\n    // and the processing of the callback request in the fulfillRandomWords()\\r\\n    // function.\\r\\n    uint32 callbackGasLimit = 100000;\\r\\n\\r\\n    // The default is 3, but you can set this higher.\\r\\n    uint16 requestConfirmations = 3;\\r\\n\\r\\n    address public executor;\\r\\n\\r\\n    // taskId => ticket FinalNumber\\r\\n    mapping(uint256 => uint32) public randomResults;\\r\\n    // requestId => taskId\\r\\n    mapping(uint256 => uint256) public requestToTaskId;\\r\\n    // requestId => max num\\r\\n    mapping(uint256 => uint256) public requestToMaxNum;\\r\\n    // taskId => requestId\\r\\n    mapping(uint256 => uint256) private taskToRequestId;\\r\\n\\r\\n    constructor(\\r\\n        uint64 _subscriptionId,\\r\\n        address _vrfCoordinator,\\r\\n        address _link,\\r\\n        bytes32 _keyHash,\\r\\n        address _executor\\r\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\r\\n        s_subscriptionId = _subscriptionId;\\r\\n        vrfCoordinator = _vrfCoordinator;\\r\\n        link = _link;\\r\\n        keyHash = _keyHash;\\r\\n\\r\\n        executor = _executor;\\r\\n        // COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\r\\n        // LINKTOKEN = LinkTokenInterface(link);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Request randomness from a user-provided max\\r\\n     * @param max: max provided by the LucksExecutor (lastTicketId)\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external override {\\r\\n        require(msg.sender == owner() || msg.sender == executor, \\\"Only Lucks can reqRandomNumber\\\");\\r\\n        require(max > 0, \\\"Invalid max input\\\");\\r\\n\\r\\n        if (taskToRequestId[taskId] > 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Will revert if subscription is not set and funded.\\r\\n        currentNonce.increment();\\r\\n        uint64 nonce = uint64(currentNonce.current());\\r\\n        (uint256 requestId,) = computeRequestId(\\r\\n            keyHash,\\r\\n            msg.sender,\\r\\n            s_subscriptionId,\\r\\n            nonce   \\r\\n        );\\r\\n        requestToTaskId[requestId] = taskId;\\r\\n        requestToMaxNum[requestId] = max;\\r\\n        taskToRequestId[taskId] = requestId;\\r\\n\\r\\n        emit ReqRandomNumber(taskId, max, requestId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint32)\\r\\n    {\\r\\n        return randomResults[taskId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Callback function used by ChainLink's VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        uint256 taskId = requestToTaskId[requestId];        \\r\\n        require(taskId > 0, \\\"Wrong taskId or requestId\\\");\\r\\n\\r\\n        // Between 1 and max:\\r\\n        randomResults[taskId] = uint32((randomWords[0] % requestToMaxNum[requestId]) + 1);\\r\\n\\r\\n        emit RspRandomNumber(\\r\\n            taskId,\\r\\n            requestId,\\r\\n            randomWords[0],\\r\\n            randomResults[taskId]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function computeRequestId(\\r\\n        bytes32 _keyHash,\\r\\n        address _sender,\\r\\n        uint64 _subId,\\r\\n        uint64 _nonce\\r\\n    ) private pure returns (uint256, uint256) {\\r\\n        uint256 preSeed = uint256(keccak256(abi.encode(_keyHash, _sender, _subId, _nonce)));\\r\\n        return (uint256(keccak256(abi.encode(_keyHash, preSeed))), preSeed);\\r\\n    }\\r\\n\\r\\n    // ============ only Owner ============\\r\\n\\r\\n    /**\\r\\n     * @notice Callback for test & enmergency case\\r\\n     */\\r\\n    function callbackRandomWords(uint256 taskId, uint256 seed)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {    \\r\\n        uint256 requestId = taskToRequestId[taskId];\\r\\n\\r\\n        // generate random by owner\\r\\n        uint256 random = uint256(\\r\\n           keccak256(abi.encodePacked(\\r\\n                seed *\\r\\n                block.timestamp *\\r\\n                block.difficulty *\\r\\n                block.number *\\r\\n                uint(blockhash(block.number - requestConfirmations))\\r\\n            ))\\r\\n        );\\r\\n\\r\\n        // Between 1 and max:\\r\\n        randomResults[taskId] = uint32((random % requestToMaxNum[requestId]) + 1);\\r\\n\\r\\n        emit RspRandomNumber(\\r\\n            taskId,\\r\\n            requestId,\\r\\n            random,\\r\\n            randomResults[taskId]\\r\\n        );       \\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Callback for test & enmergency case\\r\\n     */\\r\\n    function callbackTestRandomWords(uint256 taskId, uint32 number)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {              \\r\\n        uint256 requestId = taskToRequestId[taskId];\\r\\n\\r\\n        randomResults[taskId] = number;\\r\\n\\r\\n        emit RspRandomNumber(\\r\\n            taskId,\\r\\n            requestId,\\r\\n            number,\\r\\n            randomResults[taskId]\\r\\n        );\\r\\n    }    \\r\\n\\r\\n    /**\\r\\n     * @notice Change the keyHash\\r\\n     * @param _keyHash: new keyHash\\r\\n     */\\r\\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\\r\\n        keyHash = _keyHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the requestConfirmations\\r\\n     * @param num: num\\r\\n     */\\r\\n    function setReqConfirmations(uint16 num) external onlyOwner {\\r\\n        requestConfirmations = num;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the address for the Lucks\\r\\n     * @param _executor: address of the PancakeSwap crowdluck\\r\\n     */\\r\\n    function setLucksAddress(address _executor) external onlyOwner {\\r\\n        executor = _executor;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\n    },\n    \"contracts/lucks/LucksVRF.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Chainlink contracts\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksVRF} from \\\"../interfaces/ILucksVRF.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck VRF\\r\\n * @notice It is the contract for Randomness Number Generation\\r\\n */\\r\\ncontract LucksVRF is VRFConsumerBaseV2, ILucksVRF, Ownable {\\r\\n    VRFCoordinatorV2Interface COORDINATOR;\\r\\n    LinkTokenInterface LINKTOKEN;\\r\\n\\r\\n    // Your subscription ID.\\r\\n    uint64 s_subscriptionId;\\r\\n\\r\\n    // Rinkeby coordinator. For other networks,\\r\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n    address vrfCoordinator = 0x6168499c0cFfCaCD319c818142124B7A15E857ab;\\r\\n\\r\\n    // Rinkeby LINK token contract. For other networks,\\r\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n    address link = 0x01BE23585060835E02B77ef475b0Cc51aA1e0709;\\r\\n\\r\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\r\\n    // For a list of available gas lanes on each network,\\r\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n    bytes32 keyHash = 0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc;\\r\\n\\r\\n    // Depends on the number of requested values that you want sent to the\\r\\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\r\\n    // so 100,000 is a safe default for this example contract. Test and adjust\\r\\n    // this limit based on the network that you select, the size of the request,\\r\\n    // and the processing of the callback request in the fulfillRandomWords()\\r\\n    // function.\\r\\n    uint32 callbackGasLimit = 100000;\\r\\n\\r\\n    // The default is 3, but you can set this higher.\\r\\n    uint16 requestConfirmations = 3;\\r\\n\\r\\n    address public EXECUTOR;\\r\\n\\r\\n    mapping(uint256 => uint32) public randomResults;      // taskId => ticket FinalNumber\\r\\n    mapping(uint256 => uint256) public requestToTaskId;    // requestId => taskId\\r\\n    mapping(uint256 => uint256) public requestToMaxNum;    // requestId => max num\\r\\n    mapping(uint256 => uint256) public taskToRequestId;    // taskId => requestId\\r\\n\\r\\n    constructor(\\r\\n        uint64 _subscriptionId,\\r\\n        address _vrfCoordinator,\\r\\n        address _link,\\r\\n        bytes32 _keyHash,\\r\\n        address _executor\\r\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\r\\n        s_subscriptionId = _subscriptionId;\\r\\n        vrfCoordinator = _vrfCoordinator;\\r\\n        link = _link;\\r\\n        keyHash = _keyHash;\\r\\n\\r\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\r\\n        LINKTOKEN = LinkTokenInterface(link);\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Request randomness from a user-provided max\\r\\n     * @param max: max provided by the LucksExecutor (lastTicketId)\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external override {\\r\\n        require(msg.sender == EXECUTOR, \\\"Only Lucks can reqRandomNumber\\\");\\r\\n        require(max > 0, \\\"Invalid max input\\\");\\r\\n        \\r\\n        if (taskToRequestId[taskId] > 0) {\\r\\n            return;\\r\\n        }\\r\\n        \\r\\n        // Will revert if subscription is not set and funded.\\r\\n        uint256 requestId = COORDINATOR.requestRandomWords(\\r\\n            keyHash,\\r\\n            s_subscriptionId,\\r\\n            requestConfirmations,\\r\\n            callbackGasLimit,\\r\\n            1\\r\\n        );\\r\\n        requestToTaskId[requestId] = taskId;\\r\\n        requestToMaxNum[requestId] = max;\\r\\n        taskToRequestId[taskId] = requestId;\\r\\n\\r\\n        emit ReqRandomNumber(taskId, max, requestId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint32)\\r\\n    {\\r\\n        return randomResults[taskId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Callback function used by ChainLink's VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        uint256 taskId = requestToTaskId[requestId];        \\r\\n        require(taskId > 0, \\\"Wrong taskId or requestId\\\");\\r\\n\\r\\n        // Between 1 and max:\\r\\n        randomResults[taskId] = uint32((randomWords[0] % requestToMaxNum[requestId]) + 1);\\r\\n\\r\\n        emit RspRandomNumber(\\r\\n            taskId,\\r\\n            requestId,\\r\\n            randomWords[0],\\r\\n            randomResults[taskId]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ============ only Owner ============\\r\\n\\r\\n    /**\\r\\n     * @notice Callback for enmergency case\\r\\n     */\\r\\n    function callbackRandomWords(uint256 taskId, uint256 seed)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {    \\r\\n        uint256 requestId = taskToRequestId[taskId];\\r\\n\\r\\n        // generate random by owner\\r\\n        uint256 random = uint256(\\r\\n           keccak256(abi.encodePacked(\\r\\n                seed *\\r\\n                block.timestamp *\\r\\n                block.difficulty *\\r\\n                block.number *\\r\\n                uint(blockhash(block.number - requestConfirmations))\\r\\n            ))\\r\\n        );\\r\\n        \\r\\n        // Between 1 and max:\\r\\n        randomResults[taskId] = uint32((random % requestToMaxNum[requestId]) + 1);\\r\\n\\r\\n        emit RspRandomNumber(\\r\\n            taskId,\\r\\n            requestToTaskId[taskId],\\r\\n            random,\\r\\n            randomResults[taskId]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the keyHash\\r\\n     * @param _keyHash: new keyHash\\r\\n     */\\r\\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\\r\\n        keyHash = _keyHash;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the requestConfirmations\\r\\n     * @param num: num\\r\\n     */\\r\\n    function setReqConfirmations(uint16 num) external onlyOwner {\\r\\n        requestConfirmations = num;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the address for the Lucks\\r\\n     * @param _executor: address of the PancakeSwap crowdluck\\r\\n     */\\r\\n    function setExecutor(address _executor) external onlyOwner {\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/lucks/LucksAutoCloseTask.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Chainlink contracts\\r\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport \\\"./LucksAutoTask.sol\\\";\\r\\n\\r\\ncontract LucksAutoCloseTask is LucksAutoTask, KeeperCompatibleInterface {\\r\\n\\r\\n    /**\\r\\n    * @param _keeperRegAddr The address of the keeper registry contract\\r\\n    * @param _executor The LucksExecutor contract\\r\\n    */\\r\\n    constructor(address _keeperRegAddr, ILucksExecutor _executor) LucksAutoTask(_keeperRegAddr,_executor){        \\r\\n    }\\r\\n\\r\\n\\r\\n    //  ============ internal  functions  ============\\r\\n\\r\\n    function invokeTasks(uint256[] memory _taskIds) internal override {\\r\\n\\r\\n        lzTxObj memory _lzTxObj = lzTxObj(DST_GAS_AMOUNT, 0, bytes(\\\"0x\\\"), bytes(\\\"0x\\\"));\\r\\n\\r\\n         for (uint256 i = 0; i < _taskIds.length; i++) {\\r\\n\\r\\n            uint256 taskId = _taskIds[i];\\r\\n            _removeTask(taskId);\\r\\n\\r\\n            try EXECUTOR.closeTask(taskId, _lzTxObj) {\\r\\n         \\r\\n            } catch(bytes memory reason) {\\r\\n                emit RevertInvoke(taskId, _getRevertMsg(reason));\\r\\n            }            \\r\\n        }\\r\\n    }\\r\\n\\r\\n    //  ============ Keeper  functions  ============\\r\\n\\r\\n    function checkUpkeep(bytes calldata /* checkData */) external view override whenNotPaused returns (bool upkeepNeeded, bytes memory performData) {\\r\\n        uint256[] memory ids = getQueueTasks();\\r\\n        upkeepNeeded = ids.length > 0;\\r\\n        performData = abi.encode(ids);\\r\\n        return (upkeepNeeded, performData);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata performData) external override whenNotPaused onlyKeeper {\\r\\n        uint256[] memory ids = abi.decode(performData, (uint256[]));\\r\\n        invokeTasks(ids);\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"storageLayout\",\n          \"devdoc\",\n          \"userdoc\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "ba73e878ce6021375e91c6f45b3b285f",
      "transactionHash": "0x29ee160bf824739c5ad0eda35faf49f11f615ea471488cd30bc32848f26b21a8",
      "args": [
        "0x793E92A30fdaD0AD4F6Bbc191729957Ae5aBb880",
        5
      ]
    },
    "decoded": {
      "from": "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
      "gasPrice": "11000000000",
      "gasLimit": "1689535",
      "to": null,
      "value": "0",
      "nonce": 985,
      "data": "0x60e0604052602a60808181529062001ede60a0398051620000299160089160209091019062000524565b503480156200003757600080fd5b5060405162001f0838038062001f088339810160408190526200005a91620005ca565b604080518082018252600f81526e446f6f646c6520417065732042534360881b602080830191825283518085019094526005845264644170657360d81b908401528151919291620000ae9160009162000524565b508051620000c490600190602084019062000524565b505050620000e1620000db620000f560201b60201c565b620000f9565b620000ed82826200014b565b505062000740565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b81811015620001775762000162836200017c565b806200016e816200070c565b9150506200014e565b505050565b6000620001956007620001be60201b620009c21760201c565b9050620001ae6007620001c260201b620009c61760201c565b620001ba8282620001cb565b5050565b5490565b80546001019055565b620001ba828260405180602001604052806000815250620001ed60201b60201c565b620001f9838362000264565b620002086000848484620003ac565b620001775760405162461bcd60e51b8152602060048201526032602482015260008051602062001ebe83398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084015b60405180910390fd5b6001600160a01b038216620002bc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016200025b565b6000818152600260205260409020546001600160a01b031615620003235760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016200025b565b6001600160a01b03821660009081526003602052604081208054600192906200034e908490620006b4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000620003cd846001600160a01b03166200051560201b620009cf1760201c565b156200050957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906200040790339089908890889060040162000639565b602060405180830381600087803b1580156200042257600080fd5b505af192505050801562000455575060408051601f3d908101601f19168201909252620004529181019062000606565b60015b620004ee573d80801562000486576040519150601f19603f3d011682016040523d82523d6000602084013e6200048b565b606091505b508051620004e65760405162461bcd60e51b8152602060048201526032602482015260008051602062001ebe83398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016200025b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506200050d565b5060015b949350505050565b6001600160a01b03163b151590565b8280546200053290620006cf565b90600052602060002090601f016020900481019282620005565760008555620005a1565b82601f106200057157805160ff1916838001178555620005a1565b82800160010185558215620005a1579182015b82811115620005a157825182559160200191906001019062000584565b50620005af929150620005b3565b5090565b5b80821115620005af5760008155600101620005b4565b60008060408385031215620005de57600080fd5b82516001600160a01b0381168114620005f657600080fd5b6020939093015192949293505050565b6000602082840312156200061957600080fd5b81516001600160e01b0319811681146200063257600080fd5b9392505050565b600060018060a01b038087168352602081871681850152856040850152608060608501528451915081608085015260005b82811015620006885785810182015185820160a0015281016200066a565b828111156200069b57600060a084870101525b5050601f01601f19169190910160a00195945050505050565b60008219821115620006ca57620006ca6200072a565b500190565b600181811c90821680620006e457607f821691505b602082108114156200070657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200072357620007236200072a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b61176e80620007506000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636c0360eb116100ad578063a22cb46511610071578063a22cb4651461025f578063b88d4fde14610272578063c87b56dd14610285578063e985e9c514610298578063f2fde38b146102d457600080fd5b80636c0360eb1461022357806370a082311461022b578063715018a61461023e5780638da5cb5b1461024657806395d89b411461025757600080fd5b806323b872dd116100f457806323b872dd146101c457806340c10f19146101d757806340d097c3146101ea57806342842e0e146101fd5780636352211e1461021057600080fd5b806301ffc9a71461013157806306fdde0314610159578063081812fc1461016e578063095ea7b31461019957806318160ddd146101ae575b600080fd5b61014461013f3660046113bc565b6102e7565b60405190151581526020015b60405180910390f35b610161610339565b604051610150919061153b565b61018161017c3660046113f6565b6103cb565b6040516001600160a01b039091168152602001610150565b6101ac6101a7366004611392565b610465565b005b6101b661057b565b604051908152602001610150565b6101ac6101d236600461123e565b61058b565b6101ac6101e5366004611392565b6105bc565b6101ac6101f83660046111e9565b6105e2565b6101ac61020b36600461123e565b61060b565b61018161021e3660046113f6565b610626565b61016161069d565b6101b66102393660046111e9565b61072b565b6101ac6107b2565b6006546001600160a01b0316610181565b610161610818565b6101ac61026d366004611356565b610827565b6101ac61028036600461127a565b610832565b6101616102933660046113f6565b61086a565b6101446102a636600461120b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101ac6102e23660046111e9565b6108f7565b60006001600160e01b031982166380ac58cd60e01b148061031857506001600160e01b03198216635b5e139f60e01b145b8061033357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461034890611660565b80601f016020809104026020016040519081016040528092919081815260200182805461037490611660565b80156103c15780601f10610396576101008083540402835291602001916103c1565b820191906000526020600020905b8154815290600101906020018083116103a457829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104495760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061047082610626565b9050806001600160a01b0316836001600160a01b031614156104de5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610440565b336001600160a01b03821614806104fa57506104fa81336102a6565b61056c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610440565b61057683836109de565b505050565b600061058660075490565b905090565b6105953382610a4c565b6105b15760405162461bcd60e51b8152600401610440906115a0565b610576838383610b43565b60005b81811015610576576105d0836105e2565b806105da8161169b565b9150506105bf565b60006105ed60075490565b90506105fd600780546001019055565b6106078282610cdf565b5050565b61057683838360405180602001604052806000815250610832565b6000818152600260205260408120546001600160a01b0316806103335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610440565b600880546106aa90611660565b80601f01602080910402602001604051908101604052809291908181526020018280546106d690611660565b80156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b505050505081565b60006001600160a01b0382166107965760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610440565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b0316331461080c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b6108166000610cf9565b565b60606001805461034890611660565b610607338383610d4b565b61083c3383610a4c565b6108585760405162461bcd60e51b8152600401610440906115a0565b61086484848484610e1a565b50505050565b6000818152600260205260409020546060906001600160a01b03166108c55760405162461bcd60e51b81526020600482015260116024820152702737b732bc34b9ba32b73a103a37b5b2b760791b6044820152606401610440565b60086108d083610e4d565b6040516020016108e1929190611457565b6040516020818303038152906040529050919050565b6006546001600160a01b031633146109515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610440565b6001600160a01b0381166109b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610440565b6109bf81610cf9565b50565b5490565b80546001019055565b6001600160a01b03163b151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a1382610626565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610ac55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610440565b6000610ad083610626565b9050806001600160a01b0316846001600160a01b03161480610b0b5750836001600160a01b0316610b00846103cb565b6001600160a01b0316145b80610b3b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610b5682610626565b6001600160a01b031614610bba5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610440565b6001600160a01b038216610c1c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610440565b610c276000826109de565b6001600160a01b0383166000908152600360205260408120805460019290610c5090849061161d565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c7e9084906115f1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610607828260405180602001604052806000815250610f4b565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610dad5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610440565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e25848484610b43565b610e3184848484610f7e565b6108645760405162461bcd60e51b81526004016104409061154e565b606081610e715750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e9b5780610e858161169b565b9150610e949050600a83611609565b9150610e75565b60008167ffffffffffffffff811115610eb657610eb661170c565b6040519080825280601f01601f191660200182016040528015610ee0576020820181803683370190505b5090505b8415610b3b57610ef560018361161d565b9150610f02600a866116b6565b610f0d9060306115f1565b60f81b818381518110610f2257610f226116f6565b60200101906001600160f81b031916908160001a905350610f44600a86611609565b9450610ee4565b610f55838361108b565b610f626000848484610f7e565b6105765760405162461bcd60e51b81526004016104409061154e565b60006001600160a01b0384163b1561108057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610fc29033908990889088906004016114fe565b602060405180830381600087803b158015610fdc57600080fd5b505af192505050801561100c575060408051601f3d908101601f19168201909252611009918101906113d9565b60015b611066573d80801561103a576040519150601f19603f3d011682016040523d82523d6000602084013e61103f565b606091505b50805161105e5760405162461bcd60e51b81526004016104409061154e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b3b565b506001949350505050565b6001600160a01b0382166110e15760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610440565b6000818152600260205260409020546001600160a01b0316156111465760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610440565b6001600160a01b038216600090815260036020526040812080546001929061116f9084906115f1565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b03811681146111e457600080fd5b919050565b6000602082840312156111fb57600080fd5b611204826111cd565b9392505050565b6000806040838503121561121e57600080fd5b611227836111cd565b9150611235602084016111cd565b90509250929050565b60008060006060848603121561125357600080fd5b61125c846111cd565b925061126a602085016111cd565b9150604084013590509250925092565b6000806000806080858703121561129057600080fd5b611299856111cd565b93506112a7602086016111cd565b925060408501359150606085013567ffffffffffffffff808211156112cb57600080fd5b818701915087601f8301126112df57600080fd5b8135818111156112f1576112f161170c565b604051601f8201601f19908116603f011681019083821181831017156113195761131961170c565b816040528281528a602084870101111561133257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561136957600080fd5b611372836111cd565b91506020830135801515811461138757600080fd5b809150509250929050565b600080604083850312156113a557600080fd5b6113ae836111cd565b946020939093013593505050565b6000602082840312156113ce57600080fd5b813561120481611722565b6000602082840312156113eb57600080fd5b815161120481611722565b60006020828403121561140857600080fd5b5035919050565b60008151808452611427816020860160208601611634565b601f01601f19169290920160200192915050565b6000815161144d818560208601611634565b9290920192915050565b600080845481600182811c91508083168061147357607f831692505b602080841082141561149357634e487b7160e01b86526022600452602486fd5b8180156114a757600181146114b8576114e5565b60ff198616895284890196506114e5565b60008b81526020902060005b868110156114dd5781548b8201529085019083016114c4565b505084890196505b5050505050506114f5818561143b565b95945050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115319083018461140f565b9695505050505050565b602081526000611204602083018461140f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115611604576116046116ca565b500190565b600082611618576116186116e0565b500490565b60008282101561162f5761162f6116ca565b500390565b60005b8381101561164f578181015183820152602001611637565b838111156108645750506000910152565b600181811c9082168061167457607f821691505b6020821081141561169557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156116af576116af6116ca565b5060010190565b6000826116c5576116c56116e0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146109bf57600080fdfea2646970667358221220fa66a82fda69671e502714520863453ef93feead6212d3c0f1ce66c2bd53568664736f6c634300080600334552433732313a207472616e7366657220746f206e6f6e20455243373231526568747470733a2f2f646f6f646c65617065732e6d6574612e72617265626f6172642e636f6d2f6170692f000000000000000000000000793e92a30fdad0ad4f6bbc191729957ae5abb8800000000000000000000000000000000000000000000000000000000000000005",
      "r": "0x360ca5ef4c9631fabad393c27264b4ffbe60e17197b1aa00dac9356e70cc15c0",
      "s": "0x102da096d2790d40fe0fd521c85f0e3008167a0dbd321f012b1807a604abd7bf",
      "v": 229,
      "chainId": 97
    }
  }
}
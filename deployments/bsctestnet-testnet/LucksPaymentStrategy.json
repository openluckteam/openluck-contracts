{
  "address": "0x71f25Bde6474c88a4c8E13b68811b29354635CFC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "contract ILucksGroup",
          "name": "_groups",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EXECUTOR",
      "outputs": [
        {
          "internalType": "contract ILucksExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GROUPS",
      "outputs": [
        {
          "internalType": "contract ILucksGroup",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "strategyId",
          "type": "uint16"
        }
      ],
      "name": "getShareRate",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "strategyId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "viewPaymentShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x33c94a12d1a8b871f867552a5dc257f2943def684959f39158494847f89e1b6c",
  "receipt": {
    "to": null,
    "from": "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
    "contractAddress": "0x71f25Bde6474c88a4c8E13b68811b29354635CFC",
    "transactionIndex": 3,
    "gasUsed": "446946",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xdaa6cd6e9043ae9a997e6a5d0970baee588c651a267da574cd6ccec1a810370f",
    "transactionHash": "0x33c94a12d1a8b871f867552a5dc257f2943def684959f39158494847f89e1b6c",
    "logs": [],
    "blockNumber": 18972390,
    "cumulativeGasUsed": "1634175",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x486eB7D45626FDae26DE504fc24244F297290D1B",
    "0x811ad7ce0077E26b09FF476258eF6F815c8FccFB"
  ],
  "numDeployments": 1,
  "solcInputHash": "c901f1a063d05d2c0029f9800f4d2c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"contract ILucksGroup\",\"name\":\"_groups\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"contract ILucksExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GROUPS\",\"outputs\":[{\"internalType\":\"contract ILucksGroup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"strategyId\",\"type\":\"uint16\"}],\"name\":\"getShareRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"strategyId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"viewPaymentShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Openluck LucksPaymentStrategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"It is the contract for PaymentStrategy\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucks/LucksPaymentStrategy.sol\":\"LucksPaymentStrategy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);\\r\\n    event MinWaitPeriodUpdated(uint256 oldMinWaitPeriod, uint256 newMinWaitPeriod);\\r\\n\\r\\n    event RevertInvoke(uint256 taskId, bytes reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\",\"keccak256\":\"0x7075663be9f94c9aa04bf9b3ed9e32768ad48e7c06fffd9790e783127c45899a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILucksBridge.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem,TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n\\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n    event Revert(uint8 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce, bytes reason);\\r\\n    event RetryResult(uint8 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce, bool result);\\r\\n    \\r\\n    // ============= Task functions ====================\\r\\n    \\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable user,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams) \\r\\n    external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(        \\r\\n        uint16 _dstChainId,\\r\\n        address payable user,\\r\\n        uint256 depositId, \\r\\n        lzTxObj memory _lzTxParams) \\r\\n    external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,        \\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256, uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xbaa87b71d6b223308f2b3a830d0bcb08d7ce9b46ab6a94320e44b09b88f77333\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint32 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint32 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint32 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event CreateTickets(uint256 taskId, address buyer, uint32 num, uint32 start, uint32 end);\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa7c7ab5a13d58ddf4f8399efb4f6e4de4e9840fa78361b9b43ff3bcebcd381c2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksGroup {    \\r\\n\\r\\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\\r\\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\\r\\n   \\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\\r\\n    function createGroup(uint256 taskId, uint16 seat) external;\\r\\n}\",\"keccak256\":\"0x0f80c646005b1eb282e864517e9effd2f2a54411aec731e73fbd539808d6c38f\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksVRF} from \\\"./ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"./ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"./ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"./ILucksAuto.sol\\\";\\r\\n\\r\\ninterface ILucksHelper {\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\r\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\r\\n    function checkNFTContract(address addr) external view returns (bool);\\r\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\r\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\r\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\r\\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\r\\n\\r\\n    function getProtocolFeeRecipient() external view returns (address);\\r\\n    function getProtocolFee() external view returns (uint256);\\r\\n    function getMinTargetLimit(address token) external view returns (uint256);\\r\\n    function getDrawDelay() external view returns (uint32);\\r\\n\\r\\n    function getVRF() external view returns (ILucksVRF);\\r\\n    function getGROUPS() external view returns (ILucksGroup);\\r\\n    // function getREWARDS() external view returns (ILucksRewards);\\r\\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\\r\\n    function getAutoClose() external view returns (ILucksAuto);\\r\\n    function getAutoDraw() external view returns (ILucksAuto);\\r\\n}\\r\\n\",\"keccak256\":\"0x63a0408bc27abb14b326faf40dd9156c855c71a954d950de1a707efeebc51c31\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface ILucksPaymentStrategy {\\r\\n    \\r\\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\\r\\n}\",\"keccak256\":\"0xfb95b42ebb7f656c8373266c15d91659333f1ef508bba71429ea0932fe1dcdad\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILucksVRF {\\r\\n\\r\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\r\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number, bool autoPickWinner);\\r\\n    event RspToPickWinner(uint256 taskId, bool state, bytes reason);\\r\\n\\r\\n    /**\\r\\n     * Requests randomness from a user-provided max\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\r\\n\\r\\n    /**\\r\\n     * Views random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\r\\n}\",\"keccak256\":\"0xa8ec27f6cc3dad84857802d6385ae72947957cc58e16843029c61610ea626b78\",\"license\":\"MIT\"},\"contracts/lucks/LucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksPaymentStrategy} from \\\"../interfaces/ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksGroup} from \\\"../interfaces/ILucksGroup.sol\\\";\\r\\nimport {ILucksExecutor, Ticket} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksPaymentStrategy\\r\\n * @notice It is the contract for PaymentStrategy\\r\\n */\\r\\ncontract LucksPaymentStrategy is ILucksPaymentStrategy {    \\r\\n\\r\\n    ILucksExecutor public EXECUTOR;\\r\\n    ILucksGroup public GROUPS;\\r\\n\\r\\n    constructor(address _executor, ILucksGroup _groups) {\\r\\n        EXECUTOR = ILucksExecutor(_executor);\\r\\n        GROUPS = _groups;\\r\\n    }\\r\\n\\r\\n    function getShareRate(uint16 strategyId) public override pure returns (uint32) {\\r\\n        if (strategyId == 1){ // 10%\\r\\n            return 1000;  \\r\\n        } else if (strategyId == 2) { // 20%\\r\\n            return 2000;   \\r\\n        }\\r\\n        else if (strategyId == 3){ // 30%\\r\\n            return 3000;\\r\\n        }\\r\\n        else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) \\r\\n      override public view returns (uint256, uint256[] memory, address[] memory) \\r\\n    {        \\r\\n        uint32 rate = getShareRate(strategyId);\\r\\n        uint256[] memory spliter;\\r\\n        address[] memory users;\\r\\n\\r\\n        if (rate > 0) {                               \\r\\n            users = GROUPS.getGroupUsers(taskId, winner);\\r\\n            if (users.length > 1){            \\r\\n                spliter = new uint256[](users.length);\\r\\n                uint256 splitShare = 10000 / users.length;\\r\\n                for (uint i=0; i< users.length; i++) {\\r\\n                    spliter[i] = splitShare;\\r\\n                }            \\r\\n            }             \\r\\n        }\\r\\n\\r\\n        return (rate,spliter,users);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa080d6d8f7f65a9a9007c21c625d63631c86e55d7dd91416bd8e03ba8a425841\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161071738038061071783398101604081905261002f91610060565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b2565b6000806040838503121561007357600080fd5b825161007e8161009a565b602084015190925061008f8161009a565b809150509250929050565b6001600160a01b03811681146100af57600080fd5b50565b610656806100c16000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631a7c07fe14610051578063630dc7cb1461007e57806374a0a251146100c3578063d12c51f8146100e5575b600080fd5b61006461005f366004610405565b610105565b60405163ffffffff90911681526020015b60405180910390f35b60005461009e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610075565b6100d66100d1366004610427565b610156565b60405161007593929190610466565b60015461009e9073ffffffffffffffffffffffffffffffffffffffff1681565b60008161ffff166001141561011d57506103e8919050565b8161ffff166002141561013357506107d0919050565b8161ffff16600314156101495750610bb8919050565b506000919050565b919050565b6000606080600061016687610105565b905060608063ffffffff8316156102e7576001546040517fdead6c1e0000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff8a811660248301529091169063dead6c1e9060440160006040518083038186803b1580156101e957600080fd5b505afa1580156101fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610243919081019061031b565b90506001815111156102e757805167ffffffffffffffff811115610269576102696105cc565b604051908082528060200260200182016040528015610292578160200160208202803683370190505b509150600081516127106102a69190610502565b905060005b82518110156102e457818482815181106102c7576102c761059d565b6020908102919091010152806102dc8161053d565b9150506102ab565b50505b63ffffffff90921694509250905093509350939050565b8051610151816105fb565b803561ffff8116811461015157600080fd5b6000602080838503121561032e57600080fd5b825167ffffffffffffffff8082111561034657600080fd5b818501915085601f83011261035a57600080fd5b81518181111561036c5761036c6105cc565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156103af576103af6105cc565b604052828152858101935084860182860187018a10156103ce57600080fd5b600095505b838610156103f8576103e4816102fe565b8552600195909501949386019386016103d3565b5098975050505050505050565b60006020828403121561041757600080fd5b61042082610309565b9392505050565b60008060006060848603121561043c57600080fd5b61044584610309565b92506020840135610455816105fb565b929592945050506040919091013590565b6000606082018583526020606081850152818651808452608086019150828801935060005b818110156104a75784518352938301939183019160010161048b565b50508481036040860152855180825290820192508186019060005b818110156104f457825173ffffffffffffffffffffffffffffffffffffffff16855293830193918301916001016104c2565b509298975050505050505050565b600082610538577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610596577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461061d57600080fd5b5056fea264697066735822122049ea0c864c21563ded2500355f044bf10be6d35d81148c0306ca813bcf42bff064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631a7c07fe14610051578063630dc7cb1461007e57806374a0a251146100c3578063d12c51f8146100e5575b600080fd5b61006461005f366004610405565b610105565b60405163ffffffff90911681526020015b60405180910390f35b60005461009e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610075565b6100d66100d1366004610427565b610156565b60405161007593929190610466565b60015461009e9073ffffffffffffffffffffffffffffffffffffffff1681565b60008161ffff166001141561011d57506103e8919050565b8161ffff166002141561013357506107d0919050565b8161ffff16600314156101495750610bb8919050565b506000919050565b919050565b6000606080600061016687610105565b905060608063ffffffff8316156102e7576001546040517fdead6c1e0000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff8a811660248301529091169063dead6c1e9060440160006040518083038186803b1580156101e957600080fd5b505afa1580156101fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610243919081019061031b565b90506001815111156102e757805167ffffffffffffffff811115610269576102696105cc565b604051908082528060200260200182016040528015610292578160200160208202803683370190505b509150600081516127106102a69190610502565b905060005b82518110156102e457818482815181106102c7576102c761059d565b6020908102919091010152806102dc8161053d565b9150506102ab565b50505b63ffffffff90921694509250905093509350939050565b8051610151816105fb565b803561ffff8116811461015157600080fd5b6000602080838503121561032e57600080fd5b825167ffffffffffffffff8082111561034657600080fd5b818501915085601f83011261035a57600080fd5b81518181111561036c5761036c6105cc565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156103af576103af6105cc565b604052828152858101935084860182860187018a10156103ce57600080fd5b600095505b838610156103f8576103e4816102fe565b8552600195909501949386019386016103d3565b5098975050505050505050565b60006020828403121561041757600080fd5b61042082610309565b9392505050565b60008060006060848603121561043c57600080fd5b61044584610309565b92506020840135610455816105fb565b929592945050506040919091013590565b6000606082018583526020606081850152818651808452608086019150828801935060005b818110156104a75784518352938301939183019160010161048b565b50508481036040860152855180825290820192508186019060005b818110156104f457825173ffffffffffffffffffffffffffffffffffffffff16855293830193918301916001016104c2565b509298975050505050505050565b600082610538577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610596577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461061d57600080fd5b5056fea264697066735822122049ea0c864c21563ded2500355f044bf10be6d35d81148c0306ca813bcf42bff064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Openluck LucksPaymentStrategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "It is the contract for PaymentStrategy",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12553,
        "contract": "contracts/lucks/LucksPaymentStrategy.sol:LucksPaymentStrategy",
        "label": "EXECUTOR",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILucksExecutor)8592"
      },
      {
        "astId": 12556,
        "contract": "contracts/lucks/LucksPaymentStrategy.sol:LucksPaymentStrategy",
        "label": "GROUPS",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILucksGroup)8646"
      }
    ],
    "types": {
      "t_contract(ILucksExecutor)8592": {
        "encoding": "inplace",
        "label": "contract ILucksExecutor",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksGroup)8646": {
        "encoding": "inplace",
        "label": "contract ILucksGroup",
        "numberOfBytes": "20"
      }
    }
  }
}
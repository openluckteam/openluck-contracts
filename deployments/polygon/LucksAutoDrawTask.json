{
  "address": "0xb0b6312e68D02437911E02E52DFC49Dc9a762449",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperRegAddr",
          "type": "address"
        },
        {
          "internalType": "contract ILucksExecutor",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "contract ILucksBridge",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_lzChainId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "FundsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "KeeperRegistryAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "RevertInvoke",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BATCH_PERFORM_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BRIDGE",
      "outputs": [
        {
          "internalType": "contract ILucksBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DST_GAS_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR",
      "outputs": [
        {
          "internalType": "contract ILucksExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEEPER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUOTE_FEE_ADD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "addTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "taskIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "endTimes",
          "type": "uint256[]"
        }
      ],
      "name": "addTasks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "first",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQueueTasks",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "next",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "prev",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "removeTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "setBatchPerformLimist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksBridge",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setDstGasAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksExecutor",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperRegAddr",
          "type": "address"
        }
      ],
      "name": "setKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setQuoteFeeAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "top",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9e1734a4b28607bafae0f9c39b2c835610538518792d6abb2a8e691dfba54498",
  "receipt": {
    "to": null,
    "from": "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
    "contractAddress": "0xb0b6312e68D02437911E02E52DFC49Dc9a762449",
    "transactionIndex": 7,
    "gasUsed": "2015386",
    "logsBloom": "0x
    "blockHash": "0x63652475b2278fee1eeaebd14864752fa30db9c13748b9c4ae2d3ffee4d057a0",
    "transactionHash": "0x9e1734a4b28607bafae0f9c39b2c835610538518792d6abb2a8e691dfba54498",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 31689568,
        "transactionHash": "0x9e1734a4b28607bafae0f9c39b2c835610538518792d6abb2a8e691dfba54498",
        "address": "0xb0b6312e68D02437911E02E52DFC49Dc9a762449",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b770f460978c456d69bc46463dfda71feee60ad"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x63652475b2278fee1eeaebd14864752fa30db9c13748b9c4ae2d3ffee4d057a0"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 31689568,
        "transactionHash": "0x9e1734a4b28607bafae0f9c39b2c835610538518792d6abb2a8e691dfba54498",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005b770f460978c456d69bc46463dfda71feee60ad",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001ad9af92ac1652c00000000000000000000000000000000000000000000000607039171089621a00000000000000000000000000000000000000000000000337396b5ddae7278e40000000000000000000000000000000000000000000000060555f677ddd4bc74000000000000000000000000000000000000000000000033754450d6d933de10",
        "logIndex": 15,
        "blockHash": "0x63652475b2278fee1eeaebd14864752fa30db9c13748b9c4ae2d3ffee4d057a0"
      }
    ],
    "blockNumber": 31689568,
    "cumulativeGasUsed": "2762813",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x02777053d6764996e594c3E88AF1D58D5363a2e6",
    "0x95077DaaeA7d45A5D44eD269ec142E78aA13153b",
    "0xEEE1ceD926fEf190dB0Ca3fC45b619cBb76a84C8",
    9
  ],
  "numDeployments": 1,
  "solcInputHash": "ba7b0f1e5ca42b8642fc7cfca7a1e343",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperRegAddr\",\"type\":\"address\"},{\"internalType\":\"contract ILucksExecutor\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"contract ILucksBridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_lzChainId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"KeeperRegistryAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"RevertInvoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_PERFORM_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"contract ILucksBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DST_GAS_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"contract ILucksExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUOTE_FEE_ADD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"addTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"taskIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTimes\",\"type\":\"uint256[]\"}],\"name\":\"addTasks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"first\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQueueTasks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"next\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"prev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"removeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setBatchPerformLimist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksBridge\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDstGasAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksExecutor\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperRegAddr\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setQuoteFeeAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"top\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_bridge\":\"The LucksBridge contract\",\"_executor\":\"The LucksExecutor contract\",\"_keeperRegAddr\":\"The address of the keeper registry contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,address)\":{\"params\":{\"amount\":\"The amount of eth (in wei) to withdraw\",\"payee\":\"The address to pay\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pause()\":{\"notice\":\"Pauses the contrac t, which prevents executing performUpkeep\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"},\"setBridge(address)\":{\"notice\":\"set BRIDGE\"},\"setExecutor(address)\":{\"notice\":\"set operator\"},\"setKeeper(address)\":{\"notice\":\"Sets the keeper registry address\"},\"unpause()\":{\"notice\":\"Unpauses the contract\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws the contract balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucks/LucksAutoDrawTask.sol\":\"LucksAutoDrawTask\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);    \\r\\n    \\r\\n    event RevertInvoke(uint256 taskId, string reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function addTasks(uint256[] memory taskIds, uint[] memory endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\",\"keccak256\":\"0x070b6357514440f3f4586e635590f33a94694a0e190ff94afe513520ee9cc98f\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n    bytes zroPaymentAddr; //  the address of the ZRO token holder who would pay for the transaction\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n    \\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n    event InvokeFailed(uint64 nonce, string reason);\\r\\n\\r\\n    // ============= Task functions ====================\\r\\n\\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _refundAddress,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _refundAddress,\\r\\n        address payable _user,\\r\\n        address nftContract,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,\\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateCreateTaskFee(\\r\\n        uint16 _dstChainId,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateWithdrawNFTsFee(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        address nftContract,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n}\\r\\n\",\"keccak256\":\"0xb94f71c2ea0c179500bf550ed44f3befa33451172073f4fa3b19c635bbca2a16\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\nstruct TaskInfo {\\r\\n    uint256 lastTID;\\r\\n    uint256 closeTime;\\r\\n    uint256 finalNo;\\r\\n}\\r\\n \\r\\nstruct UserState {\\r\\n    uint256 num; // user buyed tickets count\\r\\n    bool claimed;  // user claimed\\r\\n}\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint256 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);    \\r\\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\\r\\n\\r\\n    event TransferFee(uint256 taskId, address to, address token, uint256 amount); // for protocol\\r\\n    event TransferShareAmount(uint256 taskId, address to, address token, uint256 amount); // for winners\\r\\n    event TransferPayment(uint256 taskId, address to, address token, uint256 amount); // for seller\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\\r\\n    function isFail(uint256 taskId) external view returns(bool);\\r\\n    function getChainId() external view returns (uint16);\\r\\n    function getUserState(uint256 taskId, address user) external view returns(UserState memory);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function reCreateTask(uint256 taskId, TaskItem memory item, TaskExt memory ext) external payable;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x891c40a613efa635e5c6bbbe2a00d0e6929586808bba1dc50da8494a57cdfb33\",\"license\":\"MIT\"},\"contracts/libraries/SortedLinkMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\nlibrary SortedLinkMap {\\r\\n\\r\\n    struct Item {        \\r\\n        uint id;\\r\\n        uint value;\\r\\n        uint leftId;\\r\\n    }\\r\\n\\r\\n    uint constant None = uint(0);\\r\\n\\r\\n    struct SortedMap {\\r\\n        uint count;\\r\\n        uint maxId;\\r\\n        mapping(uint => uint) keys; // id => id , linked list\\r\\n        mapping(uint => Item) nodes; // id => value item\\r\\n    }\\r\\n    \\r\\n    function add(SortedMap storage self, uint id, uint value) internal {                \\r\\n\\r\\n        require(id > 0, \\\"require id > 0\\\");\\r\\n        \\r\\n        if (self.nodes[id].value > 0){\\r\\n            // not allow duplicate key\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint leftId = findPrevByValue(self, value);\\r\\n        uint rightId = next(self, leftId);\\r\\n\\r\\n        // update prev item link\\r\\n        self.keys[leftId] = id;\\r\\n\\r\\n        // update current item\\r\\n        self.keys[id] = rightId;        \\r\\n        self.nodes[id] = Item(id, value, leftId);   \\r\\n\\r\\n        // update max item\\r\\n        if (rightId == None) {\\r\\n            self.maxId = id;\\r\\n        }        \\r\\n        else {\\r\\n            // upate next item link\\r\\n            self.nodes[rightId].leftId = id;   \\r\\n        }\\r\\n\\r\\n        // update counts\\r\\n        self.count ++;                    \\r\\n    }\\r\\n\\r\\n    function remove(SortedMap storage self, uint id) internal {\\r\\n\\r\\n        if (exists(self, id)) {\\r\\n\\r\\n            // get left and right\\r\\n            uint leftId = prev(self, id);\\r\\n            uint rightId = next(self, id);\\r\\n\\r\\n            self.keys[leftId] = rightId;\\r\\n\\r\\n            if (rightId > 0) {\\r\\n                self.nodes[rightId].leftId = leftId;\\r\\n            }\\r\\n\\r\\n            // update max item\\r\\n            if (rightId == None) {\\r\\n                self.maxId = leftId;\\r\\n            }   \\r\\n\\r\\n            delete self.nodes[id]; // remove value\\r\\n            delete self.keys[id]; // remove key\\r\\n\\r\\n            self.count --;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function exists(SortedMap storage self, uint id) internal view returns(bool) {\\r\\n        require(id > 0);\\r\\n        return self.nodes[id].value > 0;\\r\\n    }\\r\\n\\r\\n    function first(SortedMap storage self) internal view returns(uint) {\\r\\n        return next(self, 0);\\r\\n    }\\r\\n       \\r\\n    function last(SortedMap storage self) internal view returns(uint) {\\r\\n        return self.maxId;\\r\\n    }\\r\\n\\r\\n    function size(SortedMap storage self) internal view returns(uint) {\\r\\n        return self.count;\\r\\n    }\\r\\n\\r\\n    function findPrevByValue(SortedMap storage self, uint target) internal view returns(uint256) {  \\r\\n\\r\\n        require(target > 0, \\\"require target > 0\\\");\\r\\n\\r\\n        if (self.count == 0) return None;\\r\\n        \\r\\n        // try to match last item\\r\\n        uint lastId = self.maxId;        \\r\\n        uint lastValue = self.nodes[lastId].value;\\r\\n        if (target >= lastValue) {            \\r\\n            return lastId; // return max\\r\\n        }\\r\\n\\r\\n        // try to match first item\\r\\n        uint firstId = first(self);\\r\\n        uint firsValue = self.nodes[firstId].value;\\r\\n        if (target <= firsValue) {\\r\\n            return None;  // return head\\r\\n        }\\r\\n\\r\\n        uint mid = (firsValue + lastValue) >> 1;\\r\\n\\r\\n        if (target >= mid) {\\r\\n            // find prev item step by step (right to left)\\r\\n            uint curentId = lastId;\\r\\n            while (curentId > 0) {\\r\\n                curentId = prev(self, curentId);\\r\\n                if (curentId > 0 && target >= self.nodes[curentId].value) {\\r\\n                    return curentId;\\r\\n                }        \\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            // find next item step by step (left to right)\\r\\n            uint curentId = firstId;\\r\\n            while (curentId > 0) { // the lastId node is zero\\r\\n                curentId = next(self, curentId);\\r\\n                if (curentId > 0 && target >= self.nodes[curentId].value) {\\r\\n                    return curentId;\\r\\n                }        \\r\\n            }\\r\\n        }\\r\\n\\r\\n        return None;\\r\\n    }\\r\\n\\r\\n    function prev(SortedMap storage self, uint id) internal view returns(uint256) {\\r\\n        if (exists(self, id)) {\\r\\n            return self.nodes[id].leftId;\\r\\n        }  \\r\\n        return None;     \\r\\n    }\\r\\n\\r\\n    function next(SortedMap storage self, uint id) internal view returns(uint256) {\\r\\n        uint nextId = self.keys[id];\\r\\n        return nextId;\\r\\n    }  \\r\\n\\r\\n    function get(SortedMap storage self, uint id) internal view returns(Item memory) {\\r\\n        return self.nodes[id];\\r\\n    }  \\r\\n\\r\\n    function top(SortedMap storage self, uint num) internal view returns(uint[] memory){        \\r\\n        if(num > self.count) {\\r\\n            num = self.count;\\r\\n        }\\r\\n        if (num < 1) {\\r\\n            return new uint[](0);\\r\\n        }\\r\\n\\r\\n        uint[] memory items = new uint[](num);\\r\\n\\r\\n        uint curentId = first(self);\\r\\n        for(uint i=0; i < num; i++) {            \\r\\n            if (curentId > 0) {\\r\\n                items[i] = curentId;\\r\\n            }   \\r\\n            curentId = next(self, curentId);\\r\\n        }\\r\\n        \\r\\n        return items;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3188c257d3770ed356a1134707fe7feae9b4e96f758cdd1bf0eb60f90f618b2e\",\"license\":\"MIT\"},\"contracts/lucks/LucksAutoDrawTask.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Chainlink contracts\\r\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksBridge, lzTxObj} from \\\"../interfaces/ILucksBridge.sol\\\";\\r\\nimport \\\"./LucksAutoTask.sol\\\";\\r\\n\\r\\ncontract LucksAutoDrawTask is LucksAutoTask, KeeperCompatibleInterface {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint16 public immutable lzChainId;\\r\\n\\r\\n    ILucksBridge public BRIDGE;\\r\\n\\r\\n    // add a little more quote fee 0.000001\\r\\n    uint256 public QUOTE_FEE_ADD = 1000000000000;\\r\\n\\r\\n    /**\\r\\n    * @param _keeperRegAddr The address of the keeper registry contract\\r\\n    * @param _executor The LucksExecutor contract\\r\\n    * @param _bridge The LucksBridge contract\\r\\n    */\\r\\n    constructor(address _keeperRegAddr, ILucksExecutor _executor, ILucksBridge _bridge, uint16 _lzChainId) LucksAutoTask(_keeperRegAddr, _executor){        \\r\\n        DST_GAS_AMOUNT = 550000;\\r\\n        BRIDGE = _bridge;\\r\\n        lzChainId = _lzChainId;\\r\\n    }    \\r\\n\\r\\n    //  ============ internal  functions  ============\\r\\n\\r\\n    function invokeTasks(uint256[] memory _taskIds) internal override {\\r\\n\\r\\n        lzTxObj memory _lzTxObj = lzTxObj(DST_GAS_AMOUNT, 0, bytes(\\\"0x\\\"), bytes(\\\"0x\\\"));\\r\\n              \\r\\n        for (uint256 i = 0; i < _taskIds.length; i++) {\\r\\n\\r\\n            uint256 taskId = _taskIds[i];\\r\\n            _removeTask(taskId);\\r\\n\\r\\n            uint256 quoteLayerZeroFee = 0;\\r\\n            TaskItem memory item = EXECUTOR.getTask(taskId);\\r\\n            if (item.nftChainId != lzChainId) {\\r\\n                if (address(BRIDGE) != address(0)) {\\r\\n                    (quoteLayerZeroFee,) = BRIDGE.quoteLayerZeroFee(item.nftChainId, 2, \\\"\\\", _lzTxObj);\\r\\n                    quoteLayerZeroFee = quoteLayerZeroFee.add(QUOTE_FEE_ADD);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (address(this).balance < quoteLayerZeroFee) {\\r\\n                emit RevertInvoke(taskId, \\\"AutoDraw: not enough fees\\\");\\r\\n            }            \\r\\n            else {             \\r\\n\\r\\n                try EXECUTOR.pickWinner{value: quoteLayerZeroFee}(taskId, _lzTxObj){\\r\\n\\r\\n                } catch(bytes memory reason) {\\r\\n                    emit RevertInvoke(taskId, _getRevertMsg(reason));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //  ============ Keeper  functions  ============\\r\\n\\r\\n    function checkUpkeep(bytes calldata /* checkData */) external view override whenNotPaused returns (bool upkeepNeeded, bytes memory performData) {\\r\\n        uint256[] memory ids = getQueueTasks();\\r\\n        upkeepNeeded = ids.length > 0;\\r\\n        performData = abi.encode(ids);\\r\\n        return (upkeepNeeded, performData);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata performData) external override whenNotPaused onlyKeeper {\\r\\n        uint256[] memory ids = abi.decode(performData, (uint256[]));\\r\\n        invokeTasks(ids);\\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============      \\r\\n\\r\\n    /**\\r\\n    @notice set BRIDGE\\r\\n     */\\r\\n    function setBridge(ILucksBridge _bridge) external onlyOwner {\\r\\n        BRIDGE = _bridge;\\r\\n    }\\r\\n\\r\\n    function setQuoteFeeAdd(uint256 amount) external onlyOwner {\\r\\n        QUOTE_FEE_ADD = amount;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xfb17980088d071816a40f1d27a0a3f2a55cc52dba6afa64def66b295a7808a5f\",\"license\":\"MIT\"},\"contracts/lucks/LucksAutoTask.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\nimport {ILucksAuto,Task} from \\\"../interfaces/ILucksAuto.sol\\\";\\r\\nimport {lzTxObj} from \\\"../interfaces/ILucksBridge.sol\\\";\\r\\nimport \\\"../libraries/SortedLinkMap.sol\\\";\\r\\n\\r\\nabstract contract LucksAutoTask is ILucksAuto, Ownable, Pausable {\\r\\n\\r\\n    using SortedLinkMap for SortedLinkMap.SortedMap;    \\r\\n\\r\\n    SortedLinkMap.SortedMap internal taskList;\\r\\n    \\r\\n    uint256 public BATCH_PERFORM_LIMIT = 5; // perform limist, default 5\\r\\n    uint256 public DST_GAS_AMOUNT = 0; // layer zero dstGasAmount\\r\\n\\r\\n    address public KEEPER; // chainLink keeper Registry Address\\r\\n    ILucksExecutor public EXECUTOR;    \\r\\n\\r\\n    /**\\r\\n    * @param _keeperRegAddr The address of the keeper registry contract\\r\\n    * @param _executor The LucksExecutor contract\\r\\n    */\\r\\n    constructor(address _keeperRegAddr, ILucksExecutor _executor) {        \\r\\n        KEEPER = _keeperRegAddr;\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyKeeper() {\\r\\n        require(msg.sender == KEEPER || msg.sender == owner(), \\\"onlyKeeperRegistry\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyExecutor() {\\r\\n        require(msg.sender == address(EXECUTOR) || msg.sender == owner(), \\\"onlyExecutor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Receive funds\\r\\n    */\\r\\n    receive() external payable {\\r\\n        emit FundsAdded(msg.value, address(this).balance, msg.sender);\\r\\n    }\\r\\n\\r\\n    //  ============ Public  functions  ============\\r\\n\\r\\n    function size() external view returns(uint256) {\\r\\n        return taskList.count;\\r\\n    }\\r\\n\\r\\n    function first() external view returns(uint256) {\\r\\n        return taskList.first();\\r\\n    }\\r\\n\\r\\n    function last() external view returns(uint256) {\\r\\n        return taskList.last();\\r\\n    }\\r\\n\\r\\n    function prev(uint256 taskId) external view returns(uint256) {\\r\\n        return taskList.prev(taskId);\\r\\n    }   \\r\\n\\r\\n    function next(uint256 taskId) external view returns(uint256) {\\r\\n        return taskList.next(taskId);\\r\\n    }    \\r\\n\\r\\n    function get(uint256 taskId) external view returns(uint256) {\\r\\n        return taskList.nodes[taskId].value;\\r\\n    }\\r\\n\\r\\n    function top(uint256 num) external view returns(uint256[] memory) {\\r\\n        return taskList.top(num);\\r\\n    }\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external override onlyExecutor {    \\r\\n        if (taskId > 0 && endTime > 0) {            \\r\\n            taskList.add(taskId, endTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addTasks(uint256[] memory taskIds, uint[] memory endTimes) external override onlyExecutor {    \\r\\n        require(taskIds.length > 0 && taskIds.length == endTimes.length, \\\"Invalid len\\\");\\r\\n        for(uint i=0; i < taskIds.length; i++) {\\r\\n            if (taskIds[i] > 0 && endTimes[i] > 0) {            \\r\\n                taskList.add(taskIds[i], endTimes[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeTask(uint256 taskId) external override onlyExecutor {        \\r\\n        _removeTask(taskId);\\r\\n    }\\r\\n\\r\\n    function getQueueTasks() public override view virtual returns (uint256[] memory) {\\r\\n        \\r\\n        uint256[] memory ids = new uint256[](BATCH_PERFORM_LIMIT);\\r\\n\\r\\n        uint256 count = 0;\\r\\n        uint taskId = taskList.first();\\r\\n       \\r\\n        while (taskId > 0 && count < BATCH_PERFORM_LIMIT) {\\r\\n                  \\r\\n            if (taskList.nodes[taskId].value <= block.timestamp) {                \\r\\n                ids[count] = taskId;    \\r\\n                count++;                   \\r\\n            }else {\\r\\n                break;\\r\\n            }\\r\\n            taskId = taskList.next(taskId);           \\r\\n        }\\r\\n       \\r\\n        if (count != BATCH_PERFORM_LIMIT) {\\r\\n            assembly {\\r\\n                mstore(ids, count)\\r\\n            }\\r\\n        }\\r\\n        return ids;   \\r\\n    }\\r\\n\\r\\n    //  ============ internal  functions  ============\\r\\n\\r\\n    function _removeTask(uint256 taskId) internal {                \\r\\n        taskList.remove(taskId);\\r\\n    }\\r\\n\\r\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return '';\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    function invokeTasks(uint256[] memory _taskIds) internal virtual {       \\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n    \\r\\n    /**\\r\\n    * @notice Pauses the contrac t, which prevents executing performUpkeep\\r\\n    */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Unpauses the contract\\r\\n    */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Withdraws the contract balance\\r\\n    * @param amount The amount of eth (in wei) to withdraw\\r\\n    * @param payee The address to pay\\r\\n    */\\r\\n    function withdraw(uint256 amount, address payable payee) external onlyOwner {\\r\\n        require(payee != address(0));\\r\\n        emit FundsWithdrawn(amount, payee);\\r\\n        payee.transfer(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Sets the keeper registry address\\r\\n    */\\r\\n    function setKeeper(address _keeperRegAddr) public onlyOwner {\\r\\n        require(_keeperRegAddr != address(0));\\r\\n        emit KeeperRegistryAddressUpdated(KEEPER, _keeperRegAddr);\\r\\n        KEEPER = _keeperRegAddr;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setBatchPerformLimist(uint256 num) public onlyOwner {      \\r\\n        require(num > 0, \\\"Invalid limit num\\\");\\r\\n        BATCH_PERFORM_LIMIT = num;\\r\\n    }\\r\\n\\r\\n    function setDstGasAmount(uint256 amount) public onlyOwner {      \\r\\n        DST_GAS_AMOUNT = amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice set operator\\r\\n     */\\r\\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x3ac7188b89d5e03fbd0504a5aa648a27e0cffb02ccc5eced87ba56c3e6cbaa67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260058055600060065564e8d4a51000600a553480156200002357600080fd5b506040516200224638038062002246833981016040819052620000469162000111565b83836200005333620000c1565b6000805460ff60a01b19169055600780546001600160a01b03199081166001600160a01b0394851617909155600880548216928416929092179091556208647060065560098054909116939091169290921790915560f01b6001600160f01b03191660805250620001989050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156200012857600080fd5b845162000135816200017f565b602086015190945062000148816200017f565b60408601519093506200015b816200017f565b606086015190925061ffff811681146200017457600080fd5b939692955090935050565b6001600160a01b03811681146200019557600080fd5b50565b60805160f01c612088620001be6000396000818161051f015261129101526120886000f3fe6080604052600436106101f05760003560e01c8063715018a61161010d5780639507d39a116100a0578063c81c6c7c1161006f578063c81c6c7c146105ef578063d6ff17a014610604578063edd004e51461061a578063ee9a31a21461063a578063f2fde38b1461065a57600080fd5b80639507d39a14610569578063aa0a310014610599578063b15269a5146105b9578063c3084117146105cf57600080fd5b80638da5cb5b116100dc5780638da5cb5b146104cf5780638dd14802146104ed578063917c41561461050d578063949d225d1461055457600080fd5b8063715018a614610465578063748747e61461047a5780638456cb591461049a578063862a179e146104af57600080fd5b80633f4ba83a116101855780635c975abb116101545780635c975abb146103bf57806362c41534146103e9578063630dc7cb146103ff5780636e04ff0d1461043757600080fd5b80633f4ba83a146103555780634585e33b1461036a57806346bf33221461038a57806347799da8146103aa57600080fd5b8063257baa3a116101c1578063257baa3a146102bc578063313ae541146102dc57806335671214146103125780633df4ddf41461034057600080fd5b8062b34ebd1461023a578062f714ce1461025c5780630fbeb0321461027c5780631c3c0ea81461029c57600080fd5b366102355760408051348152476020820152338183015290517fc6f3fb0fec49e4877342d4625d77a632541f55b7aae0f9d0b34c69b3478706dc9181900360600190a1005b600080fd5b34801561024657600080fd5b5061025a610255366004611cfb565b61067a565b005b34801561026857600080fd5b5061025a610277366004611ccb565b6106e7565b34801561028857600080fd5b5061025a610297366004611cb2565b6107a0565b3480156102a857600080fd5b5061025a6102b7366004611997565b6107cf565b3480156102c857600080fd5b5061025a6102d73660046119f1565b61081b565b3480156102e857600080fd5b506102fc6102f7366004611cb2565b610953565b6040516103099190611db8565b60405180910390f35b34801561031e57600080fd5b5061033261032d366004611cb2565b610966565b604051908152602001610309565b34801561034c57600080fd5b50610332610973565b34801561036157600080fd5b5061025a610984565b34801561037657600080fd5b5061025a610385366004611a55565b6109b8565b34801561039657600080fd5b5061025a6103a5366004611cb2565b610a5f565b3480156103b657600080fd5b50600254610332565b3480156103cb57600080fd5b50600054600160a01b900460ff166040519015158152602001610309565b3480156103f557600080fd5b50610332600a5481565b34801561040b57600080fd5b5060085461041f906001600160a01b031681565b6040516001600160a01b039091168152602001610309565b34801561044357600080fd5b50610457610452366004611a55565b610a8e565b604051610309929190611dfc565b34801561047157600080fd5b5061025a610af9565b34801561048657600080fd5b5061025a610495366004611997565b610b2d565b3480156104a657600080fd5b5061025a610bd3565b3480156104bb57600080fd5b5060075461041f906001600160a01b031681565b3480156104db57600080fd5b506000546001600160a01b031661041f565b3480156104f957600080fd5b5061025a610508366004611997565b610c05565b34801561051957600080fd5b506105417f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff9091168152602001610309565b34801561056057600080fd5b50600154610332565b34801561057557600080fd5b50610332610584366004611cb2565b60009081526004602052604090206001015490565b3480156105a557600080fd5b5061025a6105b4366004611cb2565b610c51565b3480156105c557600080fd5b5061033260065481565b3480156105db57600080fd5b5061025a6105ea366004611cb2565b610cc4565b3480156105fb57600080fd5b506102fc610d0f565b34801561061057600080fd5b5061033260055481565b34801561062657600080fd5b50610332610635366004611cb2565b610df6565b34801561064657600080fd5b5060095461041f906001600160a01b031681565b34801561066657600080fd5b5061025a610675366004611997565b610e0a565b6008546001600160a01b031633148061069d57506000546001600160a01b031633145b6106c25760405162461bcd60e51b81526004016106b990611e17565b60405180910390fd5b6000821180156106d25750600081115b156106e3576106e360018383610ea2565b5050565b6000546001600160a01b031633146107115760405162461bcd60e51b81526004016106b990611e67565b6001600160a01b03811661072457600080fd5b604080518381526001600160a01b03831660208201527f6141b54b56b8a52a8c6f5cd2a857f6117b18ffbf4d46bd3106f300a839cbf5ea910160405180910390a16040516001600160a01b0382169083156108fc029084906000818181858888f1935050505015801561079b573d6000803e3d6000fd5b505050565b6000546001600160a01b031633146107ca5760405162461bcd60e51b81526004016106b990611e67565b600655565b6000546001600160a01b031633146107f95760405162461bcd60e51b81526004016106b990611e67565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b031633148061083e57506000546001600160a01b031633145b61085a5760405162461bcd60e51b81526004016106b990611e17565b6000825111801561086c575080518251145b6108a65760405162461bcd60e51b815260206004820152600b60248201526a24b73b30b634b2103632b760a91b60448201526064016106b9565b60005b825181101561079b5760008382815181106108c6576108c6612011565b60200260200101511180156108f4575060008282815181106108ea576108ea612011565b6020026020010151115b156109415761094183828151811061090e5761090e612011565b602002602001015183838151811061092857610928612011565b60200260200101516001610ea29092919063ffffffff16565b8061094b81611fe0565b9150506108a9565b6060610960600183610faf565b92915050565b6000610960600183611092565b600061097f60016110c6565b905090565b6000546001600160a01b031633146109ae5760405162461bcd60e51b81526004016106b990611e67565b6109b66110dc565b565b600054600160a01b900460ff16156109e25760405162461bcd60e51b81526004016106b990611e3d565b6007546001600160a01b0316331480610a0557506000546001600160a01b031633145b610a465760405162461bcd60e51b81526020600482015260126024820152716f6e6c794b6565706572526567697374727960701b60448201526064016106b9565b6000610a54828401846119b4565b905061079b81611179565b6000546001600160a01b03163314610a895760405162461bcd60e51b81526004016106b990611e67565b600a55565b60008054606090600160a01b900460ff1615610abc5760405162461bcd60e51b81526004016106b990611e3d565b6000610ac6610d0f565b90506000815111925080604051602001610ae09190611db8565b6040516020818303038152906040529150509250929050565b6000546001600160a01b03163314610b235760405162461bcd60e51b81526004016106b990611e67565b6109b660006114d6565b6000546001600160a01b03163314610b575760405162461bcd60e51b81526004016106b990611e67565b6001600160a01b038116610b6a57600080fd5b600754604080516001600160a01b03928316815291831660208301527fb732223055abcde751d7a24272ffc8a3aa571cb72b443969a4199b7ecd59f8b9910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610bfd5760405162461bcd60e51b81526004016106b990611e67565b6109b6611526565b6000546001600160a01b03163314610c2f5760405162461bcd60e51b81526004016106b990611e67565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610c7b5760405162461bcd60e51b81526004016106b990611e67565b60008111610cbf5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206c696d6974206e756d60781b60448201526064016106b9565b600555565b6008546001600160a01b0316331480610ce757506000546001600160a01b031633145b610d035760405162461bcd60e51b81526004016106b990611e17565b610d0c8161158b565b50565b6060600060055467ffffffffffffffff811115610d2e57610d2e612027565b604051908082528060200260200182016040528015610d57578160200160208202803683370190505b509050600080610d6760016110c6565b90505b600081118015610d7b575060055482105b15610de1576000818152600460205260409020600101544210610dc85780838381518110610dab57610dab612011565b602090810291909101015281610dc081611fe0565b925050610dcd565b610de1565b600090815260036020526040902054610d6a565b6005548214610dee578183525b509092915050565b600081815260036020526040812054610960565b6000546001600160a01b03163314610e345760405162461bcd60e51b81526004016106b990611e67565b6001600160a01b038116610e995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b9565b610d0c816114d6565b60008211610ee35760405162461bcd60e51b815260206004820152600e60248201526d072657175697265206964203e20360941b60448201526064016106b9565b600082815260038401602052604090206001015415610f0157505050565b6000610f0d8483611596565b600081815260028681016020908152604080842080549089905588855281852081905581516060810183528981528084018981528184018881528b885260038d019095529290952094518555905160018501559051929091019190915590915080610f7e5760018501849055610f95565b600081815260038601602052604090206002018490555b8454856000610fa383611fe0565b91905055505050505050565b8154606090821115610fc057825491505b6001821015610fde5750604080516000815260208101909152610960565b60008267ffffffffffffffff811115610ff957610ff9612027565b604051908082528060200260200182016040528015611022578160200160208202803683370190505b5090506000611030856110c6565b905060005b84811015611088578115611063578183828151811061105657611056612011565b6020026020010181815250505b600082815260028701602052604090205491508061108081611fe0565b915050611035565b5090949350505050565b600061109e8383611718565b156110bd57506000818152600383016020526040902060020154610960565b50600092915050565b6000808052600282016020526040812054610960565b600054600160a01b900460ff1661112c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106b9565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000604051806080016040528060065481526020016000815260200160405180604001604052806002815260200161060f60f31b815250815260200160405180604001604052806002815260200161060f60f31b815250815250905060005b825181101561079b5760008382815181106111f5576111f5612011565b602002602001015190506112088161158b565b600854604051630eb2f3bf60e11b81526004810183905260009182916001600160a01b0390911690631d65e77e9060240160006040518083038186803b15801561125157600080fd5b505afa158015611265573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261128d9190810190611b5b565b90507f000000000000000000000000000000000000000000000000000000000000000061ffff16816020015161ffff161461136f576009546001600160a01b03161561136f5760095460208201516040516306c2267f60e21b81526001600160a01b0390921691631b0899fc9161130b916002908a90600401611e9c565b604080518083038186803b15801561132257600080fd5b505afa158015611336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135a9190611d1d565b50600a5490925061136c908390611742565b91505b814710156113ea577f8a8daba70101a3ef953fcbe396dcf4370b8204bff0f421bdeaac9867e8fcfe04836040516113dd9181526040602082018190526019908201527f4175746f447261773a206e6f7420656e6f756768206665657300000000000000606082015260800190565b60405180910390a16114c0565b60085460405163723d784d60e11b81526001600160a01b039091169063e47af09a90849061141e9087908a90600401611ee9565b6000604051808303818588803b15801561143757600080fd5b505af193505050508015611449575060015b6114c0573d808015611477576040519150601f19603f3d011682016040523d82523d6000602084013e61147c565b606091505b507f8a8daba70101a3ef953fcbe396dcf4370b8204bff0f421bdeaac9867e8fcfe04846114a883611755565b6040516114b6929190611ed0565b60405180910390a1505b50505080806114ce90611fe0565b9150506111d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff16156115505760405162461bcd60e51b81526004016106b990611e3d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861115c3390565b610d0c60018261178f565b60008082116115dc5760405162461bcd60e51b815260206004820152601260248201527107265717569726520746172676574203e20360741b60448201526064016106b9565b82546115ea57506000610960565b600180840154600081815260038601602052604090209091015480841061161357509050610960565b600061161e866110c6565b6000818152600388016020526040902060010154909150808611611649576000945050505050610960565b600060016116578584611f81565b901c90508087106116b657845b80156116b0576116748982611092565b90506000811180156116995750600081815260038a0160205260409020600101548810155b156116ab579550610960945050505050565b611664565b5061170a565b825b801561170857600090815260028901602052604090205480158015906116f15750600081815260038a0160205260409020600101548810155b15611703579550610960945050505050565b6116b8565b505b506000979650505050505050565b600080821161172657600080fd5b5060009081526003919091016020526040902060010154151590565b600061174e8284611f81565b9392505050565b606060448251101561177557505060408051602081019091526000815290565b600482019150818060200190518101906109609190611ac7565b6117998282611718565b156106e35760006117aa8383611092565b600083815260028501602052604080822054838352912081905590915080156117e457600081815260038501602052604090206002018290555b806117f157600184018290555b6000838152600385016020908152604080832083815560018101849055600290810184905587019091528120819055845490859061182e83611fc9565b919050555050505050565b80516118448161203d565b919050565b600082601f83011261185a57600080fd5b8135602061186f61186a83611f5d565b611f2c565b80838252828201915082860187848660051b890101111561188f57600080fd5b60005b858110156118ae57813584529284019290840190600101611892565b5090979650505050505050565b600082601f8301126118cc57600080fd5b815160206118dc61186a83611f5d565b80838252828201915082860187848660051b89010111156118fc57600080fd5b60005b858110156118ae578151845292840192908401906001016118ff565b80516006811061184457600080fd5b60006040828403121561193c57600080fd5b6040516040810181811067ffffffffffffffff8211171561195f5761195f612027565b806040525080915082516119728161203d565b8152602092830151920191909152919050565b805161ffff8116811461184457600080fd5b6000602082840312156119a957600080fd5b813561174e8161203d565b6000602082840312156119c657600080fd5b813567ffffffffffffffff8111156119dd57600080fd5b6119e984828501611849565b949350505050565b60008060408385031215611a0457600080fd5b823567ffffffffffffffff80821115611a1c57600080fd5b611a2886838701611849565b93506020850135915080821115611a3e57600080fd5b50611a4b85828601611849565b9150509250929050565b60008060208385031215611a6857600080fd5b823567ffffffffffffffff80821115611a8057600080fd5b818501915085601f830112611a9457600080fd5b813581811115611aa357600080fd5b866020828501011115611ab557600080fd5b60209290920196919550909350505050565b600060208284031215611ad957600080fd5b815167ffffffffffffffff80821115611af157600080fd5b818401915084601f830112611b0557600080fd5b815181811115611b1757611b17612027565b611b2a601f8201601f1916602001611f2c565b9150808252856020828501011115611b4157600080fd5b611b52816020840160208601611f99565b50949350505050565b600060208284031215611b6d57600080fd5b815167ffffffffffffffff80821115611b8557600080fd5b908301906102008286031215611b9a57600080fd5b611ba2611f02565b611bab83611839565b8152611bb960208401611985565b6020820152611bca60408401611839565b6040820152606083015182811115611be157600080fd5b611bed878286016118bb565b606083015250608083015182811115611c0557600080fd5b611c11878286016118bb565b608083015250611c2360a08401611839565b60a0820152611c3460c0840161191b565b60c082015260e083810151908201526101008084015190820152610120808401519082015261014080840151908201526101609150611c74828401611985565b828201526101809150611c898683850161192a565b828201526101c09150818301516101a08201526101e08301518282015280935050505092915050565b600060208284031215611cc457600080fd5b5035919050565b60008060408385031215611cde57600080fd5b823591506020830135611cf08161203d565b809150509250929050565b60008060408385031215611d0e57600080fd5b50508035926020909101359150565b60008060408385031215611d3057600080fd5b505080516020909101519092909150565b60008151808452611d59816020860160208601611f99565b601f01601f19169290920160200192915050565b80518252602081015160208301526000604082015160806040850152611d966080850182611d41565b905060608301518482036060860152611daf8282611d41565b95945050505050565b6020808252825182820181905260009190848201906040850190845b81811015611df057835183529284019291840191600101611dd4565b50909695505050505050565b82151581526040602082015260006119e96040830184611d41565b6020808252600c908201526b37b7363ca2bc32b1baba37b960a11b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b61ffff8416815260ff83166020820152608060408201526000608082015260a060608201526000611daf60a0830184611d6d565b8281526040602082015260006119e96040830184611d41565b8281526040602082015260006119e96040830184611d6d565b6040516101e0810167ffffffffffffffff81118282101715611f2657611f26612027565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f5557611f55612027565b604052919050565b600067ffffffffffffffff821115611f7757611f77612027565b5060051b60200190565b60008219821115611f9457611f94611ffb565b500190565b60005b83811015611fb4578181015183820152602001611f9c565b83811115611fc3576000848401525b50505050565b600081611fd857611fd8611ffb565b506000190190565b6000600019821415611ff457611ff4611ffb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d0c57600080fdfea26469706673582212202193903d76a5fa6de266a3a5e4bb1b703cb5a565096ace0b3edc3caf62967f5764736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101f05760003560e01c8063715018a61161010d5780639507d39a116100a0578063c81c6c7c1161006f578063c81c6c7c146105ef578063d6ff17a014610604578063edd004e51461061a578063ee9a31a21461063a578063f2fde38b1461065a57600080fd5b80639507d39a14610569578063aa0a310014610599578063b15269a5146105b9578063c3084117146105cf57600080fd5b80638da5cb5b116100dc5780638da5cb5b146104cf5780638dd14802146104ed578063917c41561461050d578063949d225d1461055457600080fd5b8063715018a614610465578063748747e61461047a5780638456cb591461049a578063862a179e146104af57600080fd5b80633f4ba83a116101855780635c975abb116101545780635c975abb146103bf57806362c41534146103e9578063630dc7cb146103ff5780636e04ff0d1461043757600080fd5b80633f4ba83a146103555780634585e33b1461036a57806346bf33221461038a57806347799da8146103aa57600080fd5b8063257baa3a116101c1578063257baa3a146102bc578063313ae541146102dc57806335671214146103125780633df4ddf41461034057600080fd5b8062b34ebd1461023a578062f714ce1461025c5780630fbeb0321461027c5780631c3c0ea81461029c57600080fd5b366102355760408051348152476020820152338183015290517fc6f3fb0fec49e4877342d4625d77a632541f55b7aae0f9d0b34c69b3478706dc9181900360600190a1005b600080fd5b34801561024657600080fd5b5061025a610255366004611cfb565b61067a565b005b34801561026857600080fd5b5061025a610277366004611ccb565b6106e7565b34801561028857600080fd5b5061025a610297366004611cb2565b6107a0565b3480156102a857600080fd5b5061025a6102b7366004611997565b6107cf565b3480156102c857600080fd5b5061025a6102d73660046119f1565b61081b565b3480156102e857600080fd5b506102fc6102f7366004611cb2565b610953565b6040516103099190611db8565b60405180910390f35b34801561031e57600080fd5b5061033261032d366004611cb2565b610966565b604051908152602001610309565b34801561034c57600080fd5b50610332610973565b34801561036157600080fd5b5061025a610984565b34801561037657600080fd5b5061025a610385366004611a55565b6109b8565b34801561039657600080fd5b5061025a6103a5366004611cb2565b610a5f565b3480156103b657600080fd5b50600254610332565b3480156103cb57600080fd5b50600054600160a01b900460ff166040519015158152602001610309565b3480156103f557600080fd5b50610332600a5481565b34801561040b57600080fd5b5060085461041f906001600160a01b031681565b6040516001600160a01b039091168152602001610309565b34801561044357600080fd5b50610457610452366004611a55565b610a8e565b604051610309929190611dfc565b34801561047157600080fd5b5061025a610af9565b34801561048657600080fd5b5061025a610495366004611997565b610b2d565b3480156104a657600080fd5b5061025a610bd3565b3480156104bb57600080fd5b5060075461041f906001600160a01b031681565b3480156104db57600080fd5b506000546001600160a01b031661041f565b3480156104f957600080fd5b5061025a610508366004611997565b610c05565b34801561051957600080fd5b506105417f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff9091168152602001610309565b34801561056057600080fd5b50600154610332565b34801561057557600080fd5b50610332610584366004611cb2565b60009081526004602052604090206001015490565b3480156105a557600080fd5b5061025a6105b4366004611cb2565b610c51565b3480156105c557600080fd5b5061033260065481565b3480156105db57600080fd5b5061025a6105ea366004611cb2565b610cc4565b3480156105fb57600080fd5b506102fc610d0f565b34801561061057600080fd5b5061033260055481565b34801561062657600080fd5b50610332610635366004611cb2565b610df6565b34801561064657600080fd5b5060095461041f906001600160a01b031681565b34801561066657600080fd5b5061025a610675366004611997565b610e0a565b6008546001600160a01b031633148061069d57506000546001600160a01b031633145b6106c25760405162461bcd60e51b81526004016106b990611e17565b60405180910390fd5b6000821180156106d25750600081115b156106e3576106e360018383610ea2565b5050565b6000546001600160a01b031633146107115760405162461bcd60e51b81526004016106b990611e67565b6001600160a01b03811661072457600080fd5b604080518381526001600160a01b03831660208201527f6141b54b56b8a52a8c6f5cd2a857f6117b18ffbf4d46bd3106f300a839cbf5ea910160405180910390a16040516001600160a01b0382169083156108fc029084906000818181858888f1935050505015801561079b573d6000803e3d6000fd5b505050565b6000546001600160a01b031633146107ca5760405162461bcd60e51b81526004016106b990611e67565b600655565b6000546001600160a01b031633146107f95760405162461bcd60e51b81526004016106b990611e67565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b031633148061083e57506000546001600160a01b031633145b61085a5760405162461bcd60e51b81526004016106b990611e17565b6000825111801561086c575080518251145b6108a65760405162461bcd60e51b815260206004820152600b60248201526a24b73b30b634b2103632b760a91b60448201526064016106b9565b60005b825181101561079b5760008382815181106108c6576108c6612011565b60200260200101511180156108f4575060008282815181106108ea576108ea612011565b6020026020010151115b156109415761094183828151811061090e5761090e612011565b602002602001015183838151811061092857610928612011565b60200260200101516001610ea29092919063ffffffff16565b8061094b81611fe0565b9150506108a9565b6060610960600183610faf565b92915050565b6000610960600183611092565b600061097f60016110c6565b905090565b6000546001600160a01b031633146109ae5760405162461bcd60e51b81526004016106b990611e67565b6109b66110dc565b565b600054600160a01b900460ff16156109e25760405162461bcd60e51b81526004016106b990611e3d565b6007546001600160a01b0316331480610a0557506000546001600160a01b031633145b610a465760405162461bcd60e51b81526020600482015260126024820152716f6e6c794b6565706572526567697374727960701b60448201526064016106b9565b6000610a54828401846119b4565b905061079b81611179565b6000546001600160a01b03163314610a895760405162461bcd60e51b81526004016106b990611e67565b600a55565b60008054606090600160a01b900460ff1615610abc5760405162461bcd60e51b81526004016106b990611e3d565b6000610ac6610d0f565b90506000815111925080604051602001610ae09190611db8565b6040516020818303038152906040529150509250929050565b6000546001600160a01b03163314610b235760405162461bcd60e51b81526004016106b990611e67565b6109b660006114d6565b6000546001600160a01b03163314610b575760405162461bcd60e51b81526004016106b990611e67565b6001600160a01b038116610b6a57600080fd5b600754604080516001600160a01b03928316815291831660208301527fb732223055abcde751d7a24272ffc8a3aa571cb72b443969a4199b7ecd59f8b9910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610bfd5760405162461bcd60e51b81526004016106b990611e67565b6109b6611526565b6000546001600160a01b03163314610c2f5760405162461bcd60e51b81526004016106b990611e67565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610c7b5760405162461bcd60e51b81526004016106b990611e67565b60008111610cbf5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206c696d6974206e756d60781b60448201526064016106b9565b600555565b6008546001600160a01b0316331480610ce757506000546001600160a01b031633145b610d035760405162461bcd60e51b81526004016106b990611e17565b610d0c8161158b565b50565b6060600060055467ffffffffffffffff811115610d2e57610d2e612027565b604051908082528060200260200182016040528015610d57578160200160208202803683370190505b509050600080610d6760016110c6565b90505b600081118015610d7b575060055482105b15610de1576000818152600460205260409020600101544210610dc85780838381518110610dab57610dab612011565b602090810291909101015281610dc081611fe0565b925050610dcd565b610de1565b600090815260036020526040902054610d6a565b6005548214610dee578183525b509092915050565b600081815260036020526040812054610960565b6000546001600160a01b03163314610e345760405162461bcd60e51b81526004016106b990611e67565b6001600160a01b038116610e995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b9565b610d0c816114d6565b60008211610ee35760405162461bcd60e51b815260206004820152600e60248201526d072657175697265206964203e20360941b60448201526064016106b9565b600082815260038401602052604090206001015415610f0157505050565b6000610f0d8483611596565b600081815260028681016020908152604080842080549089905588855281852081905581516060810183528981528084018981528184018881528b885260038d019095529290952094518555905160018501559051929091019190915590915080610f7e5760018501849055610f95565b600081815260038601602052604090206002018490555b8454856000610fa383611fe0565b91905055505050505050565b8154606090821115610fc057825491505b6001821015610fde5750604080516000815260208101909152610960565b60008267ffffffffffffffff811115610ff957610ff9612027565b604051908082528060200260200182016040528015611022578160200160208202803683370190505b5090506000611030856110c6565b905060005b84811015611088578115611063578183828151811061105657611056612011565b6020026020010181815250505b600082815260028701602052604090205491508061108081611fe0565b915050611035565b5090949350505050565b600061109e8383611718565b156110bd57506000818152600383016020526040902060020154610960565b50600092915050565b6000808052600282016020526040812054610960565b600054600160a01b900460ff1661112c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106b9565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000604051806080016040528060065481526020016000815260200160405180604001604052806002815260200161060f60f31b815250815260200160405180604001604052806002815260200161060f60f31b815250815250905060005b825181101561079b5760008382815181106111f5576111f5612011565b602002602001015190506112088161158b565b600854604051630eb2f3bf60e11b81526004810183905260009182916001600160a01b0390911690631d65e77e9060240160006040518083038186803b15801561125157600080fd5b505afa158015611265573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261128d9190810190611b5b565b90507f000000000000000000000000000000000000000000000000000000000000000061ffff16816020015161ffff161461136f576009546001600160a01b03161561136f5760095460208201516040516306c2267f60e21b81526001600160a01b0390921691631b0899fc9161130b916002908a90600401611e9c565b604080518083038186803b15801561132257600080fd5b505afa158015611336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135a9190611d1d565b50600a5490925061136c908390611742565b91505b814710156113ea577f8a8daba70101a3ef953fcbe396dcf4370b8204bff0f421bdeaac9867e8fcfe04836040516113dd9181526040602082018190526019908201527f4175746f447261773a206e6f7420656e6f756768206665657300000000000000606082015260800190565b60405180910390a16114c0565b60085460405163723d784d60e11b81526001600160a01b039091169063e47af09a90849061141e9087908a90600401611ee9565b6000604051808303818588803b15801561143757600080fd5b505af193505050508015611449575060015b6114c0573d808015611477576040519150601f19603f3d011682016040523d82523d6000602084013e61147c565b606091505b507f8a8daba70101a3ef953fcbe396dcf4370b8204bff0f421bdeaac9867e8fcfe04846114a883611755565b6040516114b6929190611ed0565b60405180910390a1505b50505080806114ce90611fe0565b9150506111d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff16156115505760405162461bcd60e51b81526004016106b990611e3d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861115c3390565b610d0c60018261178f565b60008082116115dc5760405162461bcd60e51b815260206004820152601260248201527107265717569726520746172676574203e20360741b60448201526064016106b9565b82546115ea57506000610960565b600180840154600081815260038601602052604090209091015480841061161357509050610960565b600061161e866110c6565b6000818152600388016020526040902060010154909150808611611649576000945050505050610960565b600060016116578584611f81565b901c90508087106116b657845b80156116b0576116748982611092565b90506000811180156116995750600081815260038a0160205260409020600101548810155b156116ab579550610960945050505050565b611664565b5061170a565b825b801561170857600090815260028901602052604090205480158015906116f15750600081815260038a0160205260409020600101548810155b15611703579550610960945050505050565b6116b8565b505b506000979650505050505050565b600080821161172657600080fd5b5060009081526003919091016020526040902060010154151590565b600061174e8284611f81565b9392505050565b606060448251101561177557505060408051602081019091526000815290565b600482019150818060200190518101906109609190611ac7565b6117998282611718565b156106e35760006117aa8383611092565b600083815260028501602052604080822054838352912081905590915080156117e457600081815260038501602052604090206002018290555b806117f157600184018290555b6000838152600385016020908152604080832083815560018101849055600290810184905587019091528120819055845490859061182e83611fc9565b919050555050505050565b80516118448161203d565b919050565b600082601f83011261185a57600080fd5b8135602061186f61186a83611f5d565b611f2c565b80838252828201915082860187848660051b890101111561188f57600080fd5b60005b858110156118ae57813584529284019290840190600101611892565b5090979650505050505050565b600082601f8301126118cc57600080fd5b815160206118dc61186a83611f5d565b80838252828201915082860187848660051b89010111156118fc57600080fd5b60005b858110156118ae578151845292840192908401906001016118ff565b80516006811061184457600080fd5b60006040828403121561193c57600080fd5b6040516040810181811067ffffffffffffffff8211171561195f5761195f612027565b806040525080915082516119728161203d565b8152602092830151920191909152919050565b805161ffff8116811461184457600080fd5b6000602082840312156119a957600080fd5b813561174e8161203d565b6000602082840312156119c657600080fd5b813567ffffffffffffffff8111156119dd57600080fd5b6119e984828501611849565b949350505050565b60008060408385031215611a0457600080fd5b823567ffffffffffffffff80821115611a1c57600080fd5b611a2886838701611849565b93506020850135915080821115611a3e57600080fd5b50611a4b85828601611849565b9150509250929050565b60008060208385031215611a6857600080fd5b823567ffffffffffffffff80821115611a8057600080fd5b818501915085601f830112611a9457600080fd5b813581811115611aa357600080fd5b866020828501011115611ab557600080fd5b60209290920196919550909350505050565b600060208284031215611ad957600080fd5b815167ffffffffffffffff80821115611af157600080fd5b818401915084601f830112611b0557600080fd5b815181811115611b1757611b17612027565b611b2a601f8201601f1916602001611f2c565b9150808252856020828501011115611b4157600080fd5b611b52816020840160208601611f99565b50949350505050565b600060208284031215611b6d57600080fd5b815167ffffffffffffffff80821115611b8557600080fd5b908301906102008286031215611b9a57600080fd5b611ba2611f02565b611bab83611839565b8152611bb960208401611985565b6020820152611bca60408401611839565b6040820152606083015182811115611be157600080fd5b611bed878286016118bb565b606083015250608083015182811115611c0557600080fd5b611c11878286016118bb565b608083015250611c2360a08401611839565b60a0820152611c3460c0840161191b565b60c082015260e083810151908201526101008084015190820152610120808401519082015261014080840151908201526101609150611c74828401611985565b828201526101809150611c898683850161192a565b828201526101c09150818301516101a08201526101e08301518282015280935050505092915050565b600060208284031215611cc457600080fd5b5035919050565b60008060408385031215611cde57600080fd5b823591506020830135611cf08161203d565b809150509250929050565b60008060408385031215611d0e57600080fd5b50508035926020909101359150565b60008060408385031215611d3057600080fd5b505080516020909101519092909150565b60008151808452611d59816020860160208601611f99565b601f01601f19169290920160200192915050565b80518252602081015160208301526000604082015160806040850152611d966080850182611d41565b905060608301518482036060860152611daf8282611d41565b95945050505050565b6020808252825182820181905260009190848201906040850190845b81811015611df057835183529284019291840191600101611dd4565b50909695505050505050565b82151581526040602082015260006119e96040830184611d41565b6020808252600c908201526b37b7363ca2bc32b1baba37b960a11b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b61ffff8416815260ff83166020820152608060408201526000608082015260a060608201526000611daf60a0830184611d6d565b8281526040602082015260006119e96040830184611d41565b8281526040602082015260006119e96040830184611d6d565b6040516101e0810167ffffffffffffffff81118282101715611f2657611f26612027565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f5557611f55612027565b604052919050565b600067ffffffffffffffff821115611f7757611f77612027565b5060051b60200190565b60008219821115611f9457611f94611ffb565b500190565b60005b83811015611fb4578181015183820152602001611f9c565b83811115611fc3576000848401525b50505050565b600081611fd857611fd8611ffb565b506000190190565b6000600019821415611ff457611ff4611ffb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d0c57600080fdfea26469706673582212202193903d76a5fa6de266a3a5e4bb1b703cb5a565096ace0b3edc3caf62967f5764736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_bridge": "The LucksBridge contract",
          "_executor": "The LucksExecutor contract",
          "_keeperRegAddr": "The address of the keeper registry contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,address)": {
        "params": {
          "amount": "The amount of eth (in wei) to withdraw",
          "payee": "The address to pay"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "pause()": {
        "notice": "Pauses the contrac t, which prevents executing performUpkeep"
      },
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      },
      "setBridge(address)": {
        "notice": "set BRIDGE"
      },
      "setExecutor(address)": {
        "notice": "set operator"
      },
      "setKeeper(address)": {
        "notice": "Sets the keeper registry address"
      },
      "unpause()": {
        "notice": "Unpauses the contract"
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraws the contract balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 917,
        "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1032,
        "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12919,
        "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
        "label": "taskList",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(SortedMap)11925_storage"
      },
      {
        "astId": 12922,
        "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
        "label": "BATCH_PERFORM_LIMIT",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12925,
        "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
        "label": "DST_GAS_AMOUNT",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12927,
        "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
        "label": "KEEPER",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 12930,
        "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
        "label": "EXECUTOR",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ILucksExecutor)10522"
      },
      {
        "astId": 12632,
        "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
        "label": "BRIDGE",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ILucksBridge)10206"
      },
      {
        "astId": 12635,
        "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
        "label": "QUOTE_FEE_ADD",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILucksBridge)10206": {
        "encoding": "inplace",
        "label": "contract ILucksBridge",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksExecutor)10522": {
        "encoding": "inplace",
        "label": "contract ILucksExecutor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Item)11905_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SortedLinkMap.Item)",
        "numberOfBytes": "32",
        "value": "t_struct(Item)11905_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Item)11905_storage": {
        "encoding": "inplace",
        "label": "struct SortedLinkMap.Item",
        "members": [
          {
            "astId": 11900,
            "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11902,
            "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11904,
            "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
            "label": "leftId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(SortedMap)11925_storage": {
        "encoding": "inplace",
        "label": "struct SortedLinkMap.SortedMap",
        "members": [
          {
            "astId": 11913,
            "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11915,
            "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
            "label": "maxId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11919,
            "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
            "label": "keys",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 11924,
            "contract": "contracts/lucks/LucksAutoDrawTask.sol:LucksAutoDrawTask",
            "label": "nodes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Item)11905_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
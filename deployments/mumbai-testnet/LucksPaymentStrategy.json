{
  "address": "0x628FA3d319Bb07Ee4499dc094D6f3c2a9dF48896",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "contract ILucksGroup",
          "name": "_groups",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXECUTOR",
      "outputs": [
        {
          "internalType": "contract ILucksExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GROUPS",
      "outputs": [
        {
          "internalType": "contract ILucksGroup",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "strategyId",
          "type": "uint16"
        }
      ],
      "name": "getShareRate",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksExecutor",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksGroup",
          "name": "_group",
          "type": "address"
        }
      ],
      "name": "setLucksGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "strategyId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "viewPaymentShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ee1e3c1cb9039a580eb6f57886e67e5aad6eb6b23d98b09ffa4f0c5e967f084",
  "receipt": {
    "to": null,
    "from": "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
    "contractAddress": "0x628FA3d319Bb07Ee4499dc094D6f3c2a9dF48896",
    "transactionIndex": 3,
    "gasUsed": "560741",
    "logsBloom": "0x
    "blockHash": "0xe52d58d8d89b150ff5007390a0fc928eea4f469c2db29573c4a3efbc4ed3367f",
    "transactionHash": "0x1ee1e3c1cb9039a580eb6f57886e67e5aad6eb6b23d98b09ffa4f0c5e967f084",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27178477,
        "transactionHash": "0x1ee1e3c1cb9039a580eb6f57886e67e5aad6eb6b23d98b09ffa4f0c5e967f084",
        "address": "0x628FA3d319Bb07Ee4499dc094D6f3c2a9dF48896",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b770f460978c456d69bc46463dfda71feee60ad"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xe52d58d8d89b150ff5007390a0fc928eea4f469c2db29573c4a3efbc4ed3367f"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 27178477,
        "transactionHash": "0x1ee1e3c1cb9039a580eb6f57886e67e5aad6eb6b23d98b09ffa4f0c5e967f084",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005b770f460978c456d69bc46463dfda71feee60ad",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000027d7d1c20d74d800000000000000000000000000000000000000000000000002c3e15f3d9223600000000000000000000000000000000000000000000011806df176bb281f7d0a000000000000000000000000000000000000000000000000029c098d7b84ae880000000000000000000000000000000000000000000011806e194e8cea2cf1e2",
        "logIndex": 6,
        "blockHash": "0xe52d58d8d89b150ff5007390a0fc928eea4f469c2db29573c4a3efbc4ed3367f"
      }
    ],
    "blockNumber": 27178477,
    "cumulativeGasUsed": "922895",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x897be0747988558c507aF3fd1e07d55c74EfadE8",
    "0x14f50cA151DEBA66526Fc2854E4E5fFe4866e788"
  ],
  "numDeployments": 1,
  "solcInputHash": "a366705d5343df8a750697e3fbefe33f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"contract ILucksGroup\",\"name\":\"_groups\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"contract ILucksExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GROUPS\",\"outputs\":[{\"internalType\":\"contract ILucksGroup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"strategyId\",\"type\":\"uint16\"}],\"name\":\"getShareRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksExecutor\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksGroup\",\"name\":\"_group\",\"type\":\"address\"}],\"name\":\"setLucksGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"strategyId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"viewPaymentShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Openluck LucksPaymentStrategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"It is the contract for PaymentStrategy\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucks/LucksPaymentStrategy.sol\":\"LucksPaymentStrategy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);    \\r\\n    \\r\\n    event RevertInvoke(uint256 taskId, string reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function addTasks(uint256[] memory taskIds, uint[] memory endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\",\"keccak256\":\"0x070b6357514440f3f4586e635590f33a94694a0e190ff94afe513520ee9cc98f\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n    bytes zroPaymentAddr; //  the address of the ZRO token holder who would pay for the transaction\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n    \\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n    event InvokeFailed(uint64 nonce, string reason);\\r\\n\\r\\n    // ============= Task functions ====================\\r\\n\\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _refundAddress,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _refundAddress,\\r\\n        address payable _user,\\r\\n        address nftContract,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,\\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateCreateTaskFee(\\r\\n        uint16 _dstChainId,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateWithdrawNFTsFee(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        address nftContract,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n}\\r\\n\",\"keccak256\":\"0xb94f71c2ea0c179500bf550ed44f3befa33451172073f4fa3b19c635bbca2a16\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\nstruct TaskInfo {\\r\\n    uint256 lastTID;\\r\\n    uint256 closeTime;\\r\\n    uint256 finalNo;\\r\\n}\\r\\n \\r\\nstruct UserState {\\r\\n    uint256 num; // user buyed tickets count\\r\\n    bool claimed;  // user claimed\\r\\n}\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint256 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);    \\r\\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\\r\\n    event UpdateTaskNote(uint256 taskId, string note);\\r\\n\\r\\n    event TransferFee(uint256 taskId, address to, address token, uint256 amount); // for protocol\\r\\n    event TransferShareAmount(uint256 taskId, address to, address token, uint256 amount); // for winners\\r\\n    event TransferPayment(uint256 taskId, address to, address token, uint256 amount); // for seller\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\\r\\n    function isFail(uint256 taskId) external view returns(bool);\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function reCreateTask(uint256 taskId, TaskItem memory item, TaskExt memory ext) external payable;\\r\\n    function updateTaskNote(uint256, string memory note) external;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x25cbcdc746b1d021aea3714ee1399dbf9505f2355956bb80be5937a06bdc0767\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksGroup {    \\r\\n\\r\\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\\r\\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\\r\\n   \\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\\r\\n    function createGroup(uint256 taskId, uint16 seat) external;\\r\\n}\",\"keccak256\":\"0x0f80c646005b1eb282e864517e9effd2f2a54411aec731e73fbd539808d6c38f\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksVRF} from \\\"./ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"./ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"./ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"./ILucksAuto.sol\\\";\\r\\nimport {IPunks} from \\\"./IPunks.sol\\\";\\r\\nimport {IProxyNFTStation} from \\\"./IProxyNFTStation.sol\\\";\\r\\n\\r\\ninterface ILucksHelper {\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\r\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\r\\n    function checkNFTContract(address addr) external view returns (bool);\\r\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\r\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\r\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\r\\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\r\\n    function isPunks(address nftContract) external view returns(bool);\\r\\n\\r\\n    function getProtocolFeeRecipient() external view returns (address);\\r\\n    function getProtocolFee() external view returns (uint256);\\r\\n    function getMinTargetLimit(address token) external view returns (uint256);\\r\\n    function getDrawDelay() external view returns (uint32);\\r\\n\\r\\n    function getVRF() external view returns (ILucksVRF);\\r\\n    function getGROUPS() external view returns (ILucksGroup);\\r\\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\\r\\n    function getAutoClose() external view returns (ILucksAuto);\\r\\n    function getAutoDraw() external view returns (ILucksAuto);\\r\\n\\r\\n    function getPunks() external view returns (IPunks);\\r\\n    function getProxyPunks() external view returns (IProxyNFTStation);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xd4b191af0072a9232d805b6d38c32e44e27cf6f261a62d50c80f2c4d7728772c\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface ILucksPaymentStrategy {\\r\\n    \\r\\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\\r\\n}\",\"keccak256\":\"0xfb95b42ebb7f656c8373266c15d91659333f1ef508bba71429ea0932fe1dcdad\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILucksVRF {\\r\\n\\r\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\r\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \\r\\n\\r\\n    /**\\r\\n     * Requests randomness from a user-provided max\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\r\\n\\r\\n    /**\\r\\n     * Views random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\r\\n}\",\"keccak256\":\"0x8039f261810e00db42828632a5deba8a11613357d9c63b33c5d342abb6d6da0e\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyNFTStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct DepositNFT {\\r\\n    address user; // deposit user\\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] amounts; // support ERC1155\\r\\n    uint256 endTime; // Task end time\\r\\n}\\r\\n\\r\\ninterface IProxyNFTStation {\\r\\n\\r\\n    event Deposit(address indexed executor, uint256 depositId, address indexed user, address nft, uint256[] tokenIds, uint256[] amounts, uint256 endTime);\\r\\n    event Withdraw(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n    event Redeem(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n\\r\\n    function getNFT(address executor, uint256 depositId) external view returns(DepositNFT memory);\\r\\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) external payable returns (uint256 depositId);    \\r\\n    function withdraw(uint256 depositId, address to) external;    \\r\\n    function redeem(address executor, uint256 depositId, address to) external;    \\r\\n}\",\"keccak256\":\"0xef5966e27e456f5939e1b68fa40e534bcb5b35d896aaa7826dad36b99fa33c27\",\"license\":\"MIT\"},\"contracts/interfaces/IPunks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface for a permittable ERC721 contract\\r\\n * See https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC72 allowance (see {IERC721-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC721-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IPunks {\\r\\n  \\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  function punkIndexToAddress(uint256 punkIndex) external view returns (address owner);\\r\\n\\r\\n  function buyPunk(uint256 punkIndex) external;\\r\\n\\r\\n  function transferPunk(address to, uint256 punkIndex) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xca0d48507359c445fd104cdbec61eda6c751763decf86f829d674e0930dd597a\",\"license\":\"MIT\"},\"contracts/lucks/LucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksPaymentStrategy} from \\\"../interfaces/ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksGroup} from \\\"../interfaces/ILucksGroup.sol\\\";\\r\\nimport {ILucksExecutor, Ticket} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksPaymentStrategy\\r\\n * @notice It is the contract for PaymentStrategy\\r\\n */\\r\\ncontract LucksPaymentStrategy is ILucksPaymentStrategy, Ownable {    \\r\\n\\r\\n    ILucksExecutor public EXECUTOR;\\r\\n    ILucksGroup public GROUPS;\\r\\n\\r\\n    constructor(address _executor, ILucksGroup _groups) {\\r\\n        EXECUTOR = ILucksExecutor(_executor);\\r\\n        GROUPS = _groups;\\r\\n    }\\r\\n\\r\\n    function getShareRate(uint16 strategyId) public override pure returns (uint32) {\\r\\n        if (strategyId == 1){ // 10%\\r\\n            return 1000;  \\r\\n        } else if (strategyId == 2) { // 20%\\r\\n            return 2000;   \\r\\n        }\\r\\n        else if (strategyId == 3){ // 30%\\r\\n            return 3000;\\r\\n        }\\r\\n        else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) \\r\\n      override public view returns (uint256, uint256[] memory, address[] memory) \\r\\n    {        \\r\\n        uint32 rate = getShareRate(strategyId);\\r\\n        uint256[] memory spliter;\\r\\n        address[] memory users;\\r\\n\\r\\n        if (rate > 0) {                               \\r\\n            users = GROUPS.getGroupUsers(taskId, winner);\\r\\n            if (users.length > 1){            \\r\\n                spliter = new uint256[](users.length);\\r\\n                uint256 splitShare = 10000 / users.length;\\r\\n                for (uint i=0; i< users.length; i++) {\\r\\n                    spliter[i] = splitShare;\\r\\n                }            \\r\\n            }             \\r\\n        }\\r\\n\\r\\n        return (rate,spliter,users);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\\r\\n        EXECUTOR = _executor;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setLucksGroup(ILucksGroup _group) external onlyOwner {\\r\\n        GROUPS = _group;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdc5c0710080910e6621ce212c25b1f0bcbc793148f2ef199a55d132050cfc8a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516108f73803806108f783398101604081905261002f916100b9565b61003833610069565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905561010b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100cc57600080fd5b82516100d7816100f3565b60208401519092506100e8816100f3565b809150509250929050565b6001600160a01b038116811461010857600080fd5b50565b6107dd8061011a6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a61461011857806374a0a251146101205780638da5cb5b14610142578063d12c51f814610153578063f2fde38b1461016657600080fd5b806305b84a7d146100985780631a7c07fe146100ad5780631c3c0ea8146100da578063630dc7cb146100ed575b600080fd5b6100ab6100a636600461050d565b610179565b005b6100c06100bb3660046105fd565b6101ce565b60405163ffffffff90911681526020015b60405180910390f35b6100ab6100e836600461050d565b61021f565b600154610100906001600160a01b031681565b6040516001600160a01b0390911681526020016100d1565b6100ab61026b565b61013361012e366004610618565b6102a1565b6040516100d19392919061068c565b6000546001600160a01b0316610100565b600254610100906001600160a01b031681565b6100ab61017436600461050d565b610405565b6000546001600160a01b031633146101ac5760405162461bcd60e51b81526004016101a390610657565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60008161ffff16600114156101e657506103e8919050565b8161ffff16600214156101fc57506107d0919050565b8161ffff16600314156102125750610bb8919050565b506000919050565b919050565b6000546001600160a01b031633146102495760405162461bcd60e51b81526004016101a390610657565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102955760405162461bcd60e51b81526004016101a390610657565b61029f60006104a0565b565b600060608060006102b1876101ce565b905060608063ffffffff8316156103ee57600254604051636f56b60f60e11b8152600481018990526001600160a01b038a811660248301529091169063dead6c1e9060440160006040518083038186803b15801561030e57600080fd5b505afa158015610322573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261034a9190810190610531565b90506001815111156103ee57805167ffffffffffffffff8111156103705761037061077c565b604051908082528060200260200182016040528015610399578160200160208202803683370190505b509150600081516127106103ad919061071b565b905060005b82518110156103eb57818482815181106103ce576103ce610766565b6020908102919091010152806103e38161073d565b9150506103b2565b50505b63ffffffff90921694509250905093509350939050565b6000546001600160a01b0316331461042f5760405162461bcd60e51b81526004016101a390610657565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101a3565b61049d816104a0565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805161021a81610792565b803561ffff8116811461021a57600080fd5b60006020828403121561051f57600080fd5b813561052a81610792565b9392505050565b6000602080838503121561054457600080fd5b825167ffffffffffffffff8082111561055c57600080fd5b818501915085601f83011261057057600080fd5b8151818111156105825761058261077c565b8060051b604051601f19603f830116810181811085821117156105a7576105a761077c565b604052828152858101935084860182860187018a10156105c657600080fd5b600095505b838610156105f0576105dc816104f0565b8552600195909501949386019386016105cb565b5098975050505050505050565b60006020828403121561060f57600080fd5b61052a826104fb565b60008060006060848603121561062d57600080fd5b610636846104fb565b9250602084013561064681610792565b929592945050506040919091013590565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000606082018583526020606081850152818651808452608086019150828801935060005b818110156106cd578451835293830193918301916001016106b1565b50508481036040860152855180825290820192508186019060005b8181101561070d5782516001600160a01b0316855293830193918301916001016106e8565b509298975050505050505050565b60008261073857634e487b7160e01b600052601260045260246000fd5b500490565b600060001982141561075f57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461049d57600080fdfea2646970667358221220fa8d9976c8680ea5ab936a9b67841b9202e75784254385a53d66cd4eb1530cd764736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a61461011857806374a0a251146101205780638da5cb5b14610142578063d12c51f814610153578063f2fde38b1461016657600080fd5b806305b84a7d146100985780631a7c07fe146100ad5780631c3c0ea8146100da578063630dc7cb146100ed575b600080fd5b6100ab6100a636600461050d565b610179565b005b6100c06100bb3660046105fd565b6101ce565b60405163ffffffff90911681526020015b60405180910390f35b6100ab6100e836600461050d565b61021f565b600154610100906001600160a01b031681565b6040516001600160a01b0390911681526020016100d1565b6100ab61026b565b61013361012e366004610618565b6102a1565b6040516100d19392919061068c565b6000546001600160a01b0316610100565b600254610100906001600160a01b031681565b6100ab61017436600461050d565b610405565b6000546001600160a01b031633146101ac5760405162461bcd60e51b81526004016101a390610657565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60008161ffff16600114156101e657506103e8919050565b8161ffff16600214156101fc57506107d0919050565b8161ffff16600314156102125750610bb8919050565b506000919050565b919050565b6000546001600160a01b031633146102495760405162461bcd60e51b81526004016101a390610657565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102955760405162461bcd60e51b81526004016101a390610657565b61029f60006104a0565b565b600060608060006102b1876101ce565b905060608063ffffffff8316156103ee57600254604051636f56b60f60e11b8152600481018990526001600160a01b038a811660248301529091169063dead6c1e9060440160006040518083038186803b15801561030e57600080fd5b505afa158015610322573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261034a9190810190610531565b90506001815111156103ee57805167ffffffffffffffff8111156103705761037061077c565b604051908082528060200260200182016040528015610399578160200160208202803683370190505b509150600081516127106103ad919061071b565b905060005b82518110156103eb57818482815181106103ce576103ce610766565b6020908102919091010152806103e38161073d565b9150506103b2565b50505b63ffffffff90921694509250905093509350939050565b6000546001600160a01b0316331461042f5760405162461bcd60e51b81526004016101a390610657565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101a3565b61049d816104a0565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805161021a81610792565b803561ffff8116811461021a57600080fd5b60006020828403121561051f57600080fd5b813561052a81610792565b9392505050565b6000602080838503121561054457600080fd5b825167ffffffffffffffff8082111561055c57600080fd5b818501915085601f83011261057057600080fd5b8151818111156105825761058261077c565b8060051b604051601f19603f830116810181811085821117156105a7576105a761077c565b604052828152858101935084860182860187018a10156105c657600080fd5b600095505b838610156105f0576105dc816104f0565b8552600195909501949386019386016105cb565b5098975050505050505050565b60006020828403121561060f57600080fd5b61052a826104fb565b60008060006060848603121561062d57600080fd5b610636846104fb565b9250602084013561064681610792565b929592945050506040919091013590565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000606082018583526020606081850152818651808452608086019150828801935060005b818110156106cd578451835293830193918301916001016106b1565b50508481036040860152855180825290820192508186019060005b8181101561070d5782516001600160a01b0316855293830193918301916001016106e8565b509298975050505050505050565b60008261073857634e487b7160e01b600052601260045260246000fd5b500490565b600060001982141561075f57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461049d57600080fdfea2646970667358221220fa8d9976c8680ea5ab936a9b67841b9202e75784254385a53d66cd4eb1530cd764736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Openluck LucksPaymentStrategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "It is the contract for PaymentStrategy",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 917,
        "contract": "contracts/lucks/LucksPaymentStrategy.sol:LucksPaymentStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15111,
        "contract": "contracts/lucks/LucksPaymentStrategy.sol:LucksPaymentStrategy",
        "label": "EXECUTOR",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILucksExecutor)10554"
      },
      {
        "astId": 15114,
        "contract": "contracts/lucks/LucksPaymentStrategy.sol:LucksPaymentStrategy",
        "label": "GROUPS",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILucksGroup)10608"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksExecutor)10554": {
        "encoding": "inplace",
        "label": "contract ILucksExecutor",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksGroup)10608": {
        "encoding": "inplace",
        "label": "contract ILucksGroup",
        "numberOfBytes": "20"
      }
    }
  }
}
{
  "address": "0x5466d99C4382f586Fe522840F3331F599769AA75",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_burnIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_burnAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_mintIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_mintAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnForMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf32679d61b8dcdbca4eb29c73bdf3a1997fe84dbfbcf0d9c066fe6189c8f37fa",
  "receipt": {
    "to": null,
    "from": "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
    "contractAddress": "0x5466d99C4382f586Fe522840F3331F599769AA75",
    "transactionIndex": 3,
    "gasUsed": "2085776",
    "logsBloom": "0x
    "blockHash": "0xaced81a91eea0b143e9cfda3180ae1c7fdca196fa39afc699d9b8e95dfda2faf",
    "transactionHash": "0xf32679d61b8dcdbca4eb29c73bdf3a1997fe84dbfbcf0d9c066fe6189c8f37fa",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27178533,
        "transactionHash": "0xf32679d61b8dcdbca4eb29c73bdf3a1997fe84dbfbcf0d9c066fe6189c8f37fa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005b770f460978c456d69bc46463dfda71feee60ad",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000094340b5e39e38000000000000000000000000000000000000000000000000006eb1f0dc211f3600000000000000000000000000000000000000000000011818a0b5cb792c827000000000000000000000000000000000000000000000000000656eb0263d80fe00000000000000000000000000000000000000000000011818a9f90c2f1020a80",
        "logIndex": 6,
        "blockHash": "0xaced81a91eea0b143e9cfda3180ae1c7fdca196fa39afc699d9b8e95dfda2faf"
      }
    ],
    "blockNumber": 27178533,
    "cumulativeGasUsed": "2324002",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a366705d5343df8a750697e3fbefe33f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_burnIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_burnAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_mintIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_mintAmounts\",\"type\":\"uint256[]\"}],\"name\":\"burnForMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tests/NFTs/WatcherMinter.sol\":\"WatcherMinter\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/tests/NFTs/WatcherMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\n\\r\\ncontract WatcherMinter is ERC1155 {\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    string public contractURI =\\r\\n        \\\"QmdqrVASguJRJHAzbfys3xdfbhLCTyKogGNyQiDQeNSgss\\\";\\r\\n\\r\\n    bytes32 public OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\r\\n    bytes32 public ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n\\r\\n    mapping(uint256 => string) public tokenURI;\\r\\n    mapping(address => bool) public isAdmin;\\r\\n\\r\\n    address public owner;\\r\\n    address payable public royaltyAddress =\\r\\n        payable(0x21ff1ac88a4A7c07C7573132f976D05B259632EE);\\r\\n\\r\\n    constructor() ERC1155(\\\"\\\") {\\r\\n        name = \\\"Frontier\\\";\\r\\n        symbol = \\\"FRONTIER\\\";\\r\\n\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier adminOnly() {\\r\\n        require(msg.sender == owner || isAdmin[msg.sender] == true);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier ownerOnly() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addAdmin(address _address) external ownerOnly {\\r\\n        isAdmin[_address] = true;\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _amount\\r\\n    ) external adminOnly {\\r\\n        _mint(_to, _id, _amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function mintBatch(\\r\\n        address _to,\\r\\n        uint256[] memory _ids,\\r\\n        uint256[] memory _amounts\\r\\n    ) external adminOnly {\\r\\n        _mintBatch(_to, _ids, _amounts, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _id, uint256 _amount) external {\\r\\n        _burn(msg.sender, _id, _amount);\\r\\n    }\\r\\n\\r\\n    function burnBatch(uint256[] memory _ids, uint256[] memory _amounts)\\r\\n        external\\r\\n    {\\r\\n        _burnBatch(msg.sender, _ids, _amounts);\\r\\n    }\\r\\n\\r\\n    function burnForMint(\\r\\n        address _from,\\r\\n        uint256[] memory _burnIds,\\r\\n        uint256[] memory _burnAmounts,\\r\\n        uint256[] memory _mintIds,\\r\\n        uint256[] memory _mintAmounts\\r\\n    ) external adminOnly {\\r\\n        _burnBatch(_from, _burnIds, _burnAmounts);\\r\\n        _mintBatch(_from, _mintIds, _mintAmounts, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function setURI(uint256 _id, string memory _uri) external adminOnly {\\r\\n        require(bytes(tokenURI[_id]).length == 0);\\r\\n        tokenURI[_id] = _uri;\\r\\n\\r\\n        emit URI(_uri, _id);\\r\\n    }\\r\\n\\r\\n    function uri(uint256 _id) public view override returns (string memory) {\\r\\n        return tokenURI[_id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ce1f35b35f6988fddded19a18a4399368d5008de15df0e7ca3f7a95e71fc8e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052602e6080818152906200233560a0398051620000299160059160209091019062000156565b507fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e6006557fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775600755600b80546001600160a01b0319167321ff1ac88a4a7c07c7573132f976d05b259632ee179055348015620000a557600080fd5b50604080516020810190915260008152620000c0816200013d565b5060408051808201909152600880825267233937b73a34b2b960c11b6020909201918252620000f29160039162000156565b5060408051808201909152600880825267232927a72a24a2a960c11b6020909201918252620001249160049162000156565b50600a80546001600160a01b0319163317905562000239565b80516200015290600290602084019062000156565b5050565b8280546200016490620001fc565b90600052602060002090601f016020900481019282620001885760008555620001d3565b82601f10620001a357805160ff1916838001178555620001d3565b82800160010185558215620001d3579182015b82811115620001d3578251825591602001919060010190620001b6565b50620001e1929150620001e5565b5090565b5b80821115620001e15760008155600101620001e6565b600181811c908216806200021157607f821691505b602082108114156200023357634e487b7160e01b600052602260045260246000fd5b50919050565b6120ec80620002496000396000f3fe608060405234801561001057600080fd5b50600436106101575760003560e01c8063862440e2116100c3578063c87b56dd1161007c578063c87b56dd146102f9578063d81d0a151461030c578063e58378bb1461031f578063e8a3d48514610328578063e985e9c514610330578063f242432a1461036c57600080fd5b8063862440e21461027a5780638da5cb5b1461028d57806395d89b41146102b8578063a22cb465146102c0578063ad2f852a146102d3578063b390c0ab146102e657600080fd5b80632eb2c2d6116101155780632eb2c2d6146102055780634e1273f414610218578063510f410414610238578063704802751461024b57806375b238fc1461025e57806383ca4b6f1461026757600080fd5b8062fdd58e1461015c57806301ffc9a71461018257806306fdde03146101a55780630e89341c146101ba578063156e29f6146101cd57806324d7806c146101e2575b600080fd5b61016f61016a36600461194f565b61037f565b6040519081526020015b60405180910390f35b610195610190366004611aca565b610416565b6040519015158152602001610179565b6101ad610468565b6040516101799190611cfc565b6101ad6101c8366004611b04565b6104f6565b6101e06101db366004611979565b610598565b005b6101956101f0366004611691565b60096020526000908152604090205460ff1681565b6101e06102133660046116df565b6105ee565b61022b6102263660046119ac565b610685565b6040516101799190611cbb565b6101e0610246366004611862565b6107af565b6101e0610259366004611691565b61080b565b61016f60075481565b6101e0610275366004611a7d565b610846565b6101e0610288366004611b1d565b610855565b600a546102a0906001600160a01b031681565b6040516001600160a01b039091168152602001610179565b6101ad61090c565b6101e06102ce366004611913565b610919565b600b546102a0906001600160a01b031681565b6101e06102f4366004611b6e565b610924565b6101ad610307366004611b04565b61092f565b6101e061031a3660046117ee565b610948565b61016f60065481565b6101ad610999565b61019561033e3660046116ac565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101e061037a366004611789565b6109a6565b60006001600160a01b0383166103f05760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061044757506001600160e01b031982166303a24d0760e21b145b8061046257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6003805461047590611f32565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190611f32565b80156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b505050505081565b600081815260086020526040902080546060919061051390611f32565b80601f016020809104026020016040519081016040528092919081815260200182805461053f90611f32565b801561058c5780601f106105615761010080835404028352916020019161058c565b820191906000526020600020905b81548152906001019060200180831161056f57829003601f168201915b50505050509050919050565b600a546001600160a01b03163314806105c557503360009081526009602052604090205460ff1615156001145b6105ce57600080fd5b6105e983838360405180602001604052806000815250610a2d565b505050565b6001600160a01b03851633148061060a575061060a853361033e565b6106715760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016103e7565b61067e8585858585610afd565b5050505050565b606081518351146106ea5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016103e7565b6000835167ffffffffffffffff81111561070657610706611fe1565b60405190808252806020026020018201604052801561072f578160200160208202803683370190505b50905060005b84518110156107a75761077a85828151811061075357610753611fcb565b602002602001015185838151811061076d5761076d611fcb565b602002602001015161037f565b82828151811061078c5761078c611fcb565b60209081029190910101526107a081611f9a565b9050610735565b509392505050565b600a546001600160a01b03163314806107dc57503360009081526009602052604090205460ff1615156001145b6107e557600080fd5b6107f0858585610c99565b61067e85838360405180602001604052806000815250610e15565b600a546001600160a01b0316331461082257600080fd5b6001600160a01b03166000908152600960205260409020805460ff19166001179055565b610851338383610c99565b5050565b600a546001600160a01b031633148061088257503360009081526009602052604090205460ff1615156001145b61088b57600080fd5b600082815260086020526040902080546108a490611f32565b1590506108b057600080fd5b600082815260086020908152604090912082516108cf928401906114e0565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b826040516109009190611cfc565b60405180910390a25050565b6004805461047590611f32565b610851338383610f60565b610851338383611041565b6008602052600090815260409020805461047590611f32565b600a546001600160a01b031633148061097557503360009081526009602052604090205460ff1615156001145b61097e57600080fd5b6105e983838360405180602001604052806000815250610e15565b6005805461047590611f32565b6001600160a01b0385163314806109c257506109c2853361033e565b610a205760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016103e7565b61067e8585858585611143565b6001600160a01b038416610a535760405162461bcd60e51b81526004016103e790611eb5565b33610a6d81600087610a6488611260565b61067e88611260565b6000848152602081815260408083206001600160a01b038916845290915281208054859290610a9d908490611f1a565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461067e816000878787876112ab565b8151835114610b1e5760405162461bcd60e51b81526004016103e790611e6d565b6001600160a01b038416610b445760405162461bcd60e51b81526004016103e790611d9b565b3360005b8451811015610c2b576000858281518110610b6557610b65611fcb565b602002602001015190506000858381518110610b8357610b83611fcb565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610bd35760405162461bcd60e51b81526004016103e790611e23565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610c10908490611f1a565b9250508190555050505080610c2490611f9a565b9050610b48565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610c7b929190611cce565b60405180910390a4610c91818787878787611416565b505050505050565b6001600160a01b038316610cbf5760405162461bcd60e51b81526004016103e790611de0565b8051825114610ce05760405162461bcd60e51b81526004016103e790611e6d565b604080516020810190915260009081905233905b8351811015610db6576000848281518110610d1157610d11611fcb565b602002602001015190506000848381518110610d2f57610d2f611fcb565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610d7f5760405162461bcd60e51b81526004016103e790611d57565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610dae81611f9a565b915050610cf4565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610e07929190611cce565b60405180910390a450505050565b6001600160a01b038416610e3b5760405162461bcd60e51b81526004016103e790611eb5565b8151835114610e5c5760405162461bcd60e51b81526004016103e790611e6d565b3360005b8451811015610ef857838181518110610e7b57610e7b611fcb565b6020026020010151600080878481518110610e9857610e98611fcb565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ee09190611f1a565b90915550819050610ef081611f9a565b915050610e60565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610f49929190611cce565b60405180910390a461067e81600087878787611416565b816001600160a01b0316836001600160a01b03161415610fd45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016103e7565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166110675760405162461bcd60e51b81526004016103e790611de0565b336110978185600061107887611260565b61108187611260565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156110d85760405162461bcd60e51b81526004016103e790611d57565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384166111695760405162461bcd60e51b81526004016103e790611d9b565b33611179818787610a6488611260565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156111ba5760405162461bcd60e51b81526004016103e790611e23565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906111f7908490611f1a565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46112578288888888886112ab565b50505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061129a5761129a611fcb565b602090810291909101015292915050565b6001600160a01b0384163b15610c915760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906112ef9089908990889088908890600401611c76565b602060405180830381600087803b15801561130957600080fd5b505af1925050508015611339575060408051601f3d908101601f1916820190925261133691810190611ae7565b60015b6113e657611345611ff7565b806308c379a0141561137f575061135a612013565b806113655750611381565b8060405162461bcd60e51b81526004016103e79190611cfc565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016103e7565b6001600160e01b0319811663f23a6e6160e01b146112575760405162461bcd60e51b81526004016103e790611d0f565b6001600160a01b0384163b15610c915760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061145a9089908990889088908890600401611c18565b602060405180830381600087803b15801561147457600080fd5b505af19250505080156114a4575060408051601f3d908101601f191682019092526114a191810190611ae7565b60015b6114b057611345611ff7565b6001600160e01b0319811663bc197c8160e01b146112575760405162461bcd60e51b81526004016103e790611d0f565b8280546114ec90611f32565b90600052602060002090601f01602090048101928261150e5760008555611554565b82601f1061152757805160ff1916838001178555611554565b82800160010185558215611554579182015b82811115611554578251825591602001919060010190611539565b50611560929150611564565b5090565b5b808211156115605760008155600101611565565b600067ffffffffffffffff83111561159357611593611fe1565b6040516115aa601f8501601f191660200182611f6d565b8091508381528484840111156115bf57600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146115ee57600080fd5b919050565b600082601f83011261160457600080fd5b8135602061161182611ef6565b60405161161e8282611f6d565b8381528281019150858301600585901b8701840188101561163e57600080fd5b60005b8581101561165d57813584529284019290840190600101611641565b5090979650505050505050565b600082601f83011261167b57600080fd5b61168a83833560208501611579565b9392505050565b6000602082840312156116a357600080fd5b61168a826115d7565b600080604083850312156116bf57600080fd5b6116c8836115d7565b91506116d6602084016115d7565b90509250929050565b600080600080600060a086880312156116f757600080fd5b611700866115d7565b945061170e602087016115d7565b9350604086013567ffffffffffffffff8082111561172b57600080fd5b61173789838a016115f3565b9450606088013591508082111561174d57600080fd5b61175989838a016115f3565b9350608088013591508082111561176f57600080fd5b5061177c8882890161166a565b9150509295509295909350565b600080600080600060a086880312156117a157600080fd5b6117aa866115d7565b94506117b8602087016115d7565b93506040860135925060608601359150608086013567ffffffffffffffff8111156117e257600080fd5b61177c8882890161166a565b60008060006060848603121561180357600080fd5b61180c846115d7565b9250602084013567ffffffffffffffff8082111561182957600080fd5b611835878388016115f3565b9350604086013591508082111561184b57600080fd5b50611858868287016115f3565b9150509250925092565b600080600080600060a0868803121561187a57600080fd5b611883866115d7565b9450602086013567ffffffffffffffff808211156118a057600080fd5b6118ac89838a016115f3565b955060408801359150808211156118c257600080fd5b6118ce89838a016115f3565b945060608801359150808211156118e457600080fd5b6118f089838a016115f3565b9350608088013591508082111561190657600080fd5b5061177c888289016115f3565b6000806040838503121561192657600080fd5b61192f836115d7565b91506020830135801515811461194457600080fd5b809150509250929050565b6000806040838503121561196257600080fd5b61196b836115d7565b946020939093013593505050565b60008060006060848603121561198e57600080fd5b611997846115d7565b95602085013595506040909401359392505050565b600080604083850312156119bf57600080fd5b823567ffffffffffffffff808211156119d757600080fd5b818501915085601f8301126119eb57600080fd5b813560206119f882611ef6565b604051611a058282611f6d565b8381528281019150858301600585901b870184018b1015611a2557600080fd5b600096505b84871015611a4f57611a3b816115d7565b835260019690960195918301918301611a2a565b5096505086013592505080821115611a6657600080fd5b50611a73858286016115f3565b9150509250929050565b60008060408385031215611a9057600080fd5b823567ffffffffffffffff80821115611aa857600080fd5b611ab4868387016115f3565b93506020850135915080821115611a6657600080fd5b600060208284031215611adc57600080fd5b813561168a8161209d565b600060208284031215611af957600080fd5b815161168a8161209d565b600060208284031215611b1657600080fd5b5035919050565b60008060408385031215611b3057600080fd5b82359150602083013567ffffffffffffffff811115611b4e57600080fd5b8301601f81018513611b5f57600080fd5b611a7385823560208401611579565b60008060408385031215611b8157600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b83811015611bc057815187529582019590820190600101611ba4565b509495945050505050565b6000815180845260005b81811015611bf157602081850181015186830182015201611bd5565b81811115611c03576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090611c4490830186611b90565b8281036060840152611c568186611b90565b90508281036080840152611c6a8185611bcb565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611cb090830184611bcb565b979650505050505050565b60208152600061168a6020830184611b90565b604081526000611ce16040830185611b90565b8281036020840152611cf38185611b90565b95945050505050565b60208152600061168a6020830184611bcb565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b600067ffffffffffffffff821115611f1057611f10611fe1565b5060051b60200190565b60008219821115611f2d57611f2d611fb5565b500190565b600181811c90821680611f4657607f821691505b60208210811415611f6757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715611f9357611f93611fe1565b6040525050565b6000600019821415611fae57611fae611fb5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156120105760046000803e5060005160e01c5b90565b600060443d10156120215790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561205157505050505090565b82850191508151818111156120695750505050505090565b843d87010160208285010111156120835750505050505090565b61209260208286010187611f6d565b509095945050505050565b6001600160e01b0319811681146120b357600080fd5b5056fea2646970667358221220531cc62897965f0f108ac162c9b33ba3e4b2f175192cc2968291b1930f9d545364736f6c63430008060033516d64717256415367754a524a48417a626679733378646662684c4354794b6f67474e7951694451654e53677373",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101575760003560e01c8063862440e2116100c3578063c87b56dd1161007c578063c87b56dd146102f9578063d81d0a151461030c578063e58378bb1461031f578063e8a3d48514610328578063e985e9c514610330578063f242432a1461036c57600080fd5b8063862440e21461027a5780638da5cb5b1461028d57806395d89b41146102b8578063a22cb465146102c0578063ad2f852a146102d3578063b390c0ab146102e657600080fd5b80632eb2c2d6116101155780632eb2c2d6146102055780634e1273f414610218578063510f410414610238578063704802751461024b57806375b238fc1461025e57806383ca4b6f1461026757600080fd5b8062fdd58e1461015c57806301ffc9a71461018257806306fdde03146101a55780630e89341c146101ba578063156e29f6146101cd57806324d7806c146101e2575b600080fd5b61016f61016a36600461194f565b61037f565b6040519081526020015b60405180910390f35b610195610190366004611aca565b610416565b6040519015158152602001610179565b6101ad610468565b6040516101799190611cfc565b6101ad6101c8366004611b04565b6104f6565b6101e06101db366004611979565b610598565b005b6101956101f0366004611691565b60096020526000908152604090205460ff1681565b6101e06102133660046116df565b6105ee565b61022b6102263660046119ac565b610685565b6040516101799190611cbb565b6101e0610246366004611862565b6107af565b6101e0610259366004611691565b61080b565b61016f60075481565b6101e0610275366004611a7d565b610846565b6101e0610288366004611b1d565b610855565b600a546102a0906001600160a01b031681565b6040516001600160a01b039091168152602001610179565b6101ad61090c565b6101e06102ce366004611913565b610919565b600b546102a0906001600160a01b031681565b6101e06102f4366004611b6e565b610924565b6101ad610307366004611b04565b61092f565b6101e061031a3660046117ee565b610948565b61016f60065481565b6101ad610999565b61019561033e3660046116ac565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101e061037a366004611789565b6109a6565b60006001600160a01b0383166103f05760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061044757506001600160e01b031982166303a24d0760e21b145b8061046257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6003805461047590611f32565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190611f32565b80156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b505050505081565b600081815260086020526040902080546060919061051390611f32565b80601f016020809104026020016040519081016040528092919081815260200182805461053f90611f32565b801561058c5780601f106105615761010080835404028352916020019161058c565b820191906000526020600020905b81548152906001019060200180831161056f57829003601f168201915b50505050509050919050565b600a546001600160a01b03163314806105c557503360009081526009602052604090205460ff1615156001145b6105ce57600080fd5b6105e983838360405180602001604052806000815250610a2d565b505050565b6001600160a01b03851633148061060a575061060a853361033e565b6106715760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016103e7565b61067e8585858585610afd565b5050505050565b606081518351146106ea5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016103e7565b6000835167ffffffffffffffff81111561070657610706611fe1565b60405190808252806020026020018201604052801561072f578160200160208202803683370190505b50905060005b84518110156107a75761077a85828151811061075357610753611fcb565b602002602001015185838151811061076d5761076d611fcb565b602002602001015161037f565b82828151811061078c5761078c611fcb565b60209081029190910101526107a081611f9a565b9050610735565b509392505050565b600a546001600160a01b03163314806107dc57503360009081526009602052604090205460ff1615156001145b6107e557600080fd5b6107f0858585610c99565b61067e85838360405180602001604052806000815250610e15565b600a546001600160a01b0316331461082257600080fd5b6001600160a01b03166000908152600960205260409020805460ff19166001179055565b610851338383610c99565b5050565b600a546001600160a01b031633148061088257503360009081526009602052604090205460ff1615156001145b61088b57600080fd5b600082815260086020526040902080546108a490611f32565b1590506108b057600080fd5b600082815260086020908152604090912082516108cf928401906114e0565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b826040516109009190611cfc565b60405180910390a25050565b6004805461047590611f32565b610851338383610f60565b610851338383611041565b6008602052600090815260409020805461047590611f32565b600a546001600160a01b031633148061097557503360009081526009602052604090205460ff1615156001145b61097e57600080fd5b6105e983838360405180602001604052806000815250610e15565b6005805461047590611f32565b6001600160a01b0385163314806109c257506109c2853361033e565b610a205760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016103e7565b61067e8585858585611143565b6001600160a01b038416610a535760405162461bcd60e51b81526004016103e790611eb5565b33610a6d81600087610a6488611260565b61067e88611260565b6000848152602081815260408083206001600160a01b038916845290915281208054859290610a9d908490611f1a565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461067e816000878787876112ab565b8151835114610b1e5760405162461bcd60e51b81526004016103e790611e6d565b6001600160a01b038416610b445760405162461bcd60e51b81526004016103e790611d9b565b3360005b8451811015610c2b576000858281518110610b6557610b65611fcb565b602002602001015190506000858381518110610b8357610b83611fcb565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610bd35760405162461bcd60e51b81526004016103e790611e23565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610c10908490611f1a565b9250508190555050505080610c2490611f9a565b9050610b48565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610c7b929190611cce565b60405180910390a4610c91818787878787611416565b505050505050565b6001600160a01b038316610cbf5760405162461bcd60e51b81526004016103e790611de0565b8051825114610ce05760405162461bcd60e51b81526004016103e790611e6d565b604080516020810190915260009081905233905b8351811015610db6576000848281518110610d1157610d11611fcb565b602002602001015190506000848381518110610d2f57610d2f611fcb565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610d7f5760405162461bcd60e51b81526004016103e790611d57565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610dae81611f9a565b915050610cf4565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610e07929190611cce565b60405180910390a450505050565b6001600160a01b038416610e3b5760405162461bcd60e51b81526004016103e790611eb5565b8151835114610e5c5760405162461bcd60e51b81526004016103e790611e6d565b3360005b8451811015610ef857838181518110610e7b57610e7b611fcb565b6020026020010151600080878481518110610e9857610e98611fcb565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ee09190611f1a565b90915550819050610ef081611f9a565b915050610e60565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610f49929190611cce565b60405180910390a461067e81600087878787611416565b816001600160a01b0316836001600160a01b03161415610fd45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016103e7565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166110675760405162461bcd60e51b81526004016103e790611de0565b336110978185600061107887611260565b61108187611260565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156110d85760405162461bcd60e51b81526004016103e790611d57565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384166111695760405162461bcd60e51b81526004016103e790611d9b565b33611179818787610a6488611260565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156111ba5760405162461bcd60e51b81526004016103e790611e23565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906111f7908490611f1a565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46112578288888888886112ab565b50505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061129a5761129a611fcb565b602090810291909101015292915050565b6001600160a01b0384163b15610c915760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906112ef9089908990889088908890600401611c76565b602060405180830381600087803b15801561130957600080fd5b505af1925050508015611339575060408051601f3d908101601f1916820190925261133691810190611ae7565b60015b6113e657611345611ff7565b806308c379a0141561137f575061135a612013565b806113655750611381565b8060405162461bcd60e51b81526004016103e79190611cfc565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016103e7565b6001600160e01b0319811663f23a6e6160e01b146112575760405162461bcd60e51b81526004016103e790611d0f565b6001600160a01b0384163b15610c915760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061145a9089908990889088908890600401611c18565b602060405180830381600087803b15801561147457600080fd5b505af19250505080156114a4575060408051601f3d908101601f191682019092526114a191810190611ae7565b60015b6114b057611345611ff7565b6001600160e01b0319811663bc197c8160e01b146112575760405162461bcd60e51b81526004016103e790611d0f565b8280546114ec90611f32565b90600052602060002090601f01602090048101928261150e5760008555611554565b82601f1061152757805160ff1916838001178555611554565b82800160010185558215611554579182015b82811115611554578251825591602001919060010190611539565b50611560929150611564565b5090565b5b808211156115605760008155600101611565565b600067ffffffffffffffff83111561159357611593611fe1565b6040516115aa601f8501601f191660200182611f6d565b8091508381528484840111156115bf57600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146115ee57600080fd5b919050565b600082601f83011261160457600080fd5b8135602061161182611ef6565b60405161161e8282611f6d565b8381528281019150858301600585901b8701840188101561163e57600080fd5b60005b8581101561165d57813584529284019290840190600101611641565b5090979650505050505050565b600082601f83011261167b57600080fd5b61168a83833560208501611579565b9392505050565b6000602082840312156116a357600080fd5b61168a826115d7565b600080604083850312156116bf57600080fd5b6116c8836115d7565b91506116d6602084016115d7565b90509250929050565b600080600080600060a086880312156116f757600080fd5b611700866115d7565b945061170e602087016115d7565b9350604086013567ffffffffffffffff8082111561172b57600080fd5b61173789838a016115f3565b9450606088013591508082111561174d57600080fd5b61175989838a016115f3565b9350608088013591508082111561176f57600080fd5b5061177c8882890161166a565b9150509295509295909350565b600080600080600060a086880312156117a157600080fd5b6117aa866115d7565b94506117b8602087016115d7565b93506040860135925060608601359150608086013567ffffffffffffffff8111156117e257600080fd5b61177c8882890161166a565b60008060006060848603121561180357600080fd5b61180c846115d7565b9250602084013567ffffffffffffffff8082111561182957600080fd5b611835878388016115f3565b9350604086013591508082111561184b57600080fd5b50611858868287016115f3565b9150509250925092565b600080600080600060a0868803121561187a57600080fd5b611883866115d7565b9450602086013567ffffffffffffffff808211156118a057600080fd5b6118ac89838a016115f3565b955060408801359150808211156118c257600080fd5b6118ce89838a016115f3565b945060608801359150808211156118e457600080fd5b6118f089838a016115f3565b9350608088013591508082111561190657600080fd5b5061177c888289016115f3565b6000806040838503121561192657600080fd5b61192f836115d7565b91506020830135801515811461194457600080fd5b809150509250929050565b6000806040838503121561196257600080fd5b61196b836115d7565b946020939093013593505050565b60008060006060848603121561198e57600080fd5b611997846115d7565b95602085013595506040909401359392505050565b600080604083850312156119bf57600080fd5b823567ffffffffffffffff808211156119d757600080fd5b818501915085601f8301126119eb57600080fd5b813560206119f882611ef6565b604051611a058282611f6d565b8381528281019150858301600585901b870184018b1015611a2557600080fd5b600096505b84871015611a4f57611a3b816115d7565b835260019690960195918301918301611a2a565b5096505086013592505080821115611a6657600080fd5b50611a73858286016115f3565b9150509250929050565b60008060408385031215611a9057600080fd5b823567ffffffffffffffff80821115611aa857600080fd5b611ab4868387016115f3565b93506020850135915080821115611a6657600080fd5b600060208284031215611adc57600080fd5b813561168a8161209d565b600060208284031215611af957600080fd5b815161168a8161209d565b600060208284031215611b1657600080fd5b5035919050565b60008060408385031215611b3057600080fd5b82359150602083013567ffffffffffffffff811115611b4e57600080fd5b8301601f81018513611b5f57600080fd5b611a7385823560208401611579565b60008060408385031215611b8157600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b83811015611bc057815187529582019590820190600101611ba4565b509495945050505050565b6000815180845260005b81811015611bf157602081850181015186830182015201611bd5565b81811115611c03576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090611c4490830186611b90565b8281036060840152611c568186611b90565b90508281036080840152611c6a8185611bcb565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611cb090830184611bcb565b979650505050505050565b60208152600061168a6020830184611b90565b604081526000611ce16040830185611b90565b8281036020840152611cf38185611b90565b95945050505050565b60208152600061168a6020830184611bcb565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b600067ffffffffffffffff821115611f1057611f10611fe1565b5060051b60200190565b60008219821115611f2d57611f2d611fb5565b500190565b600181811c90821680611f4657607f821691505b60208210811415611f6757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715611f9357611f93611fe1565b6040525050565b6000600019821415611fae57611fae611fb5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156120105760046000803e5060005160e01c5b90565b600060443d10156120215790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561205157505050505090565b82850191508151818111156120695750505050505090565b843d87010160208285010111156120835750505050505090565b61209260208286010187611f6d565b509095945050505050565b6001600160e01b0319811681146120b357600080fd5b5056fea2646970667358221220531cc62897965f0f108ac162c9b33ba3e4b2f175192cc2968291b1930f9d545364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1132,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1138,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1140,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 20167,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 20169,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 20172,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "contractURI",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 20177,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "OWNER_ROLE",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 20182,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "ADMIN_ROLE",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 20186,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "tokenURI",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 20190,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "isAdmin",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20192,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 20198,
        "contract": "contracts/tests/NFTs/WatcherMinter.sol:WatcherMinter",
        "label": "royaltyAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
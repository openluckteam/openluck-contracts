{
  "address": "0xBC38e7E4d02E35F2a93F1B814782Fd01f6606efc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_maxSeat",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "seat",
          "type": "uint16"
        }
      ],
      "name": "CreateGroup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        }
      ],
      "name": "JoinGroup",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXECUTOR",
      "outputs": [
        {
          "internalType": "contract ILucksExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SEAT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "seat",
          "type": "uint16"
        }
      ],
      "name": "createGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getGroupUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groupIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groupSeat",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "seat",
          "type": "uint16"
        }
      ],
      "name": "joinGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3ae47ecab4a0d477955ccc75eae6bf6ba42d5c47c903fa531068f4872f0a685",
  "receipt": {
    "to": null,
    "from": "0x8c623589Ce38936A138a70cCE554553473BbC0f4",
    "contractAddress": "0xBC38e7E4d02E35F2a93F1B814782Fd01f6606efc",
    "transactionIndex": 0,
    "gasUsed": "1092911",
    "logsBloom": "0x
    "blockHash": "0x7afc527e1ae39551831118a594afe7bcf6708a4a91c01829f9f2d3b3e9179748",
    "transactionHash": "0xb3ae47ecab4a0d477955ccc75eae6bf6ba42d5c47c903fa531068f4872f0a685",
    "logs": [],
    "blockNumber": 18190,
    "cumulativeGasUsed": "1092911",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0C2Ee72fb44036039fEF429Dd067cA46483B66dD",
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "177ed0f2b9f34374598af4314d3fc464",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxSeat\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"seat\",\"type\":\"uint16\"}],\"name\":\"CreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"JoinGroup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"contract ILucksExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SEAT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"seat\",\"type\":\"uint16\"}],\"name\":\"createGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getGroupUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupSeat\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"seat\",\"type\":\"uint16\"}],\"name\":\"joinGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Openluck LucksGroup\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"It is the contract for LucksGroup\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lucks/LucksGroup.sol\":\"LucksGroup\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);\\r\\n    event MinWaitPeriodUpdated(uint256 oldMinWaitPeriod, uint256 newMinWaitPeriod);\\r\\n\\r\\n    event RevertInvoke(uint256 taskId, bytes reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\",\"keccak256\":\"0xac2ced661bf25c3c6f56c924fe63ff2b342aa08d1f077e6e8873df73596a855e\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n    bytes zroPaymentAddr; //  the address of the ZRO token holder who would pay for the transaction\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n\\r\\n    // ============= Task functions ====================\\r\\n\\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,\\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateCreateTaskFee(\\r\\n        uint16 _dstChainId,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateWithdrawNFTsFee(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n}\\r\\n\",\"keccak256\":\"0xeba9f5dfb8e3e81f546689fae3b00e24cee2fc65c8c341a16f4ddac1f47c147e\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\nstruct TaskInfo {\\r\\n    uint256 lastTID;\\r\\n    uint256 closeTime;\\r\\n    uint256 finalNumber;\\r\\n}\\r\\n\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint256 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);\\r\\n    \\r\\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\\r\\n    function isFail(uint256 taskId) external view returns(bool);\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdb4e6904f733c5522fcda944a841924e1ac748c1a49809d5455d72636c35438c\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksGroup {    \\r\\n\\r\\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\\r\\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\\r\\n   \\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\\r\\n    function createGroup(uint256 taskId, uint16 seat) external;\\r\\n}\",\"keccak256\":\"0x0f80c646005b1eb282e864517e9effd2f2a54411aec731e73fbd539808d6c38f\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksVRF} from \\\"./ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"./ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"./ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"./ILucksAuto.sol\\\";\\r\\n\\r\\ninterface ILucksHelper {\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\r\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\r\\n    function checkNFTContract(address addr) external view returns (bool);\\r\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\r\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\r\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\r\\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\r\\n\\r\\n    function getProtocolFeeRecipient() external view returns (address);\\r\\n    function getProtocolFee() external view returns (uint256);\\r\\n    function getMinTargetLimit(address token) external view returns (uint256);\\r\\n    function getDrawDelay() external view returns (uint32);\\r\\n\\r\\n    function getVRF() external view returns (ILucksVRF);\\r\\n    function getGROUPS() external view returns (ILucksGroup);\\r\\n    // function getREWARDS() external view returns (ILucksRewards);\\r\\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\\r\\n    function getAutoClose() external view returns (ILucksAuto);\\r\\n    function getAutoDraw() external view returns (ILucksAuto);\\r\\n}\\r\\n\",\"keccak256\":\"0x63a0408bc27abb14b326faf40dd9156c855c71a954d950de1a707efeebc51c31\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface ILucksPaymentStrategy {\\r\\n    \\r\\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\\r\\n}\",\"keccak256\":\"0xfb95b42ebb7f656c8373266c15d91659333f1ef508bba71429ea0932fe1dcdad\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILucksVRF {\\r\\n\\r\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\r\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \\r\\n\\r\\n    /**\\r\\n     * Requests randomness from a user-provided max\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\r\\n\\r\\n    /**\\r\\n     * Views random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\r\\n}\",\"keccak256\":\"0x8039f261810e00db42828632a5deba8a11613357d9c63b33c5d342abb6d6da0e\",\"license\":\"MIT\"},\"contracts/lucks/LucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksGroup} from \\\"../interfaces/ILucksGroup.sol\\\";\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus} from \\\"../interfaces/ILucksExecutor.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksGroup\\r\\n * @notice It is the contract for LucksGroup\\r\\n */\\r\\ncontract LucksGroup is ILucksGroup {\\r\\n\\r\\n    using Counters for Counters.Counter;    \\r\\n\\r\\n    ILucksExecutor public EXECUTOR;\\r\\n\\r\\n    uint32 public MAX_SEAT = 10;\\r\\n    \\r\\n    mapping(uint256 => uint256) public groupIds;               // groupId counter (taskId => groupId)\\r\\n    mapping(uint256 => mapping(uint256 => address[])) public groups;     // store task groups (taskId => groupId => group member address)\\r\\n    mapping(address => mapping(uint256 => uint256)) public userGroups;   // store user joined groups (user => taskId => groupId)\\r\\n    mapping(uint256 => mapping(uint256 => uint16)) public groupSeat;     // store group setting(task=> groupId = > group seat)\\r\\n\\r\\n    constructor(address _executor, uint32 _maxSeat) {\\r\\n        EXECUTOR =  ILucksExecutor(_executor);        \\r\\n        MAX_SEAT = _maxSeat;\\r\\n    }\\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address user) override view public returns (address[] memory){                \\r\\n        return groups[taskId][userGroups[user][taskId]];\\r\\n    }\\r\\n\\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) override public {   \\r\\n        address user = msg.sender;                  \\r\\n        require(groupId > 0 && groupId <= groupIds[taskId], \\\"Invalid groupId\\\");\\r\\n        require(seat <= MAX_SEAT, \\\"Invalid seat\\\");\\r\\n        require(userGroups[user][taskId] == 0, \\\"Already join a group\\\");\\r\\n        require(address(EXECUTOR)!=address(0), \\\"EXECUTOR not set\\\");\\r\\n            \\r\\n        TaskItem memory item = EXECUTOR.getTask(taskId);        \\r\\n        require(block.timestamp <= item.endTime, \\\"Invalid time range\\\");    \\r\\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \\\"Invalid status\\\");\\r\\n\\r\\n        // join\\r\\n        if (groups[taskId][groupId].length < MAX_SEAT) {            \\r\\n            groups[taskId][groupId].push(user);\\r\\n            userGroups[user][taskId] = groupId;\\r\\n\\r\\n            emit JoinGroup(user, taskId, groupId);\\r\\n        }\\r\\n        else {\\r\\n            if (seat > 1) {\\r\\n                // over seat, create new group\\r\\n                _createGroup(user, taskId, seat); \\r\\n            }\\r\\n            else {\\r\\n                revert(\\\"Exceed seat\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createGroup(uint256 taskId, uint16 seat) override public {  \\r\\n        _createGroup(msg.sender, taskId, seat);\\r\\n    }\\r\\n\\r\\n    function _createGroup(address user, uint256 taskId, uint16 seat) internal {            \\r\\n                 \\r\\n        require(seat <= MAX_SEAT && seat > 1, \\\"Invalid seat\\\");\\r\\n        require(userGroups[user][taskId] == 0, \\\"Already join a group\\\");\\r\\n        require(address(EXECUTOR)!=address(0), \\\"EXECUTOR not set\\\");\\r\\n            \\r\\n        TaskItem memory item = EXECUTOR.getTask(taskId);        \\r\\n        require(block.timestamp <= item.endTime, \\\"Invalid time range\\\");    \\r\\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \\\"Invalid status\\\");\\r\\n        \\r\\n        uint256 groupId = groupIds[taskId] + 1;\\r\\n        groupIds[taskId] = groupId;\\r\\n\\r\\n        groups[taskId][groupId].push(user);\\r\\n        userGroups[user][taskId] = groupId;\\r\\n\\r\\n        emit CreateGroup(user, taskId, groupId, seat);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xfba9b2e6a229963c58105fc40ba9bca9fe1ec630f6213e9ce5d1179cc292997a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805463ffffffff60a01b1916600560a11b17905534801561002657600080fd5b506040516113593803806113598339810160408190526100459161007a565b6000805463ffffffff909216600160a01b026001600160c01b03199092166001600160a01b03909316929092171790556100c9565b6000806040838503121561008d57600080fd5b82516001600160a01b03811681146100a457600080fd5b602084015190925063ffffffff811681146100be57600080fd5b809150509250929050565b611281806100d86000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80634093d7a111610076578063630dc7cb1161005b578063630dc7cb146101a357806376e5066e146101c3578063dead6c1e1461020557600080fd5b80634093d7a11461014a57806360a9e0971461017857600080fd5b806313cedac8146100a857806317a0a232146100ea5780632d027f75146100ff57806338c1cdb214610112575b600080fd5b6000546100d09074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b6100fd6100f8366004611090565b610225565b005b6100fd61010d366004611049565b6107b1565b6101256101203660046110c9565b6107c0565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e1565b61016a610158366004611000565b60016020526000908152604090205481565b6040519081526020016100e1565b61016a610186366004610e7d565b600360209081526000928352604080842090915290825290205481565b6000546101259073ffffffffffffffffffffffffffffffffffffffff1681565b6101f26101d136600461106e565b600460209081526000928352604080842090915290825290205461ffff1681565b60405161ffff90911681526020016100e1565b610218610213366004611019565b610812565b6040516100e191906110f5565b33821580159061024357506000848152600160205260409020548311155b6102ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c69642067726f75704964000000000000000000000000000000000060448201526064015b60405180910390fd5b60005474010000000000000000000000000000000000000000900463ffffffff1661ffff8316111561033c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642073656174000000000000000000000000000000000000000060448201526064016102a5565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360209081526040808320878452909152902054156103d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416c7265616479206a6f696e20612067726f757000000000000000000000000060448201526064016102a5565b60005473ffffffffffffffffffffffffffffffffffffffff16610453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4558454355544f52206e6f74207365740000000000000000000000000000000060448201526064016102a5565b600080546040517f1d65e77e0000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff90911690631d65e77e9060240160006040518083038186803b1580156104be57600080fd5b505afa1580156104d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105189190810190610ea9565b9050806101000151421115610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e6765000000000000000000000000000060448201526064016102a5565b60008160c0015160058111156105a1576105a16111b8565b14806105c2575060018160c0015160058111156105c0576105c06111b8565b145b610628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642073746174757300000000000000000000000000000000000060448201526064016102a5565b60008054868252600260209081526040808420888552909152909120547401000000000000000000000000000000000000000090910463ffffffff16111561072b576000858152600260209081526040808320878452825280832080546001810182559084528284200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871690811790915580845260038352818420898552835292819020879055805192835290820187905281018590527f9ded7a3449a7d51e28eafa621e5ed2137c3aa3778b53065e2d07bf5078893edc9060600160405180910390a16107aa565b60018361ffff161115610748576107438286856108bc565b6107aa565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f457863656564207365617400000000000000000000000000000000000000000060448201526064016102a5565b5050505050565b6107bc3383836108bc565b5050565b600260205282600052604060002060205281600052604060002081815481106107e857600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff851684526003835281842086855283528184205484528252918290208054835181840281018401909452808452606093928301828280156108af57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610884575b5050505050905092915050565b60005474010000000000000000000000000000000000000000900463ffffffff1661ffff8216118015906108f4575060018161ffff16115b61095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642073656174000000000000000000000000000000000000000060448201526064016102a5565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360209081526040808320858452909152902054156109f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416c7265616479206a6f696e20612067726f757000000000000000000000000060448201526064016102a5565b60005473ffffffffffffffffffffffffffffffffffffffff16610a71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4558454355544f52206e6f74207365740000000000000000000000000000000060448201526064016102a5565b600080546040517f1d65e77e0000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff90911690631d65e77e9060240160006040518083038186803b158015610adc57600080fd5b505afa158015610af0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b369190810190610ea9565b9050806101000151421115610ba7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e6765000000000000000000000000000060448201526064016102a5565b60008160c001516005811115610bbf57610bbf6111b8565b1480610be0575060018160c001516005811115610bde57610bde6111b8565b145b610c46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642073746174757300000000000000000000000000000000000060448201526064016102a5565b6000838152600160208190526040822054610c6091611179565b600085815260016020818152604080842085905560028252808420858552825280842080549384018155845281842090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8b169081179091558084526003825282842089855282529282902084905581519283528201879052810182905261ffff851660608201529091507f5c23ecf7d35b727b39000e452236d77f421afe8aa28e32d120085c0b3a8f16b69060800160405180910390a15050505050565b8051610d4481611216565b919050565b600082601f830112610d5a57600080fd5b8151602067ffffffffffffffff80831115610d7757610d776111e7565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715610dba57610dba6111e7565b60405284815283810192508684018288018501891015610dd957600080fd5b600092505b85831015610dfc578051845292840192600192909201918401610dde565b50979650505050505050565b805160068110610d4457600080fd5b600060408284031215610e2957600080fd5b6040516040810181811067ffffffffffffffff82111715610e4c57610e4c6111e7565b80604052508091508251610e5f81611216565b8152602092830151920191909152919050565b8051610d448161123b565b60008060408385031215610e9057600080fd5b8235610e9b81611216565b946020939093013593505050565b600060208284031215610ebb57600080fd5b815167ffffffffffffffff80821115610ed357600080fd5b908301906102008286031215610ee857600080fd5b610ef061114f565b610ef983610d39565b8152610f0760208401610e72565b6020820152610f1860408401610d39565b6040820152606083015182811115610f2f57600080fd5b610f3b87828601610d49565b606083015250608083015182811115610f5357600080fd5b610f5f87828601610d49565b608083015250610f7160a08401610d39565b60a0820152610f8260c08401610e08565b60c082015260e083810151908201526101008084015190820152610120808401519082015261014080840151908201526101609150610fc2828401610e72565b828201526101809150610fd786838501610e17565b828201526101c09150818301516101a08201526101e08301518282015280935050505092915050565b60006020828403121561101257600080fd5b5035919050565b6000806040838503121561102c57600080fd5b82359150602083013561103e81611216565b809150509250929050565b6000806040838503121561105c57600080fd5b82359150602083013561103e8161123b565b6000806040838503121561108157600080fd5b50508035926020909101359150565b6000806000606084860312156110a557600080fd5b833592506020840135915060408401356110be8161123b565b809150509250925092565b6000806000606084860312156110de57600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b8181101561114357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611111565b50909695505050505050565b6040516101e0810167ffffffffffffffff81118282101715611173576111736111e7565b60405290565b600082198211156111b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461123857600080fd5b50565b61ffff8116811461123857600080fdfea2646970667358221220a57bf78fd207e51874d06e9c785b8ea26b7a7a4d9c4311533a130827c4b32d8864736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80634093d7a111610076578063630dc7cb1161005b578063630dc7cb146101a357806376e5066e146101c3578063dead6c1e1461020557600080fd5b80634093d7a11461014a57806360a9e0971461017857600080fd5b806313cedac8146100a857806317a0a232146100ea5780632d027f75146100ff57806338c1cdb214610112575b600080fd5b6000546100d09074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b6100fd6100f8366004611090565b610225565b005b6100fd61010d366004611049565b6107b1565b6101256101203660046110c9565b6107c0565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e1565b61016a610158366004611000565b60016020526000908152604090205481565b6040519081526020016100e1565b61016a610186366004610e7d565b600360209081526000928352604080842090915290825290205481565b6000546101259073ffffffffffffffffffffffffffffffffffffffff1681565b6101f26101d136600461106e565b600460209081526000928352604080842090915290825290205461ffff1681565b60405161ffff90911681526020016100e1565b610218610213366004611019565b610812565b6040516100e191906110f5565b33821580159061024357506000848152600160205260409020548311155b6102ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c69642067726f75704964000000000000000000000000000000000060448201526064015b60405180910390fd5b60005474010000000000000000000000000000000000000000900463ffffffff1661ffff8316111561033c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642073656174000000000000000000000000000000000000000060448201526064016102a5565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360209081526040808320878452909152902054156103d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416c7265616479206a6f696e20612067726f757000000000000000000000000060448201526064016102a5565b60005473ffffffffffffffffffffffffffffffffffffffff16610453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4558454355544f52206e6f74207365740000000000000000000000000000000060448201526064016102a5565b600080546040517f1d65e77e0000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff90911690631d65e77e9060240160006040518083038186803b1580156104be57600080fd5b505afa1580156104d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105189190810190610ea9565b9050806101000151421115610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e6765000000000000000000000000000060448201526064016102a5565b60008160c0015160058111156105a1576105a16111b8565b14806105c2575060018160c0015160058111156105c0576105c06111b8565b145b610628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642073746174757300000000000000000000000000000000000060448201526064016102a5565b60008054868252600260209081526040808420888552909152909120547401000000000000000000000000000000000000000090910463ffffffff16111561072b576000858152600260209081526040808320878452825280832080546001810182559084528284200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871690811790915580845260038352818420898552835292819020879055805192835290820187905281018590527f9ded7a3449a7d51e28eafa621e5ed2137c3aa3778b53065e2d07bf5078893edc9060600160405180910390a16107aa565b60018361ffff161115610748576107438286856108bc565b6107aa565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f457863656564207365617400000000000000000000000000000000000000000060448201526064016102a5565b5050505050565b6107bc3383836108bc565b5050565b600260205282600052604060002060205281600052604060002081815481106107e857600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff851684526003835281842086855283528184205484528252918290208054835181840281018401909452808452606093928301828280156108af57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610884575b5050505050905092915050565b60005474010000000000000000000000000000000000000000900463ffffffff1661ffff8216118015906108f4575060018161ffff16115b61095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c69642073656174000000000000000000000000000000000000000060448201526064016102a5565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360209081526040808320858452909152902054156109f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f416c7265616479206a6f696e20612067726f757000000000000000000000000060448201526064016102a5565b60005473ffffffffffffffffffffffffffffffffffffffff16610a71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4558454355544f52206e6f74207365740000000000000000000000000000000060448201526064016102a5565b600080546040517f1d65e77e0000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff90911690631d65e77e9060240160006040518083038186803b158015610adc57600080fd5b505afa158015610af0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b369190810190610ea9565b9050806101000151421115610ba7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e6765000000000000000000000000000060448201526064016102a5565b60008160c001516005811115610bbf57610bbf6111b8565b1480610be0575060018160c001516005811115610bde57610bde6111b8565b145b610c46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c69642073746174757300000000000000000000000000000000000060448201526064016102a5565b6000838152600160208190526040822054610c6091611179565b600085815260016020818152604080842085905560028252808420858552825280842080549384018155845281842090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8b169081179091558084526003825282842089855282529282902084905581519283528201879052810182905261ffff851660608201529091507f5c23ecf7d35b727b39000e452236d77f421afe8aa28e32d120085c0b3a8f16b69060800160405180910390a15050505050565b8051610d4481611216565b919050565b600082601f830112610d5a57600080fd5b8151602067ffffffffffffffff80831115610d7757610d776111e7565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715610dba57610dba6111e7565b60405284815283810192508684018288018501891015610dd957600080fd5b600092505b85831015610dfc578051845292840192600192909201918401610dde565b50979650505050505050565b805160068110610d4457600080fd5b600060408284031215610e2957600080fd5b6040516040810181811067ffffffffffffffff82111715610e4c57610e4c6111e7565b80604052508091508251610e5f81611216565b8152602092830151920191909152919050565b8051610d448161123b565b60008060408385031215610e9057600080fd5b8235610e9b81611216565b946020939093013593505050565b600060208284031215610ebb57600080fd5b815167ffffffffffffffff80821115610ed357600080fd5b908301906102008286031215610ee857600080fd5b610ef061114f565b610ef983610d39565b8152610f0760208401610e72565b6020820152610f1860408401610d39565b6040820152606083015182811115610f2f57600080fd5b610f3b87828601610d49565b606083015250608083015182811115610f5357600080fd5b610f5f87828601610d49565b608083015250610f7160a08401610d39565b60a0820152610f8260c08401610e08565b60c082015260e083810151908201526101008084015190820152610120808401519082015261014080840151908201526101609150610fc2828401610e72565b828201526101809150610fd786838501610e17565b828201526101c09150818301516101a08201526101e08301518282015280935050505092915050565b60006020828403121561101257600080fd5b5035919050565b6000806040838503121561102c57600080fd5b82359150602083013561103e81611216565b809150509250929050565b6000806040838503121561105c57600080fd5b82359150602083013561103e8161123b565b6000806040838503121561108157600080fd5b50508035926020909101359150565b6000806000606084860312156110a557600080fd5b833592506020840135915060408401356110be8161123b565b809150509250925092565b6000806000606084860312156110de57600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b8181101561114357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611111565b50909695505050505050565b6040516101e0810167ffffffffffffffff81118282101715611173576111736111e7565b60405290565b600082198211156111b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461123857600080fd5b50565b61ffff8116811461123857600080fdfea2646970667358221220a57bf78fd207e51874d06e9c785b8ea26b7a7a4d9c4311533a130827c4b32d8864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Openluck LucksGroup",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "It is the contract for LucksGroup",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13967,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "EXECUTOR",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILucksExecutor)9853"
      },
      {
        "astId": 13970,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "MAX_SEAT",
        "offset": 20,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 13974,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "groupIds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13981,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "groups",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 13987,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "userGroups",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 13993,
        "contract": "contracts/lucks/LucksGroup.sol:LucksGroup",
        "label": "groupSeat",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint16))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(ILucksExecutor)9853": {
        "encoding": "inplace",
        "label": "contract ILucksExecutor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint16))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint16)"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
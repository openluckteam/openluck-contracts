{
  "address": "0xD68fF8785514c31A2fb5E6396F8682A4a8574fA2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRICE_FEED_NOT_FOUND",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "currency",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "token",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract AggregatorV3Interface",
          "name": "feed",
          "type": "address"
        }
      ],
      "name": "AddFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "currency",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "token",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "addFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "feeders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "feed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "currency",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "token",
          "type": "string"
        }
      ],
      "name": "getFeed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "contract AggregatorV3Interface",
              "name": "feed",
              "type": "address"
            }
          ],
          "internalType": "struct ITokenPrices.TokenFeed",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "currency",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "token",
          "type": "string"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "currency",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "tokens",
          "type": "string[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x78bcd486741d83d0a903738e2de9ca0ac270b97419a2598cb45ed637ef07e428",
  "receipt": {
    "to": null,
    "from": "0x8c623589Ce38936A138a70cCE554553473BbC0f4",
    "contractAddress": "0xD68fF8785514c31A2fb5E6396F8682A4a8574fA2",
    "transactionIndex": 0,
    "gasUsed": "1112726",
    "logsBloom": "0x
    "blockHash": "0xff45c8ab2ba6ea2844a27337ce1299efcb118e7ed094b6b47713024719ce7679",
    "transactionHash": "0x78bcd486741d83d0a903738e2de9ca0ac270b97419a2598cb45ed637ef07e428",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18204,
        "transactionHash": "0x78bcd486741d83d0a903738e2de9ca0ac270b97419a2598cb45ed637ef07e428",
        "address": "0xD68fF8785514c31A2fb5E6396F8682A4a8574fA2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c623589ce38936a138a70cce554553473bbc0f4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xff45c8ab2ba6ea2844a27337ce1299efcb118e7ed094b6b47713024719ce7679"
      }
    ],
    "blockNumber": 18204,
    "cumulativeGasUsed": "1112726",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1a9c64e66e0f1071b3b5090c79ef260f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRICE_FEED_NOT_FOUND\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"AddFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"addFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"feeders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"feed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"}],\"name\":\"getFeed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"feed\",\"type\":\"address\"}],\"internalType\":\"struct ITokenPrices.TokenFeed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tokens\",\"type\":\"string[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Manages and normalizes price feeds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenPrices.sol\":\"TokenPrices\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0xfcba81e4d8281c31627d1f157ee06efed0cd8875ed6bcc216773701ba5e21d1d\",\"license\":\"UNLICENSED\"},\"contracts/TokenPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\r\\nimport \\\"./interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./interfaces/ITokenPrices.sol\\\";\\r\\n\\r\\nerror PRICE_FEED_NOT_FOUND();\\r\\n\\r\\n/** \\r\\n  @notice Manages and normalizes price feeds.\\r\\n*/\\r\\ncontract TokenPrices is ITokenPrices, Ownable {\\r\\n\\r\\n  mapping(string => mapping(string => TokenFeed)) public feeders;  \\r\\n\\r\\n  function getPrice(string memory currency, string memory token) override public view returns (uint256) {\\r\\n\\r\\n    TokenFeed memory tokenFeed = feeders[currency][token];\\r\\n\\r\\n     // If the currency is the base, return 1 since they are priced the same. Include the desired number of decimals.\\r\\n    if (keccak256(abi.encodePacked(currency)) == keccak256(abi.encodePacked(token))) return 10**tokenFeed.decimals;\\r\\n\\r\\n    // If it exists, return the price.\\r\\n    if (address(tokenFeed.feed) != address(0)) return currentPrice(tokenFeed.feed, tokenFeed.decimals);\\r\\n\\r\\n    // Get the inverse tokenFeed.\\r\\n    tokenFeed = feeders[token][currency];\\r\\n\\r\\n    // If it exists, return the inverse price.\\r\\n    if (address(tokenFeed.feed) != address(0))\\r\\n      return PRBMath.mulDiv(10**tokenFeed.decimals, 10**tokenFeed.decimals, currentPrice(tokenFeed.feed, tokenFeed.decimals));\\r\\n\\r\\n    // No price feed available, revert.\\r\\n    revert PRICE_FEED_NOT_FOUND();\\r\\n  }\\r\\n\\r\\n  function getPrices(string memory currency, string[] memory tokens) override external view returns (uint256[] memory) {\\r\\n    uint256[] memory prices = new uint256[](tokens.length);\\r\\n    for(uint i=0; i < tokens.length; i++) { \\r\\n      prices[i] = getPrice(currency, tokens[i]);\\r\\n    }\\r\\n    return prices;\\r\\n  }\\r\\n\\r\\n  function getFeed(string memory currency, string memory token) override external view returns (TokenFeed memory){\\r\\n    return feeders[currency][token];\\r\\n  }\\r\\n\\r\\n  function addFeed(string memory currency, string memory token, uint256 decimals, AggregatorV3Interface priceFeed) override external onlyOwner {\\r\\n    \\r\\n    feeders[currency][token] = TokenFeed(decimals, priceFeed);\\r\\n\\r\\n    emit AddFeed(currency, token, decimals, priceFeed);\\r\\n  }\\r\\n\\r\\n\\r\\n  function currentPrice(AggregatorV3Interface feed, uint256 decimals) internal view returns (uint256) {\\r\\n    // Get the latest round information. Only need the price is needed.\\r\\n    (, int256 price, , , ) = feed.latestRoundData();\\r\\n\\r\\n    // Get a reference to the number of decimals the feed uses.\\r\\n    uint256 _feedDecimals = feed.decimals();\\r\\n\\r\\n    // Return the price, adjusted to the target decimals.\\r\\n    return adjustDecimals(uint256(price), _feedDecimals, decimals);\\r\\n  }\\r\\n\\r\\n  function adjustDecimals(\\r\\n    uint256 _value,\\r\\n    uint256 _decimals,\\r\\n    uint256 _targetDecimals\\r\\n  ) internal pure returns (uint256) {\\r\\n    // If decimals need adjusting, multiply or divide the price by the decimal adjuster to get the normalized result.\\r\\n    if (_targetDecimals == _decimals) return _value;\\r\\n    else if (_targetDecimals > _decimals) return _value * 10**(_targetDecimals - _decimals);\\r\\n    else return _value / 10**(_decimals - _targetDecimals);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0617cd2942cc706cd35449690dd960750b4df92995bf8d1de209c80261a6f8c\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n\\r\\n  function decimals()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint8\\r\\n    );\\r\\n\\r\\n  function description()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      string memory\\r\\n    );\\r\\n\\r\\n  function version()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256\\r\\n    );\\r\\n\\r\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n  // if they do not have data to report, instead of returning unset values\\r\\n  // which could be misinterpreted as actual reported values.\\r\\n  function getRoundData(\\r\\n    uint80 _roundId\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\",\"keccak256\":\"0x358e20c282ceeee26da35ead54311127a358e1e5dcec05b2b1a28c1e0b132e1d\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./AggregatorV3Interface.sol\\\";\\r\\n\\r\\ninterface ITokenPrices {\\r\\n\\r\\n  struct TokenFeed {    \\r\\n    uint256 decimals;    \\r\\n    AggregatorV3Interface feed;\\r\\n  }\\r\\n\\r\\n  event AddFeed(string currency, string token, uint256 decimals, AggregatorV3Interface feed);\\r\\n\\r\\n  function getPrice(string memory currency, string memory token) external view returns (uint256);\\r\\n\\r\\n  function getPrices(string memory currency, string[] memory tokens) external view returns (uint256[] memory);\\r\\n\\r\\n  function getFeed(string memory currency, string memory token) external view returns (TokenFeed memory);\\r\\n\\r\\n  function addFeed(string memory currency, string memory token, uint256 decimals, AggregatorV3Interface priceFeed) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4b41d71fb00019477632f4d6844409c17ee39aef272d3511c0b2a89b92b37c15\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6112cf8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146101a55780638af09ac1146101af5780638da5cb5b146101c2578063f2fde38b146101ea57600080fd5b80630519e71a1461008d578063119481bf146100d65780632aa09127146101645780633d0f34da14610184575b600080fd5b6100a061009b366004610cf9565b6101fd565b604080518251815260209283015173ffffffffffffffffffffffffffffffffffffffff1692810192909252015b60405180910390f35b61013a6100e4366004610cf9565b8151602081840181018051600180835293830195830195909520949052825180840182018051958152908201939091019290922092909152815491015473ffffffffffffffffffffffffffffffffffffffff1682565b6040805192835273ffffffffffffffffffffffffffffffffffffffff9091166020830152016100cd565b610177610172366004610c0f565b610282565b6040516100cd9190610eb6565b610197610192366004610cf9565b610332565b6040519081526020016100cd565b6101ad61050b565b005b6101ad6101bd366004610d5d565b61059d565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100cd565b6101ad6101f8366004610bf2565b610717565b60408051808201909152600080825260208201526001836040516102219190610e9a565b90815260200160405180910390208260405161023d9190610e9a565b9081526040805191829003602090810183208383019092528154835260019091015473ffffffffffffffffffffffffffffffffffffffff169082015290505b92915050565b60606000825167ffffffffffffffff8111156102a0576102a0611248565b6040519080825280602002602001820160405280156102c9578160200160208202803683370190505b50905060005b835181101561032a576102fb858583815181106102ee576102ee611219565b6020026020010151610332565b82828151811061030d5761030d611219565b60209081029190910101528061032281611182565b9150506102cf565b509392505050565b6000806001846040516103459190610e9a565b9081526020016040518091039020836040516103619190610e9a565b90815260408051602092819003830181208183018352805482526001015473ffffffffffffffffffffffffffffffffffffffff168382015290519092506103aa91859101610e9a565b60405160208183030381529060405280519060200120846040516020016103d19190610e9a565b6040516020818303038152906040528051906020012014156104025780516103fa90600a611038565b91505061027c565b602081015173ffffffffffffffffffffffffffffffffffffffff1615610434576103fa81602001518260000151610847565b6001836040516104449190610e9a565b9081526020016040518091039020846040516104609190610e9a565b90815260408051602092819003830181208183019092528154815260019091015473ffffffffffffffffffffffffffffffffffffffff169181018290529150156104d95780516103fa906104b590600a611038565b82516104c290600a611038565b6104d484602001518560000151610847565b610967565b6040517f75c9d5ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314610591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61059b6000610a72565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461061e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610588565b60405180604001604052808381526020018273ffffffffffffffffffffffffffffffffffffffff168152506001856040516106599190610e9a565b9081526020016040518091039020846040516106759190610e9a565b90815260405160209181900382018120835181559290910151600190920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909316929092179091557f0157bfb6caece191dc6671d061c1b1cca6bb8a9db17a047a6ce8ed7f141f479c90610709908690869086908690610efa565b60405180910390a150505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610588565b73ffffffffffffffffffffffffffffffffffffffff811661083b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610588565b61084481610a72565b50565b6000808373ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c89190610ddd565b50505091505060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561091657600080fd5b505afa15801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190610e2d565b60ff16905061095e828286610ae7565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600014156109c0578382816109b6576109b66111ea565b0492505050610a6b565b838110610a03576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610588565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082821415610af8575082610a6b565b82821115610b2657610b0a838361113b565b610b1590600a611038565b610b1f90856110fe565b9050610a6b565b610b30828461113b565b610b3b90600a611038565b610b1f9085610f9c565b600082601f830112610b5657600080fd5b813567ffffffffffffffff811115610b7057610b70611248565b610ba160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610f4d565b818152846020838601011115610bb657600080fd5b816020850160208301376000918101602001919091529392505050565b805169ffffffffffffffffffff81168114610bed57600080fd5b919050565b600060208284031215610c0457600080fd5b8135610a6b81611277565b60008060408385031215610c2257600080fd5b823567ffffffffffffffff80821115610c3a57600080fd5b610c4686838701610b45565b9350602091508185013581811115610c5d57600080fd5b8501601f81018713610c6e57600080fd5b803582811115610c8057610c80611248565b8060051b610c8f858201610f4d565b8281528581019084870183860188018c1015610caa57600080fd5b60009350835b85811015610ce757813588811115610cc6578586fd5b610cd48e8b838b0101610b45565b8552509288019290880190600101610cb0565b50989b909a5098505050505050505050565b60008060408385031215610d0c57600080fd5b823567ffffffffffffffff80821115610d2457600080fd5b610d3086838701610b45565b93506020850135915080821115610d4657600080fd5b50610d5385828601610b45565b9150509250929050565b60008060008060808587031215610d7357600080fd5b843567ffffffffffffffff80821115610d8b57600080fd5b610d9788838901610b45565b95506020870135915080821115610dad57600080fd5b50610dba87828801610b45565b935050604085013591506060850135610dd281611277565b939692955090935050565b600080600080600060a08688031215610df557600080fd5b610dfe86610bd3565b9450602086015193506040860151925060608601519150610e2160808701610bd3565b90509295509295909350565b600060208284031215610e3f57600080fd5b815160ff81168114610a6b57600080fd5b60008151808452610e68816020860160208601611152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610eac818460208701611152565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015610eee57835183529284019291840191600101610ed2565b50909695505050505050565b608081526000610f0d6080830187610e50565b8281036020840152610f1f8187610e50565b91505083604083015273ffffffffffffffffffffffffffffffffffffffff8316606083015295945050505050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610f9457610f94611248565b604052919050565b600082610fd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b8085111561103057817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611016576110166111bb565b8085161561102357918102915b93841c9390800290610fdc565b509250929050565b6000610a6b838360008261104e5750600161027c565b8161105b5750600061027c565b8160018114611071576002811461107b57611097565b600191505061027c565b60ff84111561108c5761108c6111bb565b50506001821b61027c565b5060208310610133831016604e8410600b84101617156110ba575081810a61027c565b6110c48383610fd7565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156110f6576110f66111bb565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611136576111366111bb565b500290565b60008282101561114d5761114d6111bb565b500390565b60005b8381101561116d578181015183820152602001611155565b8381111561117c576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111b4576111b46111bb565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461084457600080fdfea2646970667358221220a1bff4226602c8ae165c310a542c153467697835a81a63fe78887ca08041cdc664736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146101a55780638af09ac1146101af5780638da5cb5b146101c2578063f2fde38b146101ea57600080fd5b80630519e71a1461008d578063119481bf146100d65780632aa09127146101645780633d0f34da14610184575b600080fd5b6100a061009b366004610cf9565b6101fd565b604080518251815260209283015173ffffffffffffffffffffffffffffffffffffffff1692810192909252015b60405180910390f35b61013a6100e4366004610cf9565b8151602081840181018051600180835293830195830195909520949052825180840182018051958152908201939091019290922092909152815491015473ffffffffffffffffffffffffffffffffffffffff1682565b6040805192835273ffffffffffffffffffffffffffffffffffffffff9091166020830152016100cd565b610177610172366004610c0f565b610282565b6040516100cd9190610eb6565b610197610192366004610cf9565b610332565b6040519081526020016100cd565b6101ad61050b565b005b6101ad6101bd366004610d5d565b61059d565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100cd565b6101ad6101f8366004610bf2565b610717565b60408051808201909152600080825260208201526001836040516102219190610e9a565b90815260200160405180910390208260405161023d9190610e9a565b9081526040805191829003602090810183208383019092528154835260019091015473ffffffffffffffffffffffffffffffffffffffff169082015290505b92915050565b60606000825167ffffffffffffffff8111156102a0576102a0611248565b6040519080825280602002602001820160405280156102c9578160200160208202803683370190505b50905060005b835181101561032a576102fb858583815181106102ee576102ee611219565b6020026020010151610332565b82828151811061030d5761030d611219565b60209081029190910101528061032281611182565b9150506102cf565b509392505050565b6000806001846040516103459190610e9a565b9081526020016040518091039020836040516103619190610e9a565b90815260408051602092819003830181208183018352805482526001015473ffffffffffffffffffffffffffffffffffffffff168382015290519092506103aa91859101610e9a565b60405160208183030381529060405280519060200120846040516020016103d19190610e9a565b6040516020818303038152906040528051906020012014156104025780516103fa90600a611038565b91505061027c565b602081015173ffffffffffffffffffffffffffffffffffffffff1615610434576103fa81602001518260000151610847565b6001836040516104449190610e9a565b9081526020016040518091039020846040516104609190610e9a565b90815260408051602092819003830181208183019092528154815260019091015473ffffffffffffffffffffffffffffffffffffffff169181018290529150156104d95780516103fa906104b590600a611038565b82516104c290600a611038565b6104d484602001518560000151610847565b610967565b6040517f75c9d5ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314610591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61059b6000610a72565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461061e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610588565b60405180604001604052808381526020018273ffffffffffffffffffffffffffffffffffffffff168152506001856040516106599190610e9a565b9081526020016040518091039020846040516106759190610e9a565b90815260405160209181900382018120835181559290910151600190920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909316929092179091557f0157bfb6caece191dc6671d061c1b1cca6bb8a9db17a047a6ce8ed7f141f479c90610709908690869086908690610efa565b60405180910390a150505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610588565b73ffffffffffffffffffffffffffffffffffffffff811661083b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610588565b61084481610a72565b50565b6000808373ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c89190610ddd565b50505091505060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561091657600080fd5b505afa15801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190610e2d565b60ff16905061095e828286610ae7565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600014156109c0578382816109b6576109b66111ea565b0492505050610a6b565b838110610a03576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610588565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082821415610af8575082610a6b565b82821115610b2657610b0a838361113b565b610b1590600a611038565b610b1f90856110fe565b9050610a6b565b610b30828461113b565b610b3b90600a611038565b610b1f9085610f9c565b600082601f830112610b5657600080fd5b813567ffffffffffffffff811115610b7057610b70611248565b610ba160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610f4d565b818152846020838601011115610bb657600080fd5b816020850160208301376000918101602001919091529392505050565b805169ffffffffffffffffffff81168114610bed57600080fd5b919050565b600060208284031215610c0457600080fd5b8135610a6b81611277565b60008060408385031215610c2257600080fd5b823567ffffffffffffffff80821115610c3a57600080fd5b610c4686838701610b45565b9350602091508185013581811115610c5d57600080fd5b8501601f81018713610c6e57600080fd5b803582811115610c8057610c80611248565b8060051b610c8f858201610f4d565b8281528581019084870183860188018c1015610caa57600080fd5b60009350835b85811015610ce757813588811115610cc6578586fd5b610cd48e8b838b0101610b45565b8552509288019290880190600101610cb0565b50989b909a5098505050505050505050565b60008060408385031215610d0c57600080fd5b823567ffffffffffffffff80821115610d2457600080fd5b610d3086838701610b45565b93506020850135915080821115610d4657600080fd5b50610d5385828601610b45565b9150509250929050565b60008060008060808587031215610d7357600080fd5b843567ffffffffffffffff80821115610d8b57600080fd5b610d9788838901610b45565b95506020870135915080821115610dad57600080fd5b50610dba87828801610b45565b935050604085013591506060850135610dd281611277565b939692955090935050565b600080600080600060a08688031215610df557600080fd5b610dfe86610bd3565b9450602086015193506040860151925060608601519150610e2160808701610bd3565b90509295509295909350565b600060208284031215610e3f57600080fd5b815160ff81168114610a6b57600080fd5b60008151808452610e68816020860160208601611152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610eac818460208701611152565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015610eee57835183529284019291840191600101610ed2565b50909695505050505050565b608081526000610f0d6080830187610e50565b8281036020840152610f1f8187610e50565b91505083604083015273ffffffffffffffffffffffffffffffffffffffff8316606083015295945050505050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610f9457610f94611248565b604052919050565b600082610fd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b8085111561103057817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611016576110166111bb565b8085161561102357918102915b93841c9390800290610fdc565b509250929050565b6000610a6b838360008261104e5750600161027c565b8161105b5750600061027c565b8160018114611071576002811461107b57611097565b600191505061027c565b60ff84111561108c5761108c6111bb565b50506001821b61027c565b5060208310610133831016604e8410600b84101617156110ba575081810a61027c565b6110c48383610fd7565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156110f6576110f66111bb565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611136576111366111bb565b500290565b60008282101561114d5761114d6111bb565b500390565b60005b8381101561116d578181015183820152602001611155565b8381111561117c576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111b4576111b46111bb565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461084457600080fdfea2646970667358221220a1bff4226602c8ae165c310a542c153467697835a81a63fe78887ca08041cdc664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "notice": "Manages and normalizes price feeds.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 917,
        "contract": "contracts/TokenPrices.sol:TokenPrices",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9310,
        "contract": "contracts/TokenPrices.sol:TokenPrices",
        "label": "feeders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_struct(TokenFeed)10602_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)9629": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_struct(TokenFeed)10602_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => struct ITokenPrices.TokenFeed))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(TokenFeed)10602_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(TokenFeed)10602_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ITokenPrices.TokenFeed)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenFeed)10602_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenFeed)10602_storage": {
        "encoding": "inplace",
        "label": "struct ITokenPrices.TokenFeed",
        "members": [
          {
            "astId": 10598,
            "contract": "contracts/TokenPrices.sol:TokenPrices",
            "label": "decimals",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10601,
            "contract": "contracts/TokenPrices.sol:TokenPrices",
            "label": "feed",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(AggregatorV3Interface)9629"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
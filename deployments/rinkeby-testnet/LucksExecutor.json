{
  "address": "0x68b3d72207Df3fc82EC0186E75942aC8ACd58f50",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILucksHelper",
          "name": "_helper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_prevId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_allowTask",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "CancelTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "acceptToken",
          "type": "address"
        }
      ],
      "name": "ClaimToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum TaskStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "CloseTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TaskItem",
          "name": "item",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "note",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct TaskExt",
          "name": "ext",
          "type": "tuple"
        }
      ],
      "name": "CreateTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "CreateTickets",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "JoinTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "PickWinner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BRIDGE",
      "outputs": [
        {
          "internalType": "contract ILucksBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HELPER",
      "outputs": [
        {
          "internalType": "contract ILucksHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_NFT",
      "outputs": [
        {
          "internalType": "contract IProxyNFTStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_TOKEN",
      "outputs": [
        {
          "internalType": "contract IProxyTokenStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "zroPaymentAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "cancelTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "taskIds",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "zroPaymentAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "claimNFTs",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "taskIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "zroPaymentAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "closeTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskItem",
          "name": "item",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "note",
              "type": "string"
            }
          ],
          "internalType": "struct TaskExt",
          "name": "ext",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "zroPaymentAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "createTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "infos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastTID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closeTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAllowTask",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "isFail",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "joinTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "functionType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "onLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "zroPaymentAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "pickWinner",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prevId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setAllowTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksBridge",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "contract IProxyTokenStation",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IProxyNFTStation",
          "name": "_nft",
          "type": "address"
        }
      ],
      "name": "setBridgeAndProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksHelper",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setLucksHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tasks",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "nftChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acceptToken",
          "type": "address"
        },
        {
          "internalType": "enum TaskStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "paymentStrategy",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExclusiveToken",
          "name": "exclusiveToken",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountCollected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ticketIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "count",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userClaimeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa433b9372e15c6b4e386e51f2ad8d4acb8bf050242df143690a7a66124b704e",
  "receipt": {
    "to": null,
    "from": "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
    "contractAddress": "0x68b3d72207Df3fc82EC0186E75942aC8ACd58f50",
    "transactionIndex": 6,
    "gasUsed": "5164249",
    "logsBloom": "0x
    "blockHash": "0x08db6263b2c5f46ed93c2f9c6d372fa1679e9c09cdb0bda23493ea6d05b7e697",
    "transactionHash": "0xfa433b9372e15c6b4e386e51f2ad8d4acb8bf050242df143690a7a66124b704e",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 10748464,
        "transactionHash": "0xfa433b9372e15c6b4e386e51f2ad8d4acb8bf050242df143690a7a66124b704e",
        "address": "0x68b3d72207Df3fc82EC0186E75942aC8ACd58f50",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b770f460978c456d69bc46463dfda71feee60ad"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x08db6263b2c5f46ed93c2f9c6d372fa1679e9c09cdb0bda23493ea6d05b7e697"
      }
    ],
    "blockNumber": 10748464,
    "cumulativeGasUsed": "7944657",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    0,
    10001,
    false
  ],
  "numDeployments": 1,
  "solcInputHash": "35edbd88c4903cd86763b66bac45305f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILucksHelper\",\"name\":\"_helper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_prevId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_allowTask\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"CancelTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ClaimNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"CloseTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TaskItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct TaskExt\",\"name\":\"ext\",\"type\":\"tuple\"}],\"name\":\"CreateTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"CreateTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"JoinTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"PickWinner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"contract ILucksBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HELPER\",\"outputs\":[{\"internalType\":\"contract ILucksHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_NFT\",\"outputs\":[{\"internalType\":\"contract IProxyNFTStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_TOKEN\",\"outputs\":[{\"internalType\":\"contract IProxyTokenStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"zroPaymentAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"cancelTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"taskIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"zroPaymentAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"claimNFTs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"taskIds\",\"type\":\"uint256[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"zroPaymentAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"closeTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"internalType\":\"struct TaskExt\",\"name\":\"ext\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"zroPaymentAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"infos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastTID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllowTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"isFail\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"joinTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"functionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"zroPaymentAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setAllowTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksBridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"contract IProxyTokenStation\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IProxyNFTStation\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setBridgeAndProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksHelper\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLucksHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"count\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_allowTask\":\"allow running task\",\"_chainId\":\"layerZero chainId\",\"_helper\":\"protocol helper address\",\"_prevId\":\"previous taskId\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Openluck LucksTrade.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelTask(uint256,(uint256,uint256,bytes,bytes))\":{\"notice\":\"seller cancel the task, only when task status equal to 'Pending' or no funds amount\"},\"claimNFTs(uint256[],(uint256,uint256,bytes,bytes))\":{\"notice\":\"when taskItem Fail, user can claim NFTs back (cross-chain case)\"},\"claimTokens(uint256[])\":{\"notice\":\"when taskItem Fail, user can claim tokens back \"},\"closeTask(uint256,(uint256,uint256,bytes,bytes))\":{\"notice\":\"finish a Task,  case 1: reach target crowd amount, status success, and start to pick a winner case 2: time out and not reach the target amount, status close, and returns funds to claimable pool\"},\"constructor\":{\"notice\":\"Constructor\"},\"joinTask(uint256,uint32,string)\":{\"notice\":\"buyer join a task num: how many ticket\"},\"pickWinner(uint256,(uint256,uint256,bytes,bytes))\":{\"notice\":\"start to picker a winner via chainlink VRF\"}},\"notice\":\"It is the core contract for crowd funds to buy NFTs result to one lucky winner randomness provided externally.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LucksExecutor.sol\":\"LucksExecutor\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7bc891be2bc5948340a8fb14ad36c8846230c9086269e37f3febf0dc239c9f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/LucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// imports\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskExt, TaskStatus, Ticket, TaskInfo} from \\\"./interfaces/ILucksExecutor.sol\\\";\\r\\nimport {IProxyNFTStation} from \\\"./interfaces/IProxyNFTStation.sol\\\";\\r\\nimport {IProxyTokenStation} from \\\"./interfaces/IProxyTokenStation.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./interfaces/ILucksHelper.sol\\\";\\r\\nimport {ILucksBridge, lzTxObj} from \\\"./interfaces/ILucksBridge.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksTrade.\\r\\n * @notice It is the core contract for crowd funds to buy NFTs result to one lucky winner\\r\\n * randomness provided externally.\\r\\n */\\r\\ncontract LucksExecutor is ILucksExecutor, ReentrancyGuard, Ownable {    \\r\\n    using SafeMath for uint256;\\r\\n    using Arrays for uint256[];\\r\\n\\r\\n    uint256 public prevId;\\r\\n    uint256 public currentId;\\r\\n\\r\\n    // ============ Openluck interfaces ============\\r\\n    \\r\\n    ILucksHelper public HELPER;    \\r\\n    IProxyNFTStation public PROXY_NFT;\\r\\n    IProxyTokenStation public PROXY_TOKEN;\\r\\n    ILucksBridge public BRIDGE;\\r\\n    \\r\\n    uint16 public immutable lzChainId;\\r\\n    bool public isAllowTask; // this network allow running task or not (ethereum & Rinkeby not allow)\\r\\n\\r\\n    // ============ Public Mutable Storage ============\\r\\n\\r\\n    // VARIABLES    \\r\\n    mapping(uint256 => TaskItem) public tasks; // store tasks info by taskId    \\r\\n    mapping(uint256 => mapping(uint256 => Ticket)) public tickets; // store tickets (taskId => ticketId => ticket)    \\r\\n    mapping(uint256 => uint256[]) public ticketIds; // store ticket ids (taskId => lastTicketIds)         \\r\\n    mapping(uint256 => TaskInfo) public infos; // store task updated info (taskId=>TaskInfo)\\r\\n    mapping(address => mapping(uint256 => uint256)) public userTickets; // Keep track of user ticket ids for a given taskId (user => taskId => ticket count)    \\r\\n    mapping(address => mapping(uint256 => uint256)) public userClaimeds; // store user claimable token amount (user=>taskId=>amount)\\r\\n\\r\\n    // ======== Constructor =========\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     * @param _helper protocol helper address\\r\\n     * @param _prevId previous taskId\\r\\n     * @param _chainId layerZero chainId\\r\\n     * @param _allowTask allow running task\\r\\n     */\\r\\n    constructor(ILucksHelper _helper, uint256 _prevId, uint16 _chainId, bool _allowTask) {\\r\\n        HELPER = _helper;        \\r\\n        lzChainId = _chainId;\\r\\n        isAllowTask = _allowTask;\\r\\n        prevId = _prevId;\\r\\n        currentId = _prevId;\\r\\n    }\\r\\n\\r\\n    //  ============ Modifiers  ============\\r\\n\\r\\n    // MODIFIERS\\r\\n    modifier onlyBridge() {\\r\\n        require(msg.sender == address(BRIDGE), \\\"onlyBridge\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isExists(uint256 taskId) {\\r\\n        require(exists(taskId), \\\"Task not exists\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Public functions ============\\r\\n\\r\\n    function count() public view override returns (uint256) {\\r\\n        return currentId - prevId;\\r\\n    }\\r\\n\\r\\n    function exists(uint256 taskId) public view override returns (bool) {\\r\\n        return taskId > prevId && taskId <= currentId;\\r\\n    }\\r\\n\\r\\n    function getTask(uint256 taskId) public view override returns (TaskItem memory) {\\r\\n        return tasks[taskId];\\r\\n    }\\r\\n    \\r\\n    function isFail(uint256 taskId) public view override returns(bool) {\\r\\n        return tasks[taskId].status == TaskStatus.Fail ||\\r\\n            (tasks[taskId].amountCollected < tasks[taskId].targetAmount && block.timestamp > tasks[taskId].endTime);\\r\\n    }\\r\\n\\r\\n    function getChainId() external view override returns (uint16) {\\r\\n        return lzChainId;\\r\\n    }\\r\\n    \\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable override nonReentrant {\\r\\n        \\r\\n        require(lzChainId == item.nftChainId, \\\"Invalid chainId\\\"); // action must start from NFTChain   \\r\\n        require(address(PROXY_NFT) != address(0), \\\"ProxyNFT unset\\\");\\r\\n\\r\\n        // inputs validation\\r\\n        HELPER.checkNewTask(msg.sender, item);\\r\\n        HELPER.checkNewTaskExt(ext);\\r\\n\\r\\n        // Transfer nfts to proxy station (NFTChain) \\r\\n        // in case of dst chain transection fail, enable user redeem nft back, after endTime\\r\\n        uint256 depositId = PROXY_NFT.deposit(msg.sender, item.nftContract, item.tokenIds, item.tokenAmounts, item.endTime);\\r\\n        item.depositId = depositId;\\r\\n             \\r\\n        // Create Task Item           \\r\\n        if (ext.chainId == item.nftChainId) { // same chain creation    \\r\\n            _createTask(item, ext);\\r\\n        }\\r\\n        else {\\r\\n            // cross chain creation\\r\\n            require(address(BRIDGE) != address(0), \\\"Bridge unset\\\");\\r\\n            BRIDGE.sendCreateTask{value: msg.value}(ext.chainId, payable(msg.sender), item, ext, _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice buyer join a task\\r\\n    num: how many ticket\\r\\n    */\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable override isExists(taskId) nonReentrant \\r\\n    {\\r\\n        // check inputs and task\\r\\n        HELPER.checkJoinTask(msg.sender, taskId, num, note);\\r\\n\\r\\n        // Calculate number of TOKEN to this contract\\r\\n        uint256 amount = tasks[taskId].price.mul(num);\\r\\n\\r\\n        // deposit payment to token station.        \\r\\n        PROXY_TOKEN.deposit{value: msg.value}(msg.sender, tasks[taskId].acceptToken, amount);\\r\\n\\r\\n        // create tickets\\r\\n        uint256 lastTKID = _createTickets(taskId, num, msg.sender);\\r\\n\\r\\n        // update task item info\\r\\n        if (tasks[taskId].status == TaskStatus.Pending) {\\r\\n            tasks[taskId].status = TaskStatus.Open; \\r\\n        }\\r\\n        tasks[taskId].amountCollected = tasks[taskId].amountCollected.add(amount);\\r\\n\\r\\n        //if reach target amount, trigger to close task\\r\\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {\\r\\n            if (address(HELPER.getAutoClose()) != address(0)) {\\r\\n                HELPER.getAutoClose().addTask(taskId, tasks[taskId].endTime);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit JoinTask(taskId, msg.sender, amount, num, lastTKID, note);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice seller cancel the task, only when task status equal to 'Pending' or no funds amount\\r\\n    */\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \\r\\n    {                                \\r\\n        require((tasks[taskId].status == TaskStatus.Pending || tasks[taskId].status == TaskStatus.Open) && infos[taskId].lastTID <= 0, \\\"Opening or canceled\\\");        \\r\\n        require(tasks[taskId].seller == msg.sender, \\\"Invalid auth\\\"); // only seller can cancel\\r\\n        \\r\\n        // update status\\r\\n        tasks[taskId].status = TaskStatus.Close;\\r\\n        \\r\\n        _withdrawNFTs(taskId, payable(tasks[taskId].seller), true, _param);\\r\\n\\r\\n        emit CancelTask(taskId, msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice finish a Task, \\r\\n    case 1: reach target crowd amount, status success, and start to pick a winner\\r\\n    case 2: time out and not reach the target amount, status close, and returns funds to claimable pool\\r\\n    */\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \\r\\n    {        \\r\\n        require(tasks[taskId].status == TaskStatus.Open, \\\"Not Open\\\");\\r\\n        require(tasks[taskId].amountCollected >= tasks[taskId].targetAmount || block.timestamp > tasks[taskId].endTime, \\\"Not reach target or not expired\\\");\\r\\n\\r\\n        // mark operation time\\r\\n        infos[taskId].closeTime = block.timestamp;\\r\\n\\r\\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {    \\r\\n            // Reached task target        \\r\\n            // update task, Task Close & start to draw\\r\\n            tasks[taskId].status = TaskStatus.Close; \\r\\n\\r\\n            // Request a random number from the generator based on a seed(max ticket number)\\r\\n            HELPER.getVRF().reqRandomNumber(taskId, infos[taskId].lastTID);\\r\\n\\r\\n            // add to auto draw Queue\\r\\n            if (address(HELPER.getAutoDraw()) != address(0)) {\\r\\n                HELPER.getAutoDraw().addTask(taskId, block.timestamp + HELPER.getDrawDelay());\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            // Task Fail & Expired\\r\\n            // update task\\r\\n            tasks[taskId].status = TaskStatus.Fail; \\r\\n\\r\\n            // NFTs back to seller            \\r\\n            _withdrawNFTs(taskId, payable(tasks[taskId].seller), false, _param);                            \\r\\n        }\\r\\n\\r\\n        emit CloseTask(taskId, msg.sender, tasks[taskId].status);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice start to picker a winner via chainlink VRF\\r\\n    */\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant\\r\\n    {                \\r\\n        require(tasks[taskId].status == TaskStatus.Close, \\\"Not Close\\\");\\r\\n        require(block.timestamp >= infos[taskId].closeTime + HELPER.getDrawDelay(), \\\"Delay limit\\\");\\r\\n         \\r\\n        // // Calculate the finalNumber based on the randomResult generated by ChainLink's fallback\\r\\n        uint32 finalNumber = HELPER.getVRF().viewRandomResult(taskId);\\r\\n        require(finalNumber > 0, \\\"Not Drawn\\\");\\r\\n        \\r\\n        Ticket memory ticket = _findWinnerTicket(taskId, finalNumber);    \\r\\n        require(ticket.number > 0, \\\"Can't find winner\\\");\\r\\n        \\r\\n        // update store item\\r\\n        tasks[taskId].status = TaskStatus.Success;    \\r\\n        infos[taskId].finalNumber = ticket.number;          \\r\\n        \\r\\n        // withdraw NFTs to winner (maybe cross chain)         \\r\\n        _withdrawNFTs(taskId, payable(ticket.owner), true, _param);\\r\\n\\r\\n        // dispatch Payment\\r\\n        _transferPayment(taskId, ticket.owner);    \\r\\n        \\r\\n        emit PickWinner(taskId, ticket.owner, finalNumber);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim tokens back \\r\\n    */\\r\\n    function claimTokens(uint256[] memory taskIds) override external nonReentrant\\r\\n    {\\r\\n        for (uint256 i = 0; i < taskIds.length; i++) {\\r\\n            _claimToken(taskIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim NFTs back (cross-chain case)\\r\\n    */\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) override external payable nonReentrant\\r\\n    {  \\r\\n        for (uint256 i = 0; i < taskIds.length; i++) {\\r\\n            _claimNFTs(taskIds[i], _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Remote(destination) functions ============\\r\\n    \\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) override external onlyBridge {\\r\\n\\r\\n        if (functionType == 1) { //TYPE_CREATE_TASK\\r\\n            (\\r\\n                ,\\r\\n                TaskItem memory item,\\r\\n                TaskExt memory ext\\r\\n            ) = abi.decode(_payload, (uint256, TaskItem, TaskExt));\\r\\n\\r\\n             _createTask(item, ext);\\r\\n                    \\r\\n        } else if (functionType == 2) { //TYPE_WITHDRAW_NFT\\r\\n\\r\\n            (, address user, uint256 depositId) = abi.decode(_payload, (uint8, address, uint256));            \\r\\n            \\r\\n            PROXY_NFT.withdraw(depositId, user); \\r\\n        }\\r\\n    }    \\r\\n\\r\\n    // ============ Internal functions ============\\r\\n\\r\\n    /**\\r\\n    @notice seller create a crowdluck task\\r\\n    returns: new taskId\\r\\n     */\\r\\n    function _createTask(TaskItem memory item, TaskExt memory ext) internal \\r\\n    {        \\r\\n        require(isAllowTask, \\\"Chain not allow task\\\");\\r\\n        HELPER.checkNewTaskRemote(item);\\r\\n\\r\\n        //create TaskId\\r\\n        currentId ++;\\r\\n        uint256 taskId = currentId;        \\r\\n\\r\\n        // start now\\r\\n        if (item.status == TaskStatus.Open) {\\r\\n            item.startTime = item.startTime < block.timestamp ? item.startTime : block.timestamp;\\r\\n        } else {\\r\\n            require(block.timestamp <= item.startTime && item.startTime < item.endTime, \\\"Invalid time range\\\");\\r\\n            // start in future\\r\\n            item.status = TaskStatus.Pending;\\r\\n        }\\r\\n\\r\\n        //store taskItem\\r\\n        tasks[taskId] = item;\\r\\n\\r\\n        emit CreateTask(taskId, item, ext);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice join task succes. create tickets for buyer\\r\\n     * @param taskId task id\\r\\n     * @param num how many ticket\\r\\n     * @param buyer buery\\r\\n     */\\r\\n    function _createTickets(uint256 taskId, uint32 num, address buyer) internal returns (uint256) \\r\\n    {\\r\\n        uint256 start = infos[taskId].lastTID.add(1);\\r\\n        uint256 lastTKID = start.add(num).sub(1);\\r\\n\\r\\n        tickets[taskId][lastTKID] = Ticket(lastTKID, num, buyer);\\r\\n        ticketIds[taskId].push(lastTKID);\\r\\n\\r\\n        userTickets[buyer][taskId] += num;\\r\\n        infos[taskId].lastTID = lastTKID;\\r\\n\\r\\n        emit CreateTickets(taskId, buyer, num, start, lastTKID);\\r\\n        return lastTKID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice search a winner ticket by number\\r\\n     * @param taskId task id\\r\\n     * @param number final number\\r\\n     */\\r\\n    function _findWinnerTicket(uint256 taskId, uint32 number) internal view returns (Ticket memory)\\r\\n    {\\r\\n        // find by ticketId\\r\\n        Ticket memory ticket = tickets[taskId][number];\\r\\n\\r\\n        if (ticket.number == 0) {\\r\\n\\r\\n            uint256 node = ticketIds[taskId].findUpperBound(number);\\r\\n\\r\\n            ticket = tickets[taskId][node];\\r\\n        }\\r\\n\\r\\n        return ticket;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim token back  \\r\\n    */\\r\\n    function _claimToken(uint256 taskId) internal isExists(taskId)\\r\\n    {\\r\\n        TaskItem memory item = tasks[taskId];\\r\\n        require(isFail(taskId), \\\"Not Fail\\\");\\r\\n        require(userClaimeds[msg.sender][taskId] == 0, \\\"Claimed\\\");\\r\\n\\r\\n        // Calculate the funds buyer payed\\r\\n        uint256 amount = item.price.mul(userTickets[msg.sender][taskId]);\\r\\n        \\r\\n        // update claim info\\r\\n        userClaimeds[msg.sender][taskId] = amount;\\r\\n        \\r\\n        // Transfer\\r\\n        _transferOut(item.acceptToken, msg.sender, amount);\\r\\n\\r\\n        emit ClaimToken(taskId, msg.sender, amount, item.acceptToken);\\r\\n    }\\r\\n\\r\\n    function _claimNFTs(uint256 taskId, lzTxObj memory _param) internal isExists(taskId)\\r\\n    {\\r\\n        address seller = tasks[taskId].seller;\\r\\n        require(isFail(taskId), \\\"Not Fail\\\");\\r\\n        require(userClaimeds[seller][taskId] == 0, \\\"Claimed\\\");\\r\\n        \\r\\n        // update claim info\\r\\n        userClaimeds[seller][taskId] = 1;\\r\\n        \\r\\n        // withdraw NFTs to winner (maybe cross chain)     \\r\\n        _withdrawNFTs(taskId, payable(seller), true, _param);\\r\\n\\r\\n        emit ClaimNFT(taskId, seller, tasks[taskId].nftContract, tasks[taskId].tokenIds);\\r\\n    }\\r\\n\\r\\n    function _withdrawNFTs(uint256 taskId, address payable user, bool enableCrossChain, lzTxObj memory _param) internal\\r\\n    {\\r\\n        if (lzChainId == tasks[taskId].nftChainId) { // same chain\\r\\n            PROXY_NFT.withdraw(tasks[taskId].depositId, user);\\r\\n        }\\r\\n        else if (enableCrossChain){ // cross chain            \\r\\n            BRIDGE.sendWithdrawNFTs{value: msg.value}(tasks[taskId].nftChainId, user, tasks[taskId].depositId, _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice transfer protocol fee and funds\\r\\n     * @param taskId taskId\\r\\n     * @param winner winner address\\r\\n     * paymentStrategy for winner share is up to 50% (500 = 5%, 5,000 = 50%)\\r\\n     */\\r\\n    function _transferPayment(uint256 taskId, address winner) internal\\r\\n    {\\r\\n        // inner variables\\r\\n        address acceptToken = tasks[taskId].acceptToken;\\r\\n\\r\\n        // Calculate amount to seller\\r\\n        uint256 collected = tasks[taskId].amountCollected;\\r\\n        uint256 sellerAmount = collected;\\r\\n\\r\\n        // 1. Calculate protocol fee\\r\\n        uint256 fee = (collected.mul(HELPER.getProtocolFee())).div(10000);\\r\\n        address feeRecipient = HELPER.getProtocolFeeRecipient();\\r\\n        require(fee >= 0, \\\"Invalid fee\\\");\\r\\n        sellerAmount = sellerAmount.sub(fee);\\r\\n\\r\\n        // 2. Calculate winner share amount with payment stragey (up to 50%)\\r\\n        uint256 winnerAmount = 0;\\r\\n        uint256 winnerShare = 0;\\r\\n        uint256[] memory splitShare;\\r\\n        address[] memory splitAddr;\\r\\n        if (tasks[taskId].paymentStrategy > 0) {\\r\\n            (winnerShare, splitShare, splitAddr) = HELPER.getSTRATEGY().viewPaymentShares(tasks[taskId].paymentStrategy, winner, taskId);\\r\\n            require(winnerShare >= 0 && winnerShare <= 5000, \\\"Invalid strategy\\\");\\r\\n            require(splitShare.length <= 10, \\\"Invalid splitShare\\\"); // up to 10 splitter\\r\\n            if (winnerShare > 0) {\\r\\n                winnerAmount = (collected.mul(winnerShare)).div(10000);\\r\\n                sellerAmount = sellerAmount.sub(winnerAmount);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // 3. transfer funds\\r\\n\\r\\n        // transfer funds to seller\\r\\n        _transferOut(acceptToken, tasks[taskId].seller, sellerAmount);\\r\\n\\r\\n        // transfer protocol fee\\r\\n        _transferOut(acceptToken, feeRecipient, fee);\\r\\n\\r\\n        // transfer winner share\\r\\n        if (winnerAmount > 0) {\\r\\n            if (splitShare.length > 0 && splitShare.length == splitAddr.length) {  \\r\\n                // split winner share for strategy case\\r\\n                uint256 splited = 10000;                \\r\\n                for (uint i=0; i < splitShare.length; i++) {   \\r\\n                    // make sure spliter cannot overflow\\r\\n                    if ((splited.sub(splitShare[i])) >=0 && splitShare[i] > 0) { \\r\\n                        _transferOut(acceptToken, splitAddr[i], (winnerAmount.mul(splitShare[i]).div(10000)));\\r\\n                        splited = splited.div(splitShare[i]);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            else {                \\r\\n                _transferOut(acceptToken, winner, winnerAmount);\\r\\n            }\\r\\n        }                         \\r\\n    }\\r\\n\\r\\n    function _transferOut(address token, address to, uint256 amount) internal {        \\r\\n        PROXY_TOKEN.withdraw(to, token, amount);\\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n\\r\\n    function setAllowTask(bool enable) external onlyOwner {\\r\\n        isAllowTask = enable;\\r\\n    }\\r\\n\\r\\n    function setLucksHelper(ILucksHelper addr) external onlyOwner {\\r\\n        HELPER = addr;\\r\\n    }\\r\\n\\r\\n    function setBridgeAndProxy(ILucksBridge _bridge, IProxyTokenStation _token, IProxyNFTStation _nft) external onlyOwner {\\r\\n        // require(address(BRIDGE) == address(0x0) && address(PROXY_TOKEN) == address(0x0) && address(PROXY_NFT) == address(0x0),\\r\\n        //  \\\"Lucks: BRIDGE and factory already initialized\\\"); // 1 time only\\r\\n        require(address(_bridge) != address(0x0), \\\"Invalid bridge\\\");\\r\\n        if (isAllowTask) {\\r\\n            require(address(_token) != address(0x0), \\\"Invalid token\\\");\\r\\n        }\\r\\n        require(address(_nft) != address(0x0), \\\"Invalid nft\\\");\\r\\n\\r\\n        BRIDGE = _bridge;\\r\\n        PROXY_TOKEN = _token;\\r\\n        PROXY_NFT = _nft;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf56fa5cacabc6fbb615215b9f98c323417464a70c00c830c4c3318cb0791b084\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);\\r\\n    event MinWaitPeriodUpdated(uint256 oldMinWaitPeriod, uint256 newMinWaitPeriod);\\r\\n\\r\\n    event RevertInvoke(uint256 taskId, bytes reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\",\"keccak256\":\"0xac2ced661bf25c3c6f56c924fe63ff2b342aa08d1f077e6e8873df73596a855e\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n    bytes zroPaymentAddr; //  the address of the ZRO token holder who would pay for the transaction\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n\\r\\n    // ============= Task functions ====================\\r\\n\\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,\\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateCreateTaskFee(\\r\\n        uint16 _dstChainId,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateWithdrawNFTsFee(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n}\\r\\n\",\"keccak256\":\"0xeba9f5dfb8e3e81f546689fae3b00e24cee2fc65c8c341a16f4ddac1f47c147e\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\nstruct TaskInfo {\\r\\n    uint256 lastTID;\\r\\n    uint256 closeTime;\\r\\n    uint256 finalNumber;\\r\\n}\\r\\n\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint256 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);\\r\\n    \\r\\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function isFail(uint256 taskId) external view returns(bool);\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x63d2b7f8325c49fcf71c603ad4d8ca2c5b886c640c851ff85ce35320b6ffe9a5\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksGroup {    \\r\\n\\r\\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\\r\\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\\r\\n   \\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\\r\\n    function createGroup(uint256 taskId, uint16 seat) external;\\r\\n}\",\"keccak256\":\"0x0f80c646005b1eb282e864517e9effd2f2a54411aec731e73fbd539808d6c38f\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksVRF} from \\\"./ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"./ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"./ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"./ILucksAuto.sol\\\";\\r\\n\\r\\ninterface ILucksHelper {\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\r\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\r\\n    function checkNFTContract(address addr) external view returns (bool);\\r\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\r\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\r\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\r\\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\r\\n\\r\\n    function getProtocolFeeRecipient() external view returns (address);\\r\\n    function getProtocolFee() external view returns (uint256);\\r\\n    function getMinTargetLimit(address token) external view returns (uint256);\\r\\n    function getDrawDelay() external view returns (uint32);\\r\\n\\r\\n    function getVRF() external view returns (ILucksVRF);\\r\\n    function getGROUPS() external view returns (ILucksGroup);\\r\\n    // function getREWARDS() external view returns (ILucksRewards);\\r\\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\\r\\n    function getAutoClose() external view returns (ILucksAuto);\\r\\n    function getAutoDraw() external view returns (ILucksAuto);\\r\\n}\\r\\n\",\"keccak256\":\"0x63a0408bc27abb14b326faf40dd9156c855c71a954d950de1a707efeebc51c31\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface ILucksPaymentStrategy {\\r\\n    \\r\\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\\r\\n}\",\"keccak256\":\"0xfb95b42ebb7f656c8373266c15d91659333f1ef508bba71429ea0932fe1dcdad\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILucksVRF {\\r\\n\\r\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\r\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \\r\\n\\r\\n    /**\\r\\n     * Requests randomness from a user-provided max\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\r\\n\\r\\n    /**\\r\\n     * Views random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\r\\n}\",\"keccak256\":\"0x8039f261810e00db42828632a5deba8a11613357d9c63b33c5d342abb6d6da0e\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyNFTStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct DepositNFT {\\r\\n    address user; // deposit user\\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] amounts; // support ERC1155\\r\\n    uint256 endTime; // Task end time\\r\\n}\\r\\n\\r\\ninterface IProxyNFTStation {\\r\\n\\r\\n    event Deposit(address indexed executor, uint256 depositId, address indexed user, address nft, uint256[] tokenIds, uint256[] amounts, uint256 endTime);\\r\\n    event Withdraw(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n    event Redeem(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n\\r\\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) external payable returns (uint256 depositId);    \\r\\n    function withdraw(uint256 depositId, address to) external;    \\r\\n    function redeem(address executor, uint256 depositId, address to) external;    \\r\\n}\",\"keccak256\":\"0xf53f10b95aa5695c4cffb04a683b9bff3d8ab75a932ea5fefaa10e1d058df338\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyTokenStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IProxyTokenStation {\\r\\n\\r\\n    event Deposit(address indexed executor, address indexed user, address token, uint256 amount);\\r\\n    event Withdraw(address indexed executor, address indexed user, address token, uint256 amount);\\r\\n\\r\\n    function deposit(address user, address token, uint256 amount) external payable;\\r\\n    function withdraw(address user, address token, uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x8ca2d99bb6397fa134b01980e69239fb7560b9d6e9dcfbcfa8b29e3d45016b32\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101fe5760003560e01c80638da5cb5b1161011d578063d4ab5489116100b0578063ee9a31a21161007f578063f2fde38b11610064578063f2fde38b146107bd578063f551bf20146107dd578063f72e7d5a1461080a57600080fd5b8063ee9a31a21461077d578063ef2d2376146107aa57600080fd5b8063d4ab548914610714578063e00dd16114610734578063e44cb8e41461074a578063e47af09a1461076a57600080fd5b8063b6554a8d116100ec578063b6554a8d14610689578063bcd4f920146106a9578063bd6516fe146106c9578063cf260baf146106dc57600080fd5b80638da5cb5b1461057c578063917c4156146105a75780639b9e97b8146105db578063a374e43f146105ee57600080fd5b806365690f211161019557806373ce31431161016457806373ce31431461043d578063774be5b31461045057806378df3a52146104705780638d9776721461049057600080fd5b806365690f211461038b5780636a695360146103c35780636c5186f914610415578063715018a61461042857600080fd5b80632b32177f116101d15780632b32177f146102c55780632d08265a146103075780633408e470146103295780634f558e791461036b57600080fd5b806306661abd146102035780630708cfdd1461022b5780631d65e77e1461024157806328de3c9b1461026e575b600080fd5b34801561020f57600080fd5b50610218610837565b6040519081526020015b60405180910390f35b34801561023757600080fd5b5061021860025481565b34801561024d57600080fd5b5061026161025c366004614e85565b61084e565b6040516102229190615695565b34801561027a57600080fd5b506102aa610289366004614e85565b600b6020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610222565b3480156102d157600080fd5b506007546102f79074010000000000000000000000000000000000000000900460ff1681565b6040519015158152602001610222565b34801561031357600080fd5b50610327610322366004614bcc565b610a5e565b005b34801561033557600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b60405161ffff9091168152602001610222565b34801561037757600080fd5b506102f7610386366004614e85565b610b1e565b34801561039757600080fd5b506102186103a6366004614ba0565b600d60209081526000928352604080842090915290825290205481565b3480156103cf57600080fd5b506005546103f09073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610222565b610327610423366004614cea565b610b39565b34801561043457600080fd5b5061032761101d565b61032761044b36600461515e565b6110aa565b34801561045c57600080fd5b5061032761046b366004614c9f565b61162f565b34801561047c57600080fd5b5061021861048b36600461513c565b6118ae565b34801561049c57600080fd5b506105636104ab366004614e85565b6008602081815260009283526040928390208054600182015460048301546005840154600685015460078601549786015460098701548a51808c01909b52600a88015473ffffffffffffffffffffffffffffffffffffffff9081168c52600b890154998c0199909952600c880154600d909801548988169b740100000000000000000000000000000000000000009889900461ffff9081169c988c169b88169a9990970460ff1698959794969495939490921692908d565b6040516102229d9c9b9a99989796959493929190615583565b34801561058857600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166103f0565b3480156105b357600080fd5b506103587f000000000000000000000000000000000000000000000000000000000000000081565b6103276105e93660046150ff565b6118df565b3480156105fa57600080fd5b5061065361060936600461513c565b60096020908152600092835260408084209091529082529020805460019091015463ffffffff811690640100000000900473ffffffffffffffffffffffffffffffffffffffff1683565b6040805193845263ffffffff909216602084015273ffffffffffffffffffffffffffffffffffffffff1690820152606001610222565b34801561069557600080fd5b506102f76106a4366004614e85565b611c0c565b3480156106b557600080fd5b506103276106c4366004614b66565b611c8e565b6103276106d7366004614c01565b611d56565b3480156106e857600080fd5b506102186106f7366004614ba0565b600c60209081526000928352604080842090915290825290205481565b34801561072057600080fd5b5061032761072f366004614c65565b611e13565b34801561074057600080fd5b5061021860035481565b34801561075657600080fd5b5061032761076536600461520d565b611ede565b6103276107783660046150ff565b612053565b34801561078957600080fd5b506007546103f09073ffffffffffffffffffffffffffffffffffffffff1681565b6103276107b83660046150ff565b612606565b3480156107c957600080fd5b506103276107d8366004614b66565b612d70565b3480156107e957600080fd5b506004546103f09073ffffffffffffffffffffffffffffffffffffffff1681565b34801561081657600080fd5b506006546103f09073ffffffffffffffffffffffffffffffffffffffff1681565b60006002546003546108499190615a2e565b905090565b610856614699565b60008281526008602090815260409182902082516101e081018452815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910461ffff168285015260018301541681850152600282018054855181860281018601909652808652919492936060860193929083018282801561090757602002820191906000526020600020905b8154815260200190600101908083116108f3575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561095f57602002820191906000526020600020905b81548152602001906001019080831161094b575b5050509183525050600482015473ffffffffffffffffffffffffffffffffffffffff8116602083015260409091019074010000000000000000000000000000000000000000900460ff1660058111156109ba576109ba615ad9565b60058111156109cb576109cb615ad9565b8152600582015460208083019190915260068301546040808401919091526007840154606084015260088401546080840152600984015461ffff1660a08401528051808201909152600a84015473ffffffffffffffffffffffffffffffffffffffff168152600b8401549181019190915260c0820152600c82015460e0820152600d909101546101009091015292915050565b60026000541415610ad0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260009081555b8151811015610b1557610b03828281518110610af657610af6615b08565b6020026020010151612ea0565b80610b0d81615a71565b915050610ad8565b50506001600055565b600060025482118015610b3357506003548211155b92915050565b60026000541415610ba6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac7565b600260005560208301517f000000000000000000000000000000000000000000000000000000000000000061ffff908116911614610c40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c696420636861696e496400000000000000000000000000000000006044820152606401610ac7565b60055473ffffffffffffffffffffffffffffffffffffffff16610cbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f50726f78794e465420756e7365740000000000000000000000000000000000006044820152606401610ac7565b600480546040517f1750518c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911691631750518c91610d16913391889101615554565b60206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190614c82565b50600480546040517f0990a98200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911691630990a98291610dbc91869101615682565b60206040518083038186803b158015610dd457600080fd5b505afa158015610de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0c9190614c82565b506005546040808501516060860151608087015161010088015193517f443cf78700000000000000000000000000000000000000000000000000000000815260009573ffffffffffffffffffffffffffffffffffffffff169463443cf78794610e7e94339491939092906004016154f6565b602060405180830381600087803b158015610e9857600080fd5b505af1158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed09190614e9e565b6101c085018190526020850151845191925061ffff91821691161415610eff57610efa84846132c8565b611012565b60075473ffffffffffffffffffffffffffffffffffffffff16610f7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f42726964676520756e73657400000000000000000000000000000000000000006044820152606401610ac7565b60075483516040517f107f6e2800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163107f6e28913491610fdf919033908a908a908a906004016156a8565b6000604051808303818588803b158015610ff857600080fd5b505af115801561100c573d6000803e3d6000fd5b50505050505b505060016000555050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461109e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac7565b6110a8600061376c565b565b826110b481610b1e565b61111a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610ac7565b60026000541415611187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac7565b6002600055600480546040517fe7e46def00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169163e7e46def916111e791339189918991899101615637565b60206040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112379190614c82565b5060008481526008602081905260408220015461125d9063ffffffff808716906137e316565b6006546000878152600860205260409081902060049081015491517f8340f549000000000000000000000000000000000000000000000000000000008152339181019190915273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481018490529293501690638340f5499034906064016000604051808303818588803b1580156112f057600080fd5b505af1158015611304573d6000803e3d6000fd5b505050505060006113168686336137f6565b90506000808781526008602052604090206004015474010000000000000000000000000000000000000000900460ff16600581111561135757611357615ad9565b14156113ac57600086815260086020526040902060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555b6000868152600860205260409020600c01546113c89083613a37565b6000878152600860205260409020600c810182905560070154116115e15760048054604080517f23961975000000000000000000000000000000000000000000000000000000008152905160009373ffffffffffffffffffffffffffffffffffffffff90931692632396197592808201926020929091829003018186803b15801561145257600080fd5b505afa158015611466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148a9190614b83565b73ffffffffffffffffffffffffffffffffffffffff16146115e15760048054604080517f23961975000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926323961975928282019260209290829003018186803b15801561150d57600080fd5b505afa158015611521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115459190614b83565b600087815260086020526040908190206006015490517eb34ebd00000000000000000000000000000000000000000000000000000000815260048101899052602481019190915273ffffffffffffffffffffffffffffffffffffffff919091169062b34ebd90604401600060405180830381600087803b1580156115c857600080fd5b505af11580156115dc573d6000803e3d6000fd5b505050505b7f9373a88f901e30620a827b89bb774b9d50dedad527a9878c5261b450f67d419786338488858960405161161a969594939291906157fd565b60405180910390a15050600160005550505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146116b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac7565b73ffffffffffffffffffffffffffffffffffffffff831661172d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206272696467650000000000000000000000000000000000006044820152606401610ac7565b60075474010000000000000000000000000000000000000000900460ff16156117cd5773ffffffffffffffffffffffffffffffffffffffff82166117cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420746f6b656e000000000000000000000000000000000000006044820152606401610ac7565b73ffffffffffffffffffffffffffffffffffffffff811661184a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c6964206e66740000000000000000000000000000000000000000006044820152606401610ac7565b6007805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600680549385169382169390931790925560058054919093169116179055565b600a60205281600052604060002081815481106118ca57600080fd5b90600052602060002001600091509150505481565b816118e981610b1e565b61194f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610ac7565b600260005414156119bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac7565b6002600090815560008481526008602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611a0157611a01615ad9565b1480611a4a5750600160008481526008602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611a4857611a48615ad9565b145b8015611a6257506000838152600b6020526040902054155b611ac8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f70656e696e67206f722063616e63656c6564000000000000000000000000006044820152606401610ac7565b60008381526008602052604090205473ffffffffffffffffffffffffffffffffffffffff163314611b55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c6964206175746800000000000000000000000000000000000000006044820152606401610ac7565b60008381526008602052604090206004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017905554611bc990849073ffffffffffffffffffffffffffffffffffffffff16600185613a43565b604080518481523360208201527f9496d40f6a4059d9530f6361a578a4df0bfaeddcc0d913de433fd6caab89130391015b60405180910390a15050600160005550565b6000600460008381526008602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611c4e57611c4e615ad9565b1480610b33575060008281526008602052604090206007810154600c90910154108015610b33575050600090815260086020526040902060060154421190565b60015473ffffffffffffffffffffffffffffffffffffffff163314611d0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac7565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60026000541415611dc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac7565b600260009081555b8251811015611e0957611df7838281518110611de957611de9615b08565b602002602001015183613c09565b80611e0181615a71565b915050611dcb565b5050600160005550565b60015473ffffffffffffffffffffffffffffffffffffffff163314611e94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac7565b6007805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60075473ffffffffffffffffffffffffffffffffffffffff163314611f5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79427269646765000000000000000000000000000000000000000000006044820152606401610ac7565b8160ff1660011415611f975760008082806020019051810190611f829190614f8a565b9250925050611f9182826132c8565b50505050565b8160ff166002141561204f5760008082806020019051810190611fba91906151ca565b6005546040517ef714ce0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff808516602483015293965091945091909116915062f714ce90604401600060405180830381600087803b15801561203457600080fd5b505af1158015612048573d6000803e3d6000fd5b5050505050505b5050565b8161205d81610b1e565b6120c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610ac7565b60026000541415612130576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac7565b6002600081905560008481526008602052604090206004015474010000000000000000000000000000000000000000900460ff16600581111561217557612175615ad9565b146121dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7420436c6f736500000000000000000000000000000000000000000000006044820152606401610ac7565b60048054604080517f19af3253000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926319af3253928282019260209290829003018186803b15801561224457600080fd5b505afa158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c91906151ad565b6000848152600b602052604090206001015461229e9163ffffffff169061599e565b421015612307576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f44656c6179206c696d69740000000000000000000000000000000000000000006044820152606401610ac7565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663edd3159d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561237157600080fd5b505afa158015612385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a99190614b83565b73ffffffffffffffffffffffffffffffffffffffff1663463fb8c6856040518263ffffffff1660e01b81526004016123e391815260200190565b60206040518083038186803b1580156123fb57600080fd5b505afa15801561240f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243391906151ad565b905060008163ffffffff16116124a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7420447261776e00000000000000000000000000000000000000000000006044820152606401610ac7565b60006124b18583613e4a565b805190915061251c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f43616e27742066696e642077696e6e65720000000000000000000000000000006044820152606401610ac7565b600085815260086020908152604080832060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740300000000000000000000000000000000000000001790558351600b909252918290206002015581015161258d908690600187613a43565b61259b858260400151613f56565b604081810151815187815273ffffffffffffffffffffffffffffffffffffffff909116602082015263ffffffff84168183015290517f3f3025585478f6771e5973f8ff9aa514d8592d3648a98da300f46bb7e1cc05169181900360600190a150506001600055505050565b8161261081610b1e565b612676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610ac7565b600260005414156126e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac7565b6002600055600160008481526008602052604090206004015474010000000000000000000000000000000000000000900460ff16600581111561272857612728615ad9565b1461278f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74204f70656e0000000000000000000000000000000000000000000000006044820152606401610ac7565b60008381526008602052604090206007810154600c909101541015806127c5575060008381526008602052604090206006015442115b61282b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e6f7420726561636820746172676574206f72206e6f742065787069726564006044820152606401610ac7565b6000838152600b6020908152604080832042600190910155600890915290206007810154600c9091015410612c9b5760008381526008602052604090206004018054600291907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000083021790555060048054604080517fedd3159d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263edd3159d928282019260209290829003018186803b15801561291757600080fd5b505afa15801561292b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294f9190614b83565b6000848152600b6020526040908190205490517f19c0198900000000000000000000000000000000000000000000000000000000815260048101869052602481019190915273ffffffffffffffffffffffffffffffffffffffff91909116906319c0198990604401600060405180830381600087803b1580156129d157600080fd5b505af11580156129e5573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633156a58d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a6957600080fd5b505afa158015612a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa19190614b83565b73ffffffffffffffffffffffffffffffffffffffff1614612c965760048054604080517f3156a58d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921692633156a58d928282019260209290829003018186803b158015612b2457600080fd5b505afa158015612b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5c9190614b83565b73ffffffffffffffffffffffffffffffffffffffff1662b34ebd84600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319af32536040518163ffffffff1660e01b815260040160206040518083038186803b158015612bdf57600080fd5b505afa158015612bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1791906151ad565b612c279063ffffffff164261599e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401600060405180830381600087803b158015612c7d57600080fd5b505af1158015612c91573d6000803e3d6000fd5b505050505b612d0e565b60008381526008602052604081206004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167404000000000000000000000000000000000000000017905554612d0e91859173ffffffffffffffffffffffffffffffffffffffff169085613a43565b600083815260086020526040908190206004015490517f8bd3be2963318bc29de9701e2edec7b2546ea1b285e0d51596a7bc9e6aa7fe3091611bfa91869133917401000000000000000000000000000000000000000090910460ff16906157cd565b60015473ffffffffffffffffffffffffffffffffffffffff163314612df1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac7565b73ffffffffffffffffffffffffffffffffffffffff8116612e94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610ac7565b612e9d8161376c565b50565b80612eaa81610b1e565b612f10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610ac7565b600082815260086020908152604080832081516101e081018352815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910461ffff168286015260018301541681840152600282018054845181870281018701909552808552919492936060860193909290830182828015612fc157602002820191906000526020600020905b815481526020019060010190808311612fad575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561301957602002820191906000526020600020905b815481526020019060010190808311613005575b5050509183525050600482015473ffffffffffffffffffffffffffffffffffffffff8116602083015260409091019074010000000000000000000000000000000000000000900460ff16600581111561307457613074615ad9565b600581111561308557613085615ad9565b8152600582015460208083019190915260068301546040808401919091526007840154606084015260088401546080840152600984015461ffff1660a08401528051808201909152600a84015473ffffffffffffffffffffffffffffffffffffffff168152600b8401549181019190915260c0820152600c82015460e0820152600d9091015461010090910152905061311d83611c0c565b613183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74204661696c0000000000000000000000000000000000000000000000006044820152606401610ac7565b336000908152600d6020908152604080832086845290915290205415613205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f436c61696d6564000000000000000000000000000000000000000000000000006044820152606401610ac7565b336000908152600c6020908152604080832086845290915281205461014083015161322f916137e3565b336000818152600d60209081526040808320898452909152902082905560a084015191925061325f91908361450a565b60a08201516040805186815233602082015290810183905273ffffffffffffffffffffffffffffffffffffffff90911660608201527f8519296219951e1d116256cc20f1ea8c0aa35633f684a8b3bc42e4b6ffa17a5b906080015b60405180910390a150505050565b60075474010000000000000000000000000000000000000000900460ff1661334c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f436861696e206e6f7420616c6c6f77207461736b0000000000000000000000006044820152606401610ac7565b600480546040517fc735fd7400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169163c735fd74916133a191869101615695565b60206040518083038186803b1580156133b957600080fd5b505afa1580156133cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f19190614c82565b506003805490600061340283615a71565b909155505060035460018360c00151600581111561342257613422615ad9565b141561344957428360e0015110613439574261343f565b8260e001515b60e08401526134d3565b8260e00151421115801561346557508261010001518360e00151105b6134cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e676500000000000000000000000000006044820152606401610ac7565b600060c08401525b600081815260086020908152604091829020855181548388015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff9283161717825592860151600182018054919094167fffffffffffffffffffffffff000000000000000000000000000000000000000091909116179092556060850151805186939261359a926002850192910190614743565b50608082015180516135b6916003840191602090910190614743565b5060a082015160048201805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560c0850151927fffffffffffffffffffffff00000000000000000000000000000000000000000016177401000000000000000000000000000000000000000083600581111561365257613652615ad9565b021790555060e082015160058201556101008201516006820155610120820151600782015561014082015160088201556101608201516009820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff9092169190911790556101808201518051600a830180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560200151600b8201556101a0820151600c8201556101c090910151600d909101556040517f0c51dc45078ee7d51611387251b9b023fb2b4c14ab4bdac08bca2820f8a101ea9061375f9083908690869061584a565b60405180910390a1505050565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006137ef82846159f1565b9392505050565b6000838152600b60205260408120548190613812906001613a37565b90506000613834600161382e8463ffffffff808a1690613a3716565b906145a3565b905060405180606001604052808281526020018663ffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152506009600088815260200190815260200160002060008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600a60008781526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150558463ffffffff16600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060008282546139ac919061599e565b90915550506000868152600b6020908152604091829020839055815188815273ffffffffffffffffffffffffffffffffffffffff87169181019190915263ffffffff871681830152606081018490526080810183905290517fae00b050d09a294dbf7d73b4f1087967802e04b95ba34f770bb22cc1fca4e7429181900360a00190a195945050505050565b60006137ef828461599e565b6000848152600860205260409020547f000000000000000000000000000000000000000000000000000000000000000061ffff90811674010000000000000000000000000000000000000000909204161415613b3c5760055460008581526008602052604090819020600d015490517ef714ce000000000000000000000000000000000000000000000000000000008152600481019190915273ffffffffffffffffffffffffffffffffffffffff85811660248301529091169062f714ce90604401600060405180830381600087803b158015613b1f57600080fd5b505af1158015613b33573d6000803e3d6000fd5b50505050611f91565b8115611f9157600754600085815260086020526040908190208054600d9091015491517f31e51b0600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316926331e51b06923492613bd1927401000000000000000000000000000000000000000090910461ffff169189918890600401615713565b6000604051808303818588803b158015613bea57600080fd5b505af1158015613bfe573d6000803e3d6000fd5b505050505050505050565b81613c1381610b1e565b613c79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610ac7565b60008381526008602052604090205473ffffffffffffffffffffffffffffffffffffffff16613ca784611c0c565b613d0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74204661696c0000000000000000000000000000000000000000000000006044820152606401610ac7565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d6020908152604080832087845290915290205415613da5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f436c61696d6564000000000000000000000000000000000000000000000000006044820152606401610ac7565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602090815260408083208784529091529020600190819055613de9908590839086613a43565b60008481526008602052604090819020600181015491517f3090bc03795e5c190b39b7112509502697a7212984f74dabf6842a2b48ee1e77926132ba928892869273ffffffffffffffffffffffffffffffffffffffff169160020190615752565b6040805160608101825260008082526020820181905291810191909152600083815260096020908152604080832063ffffffff868116855290835292819020815160608101835281548082526001909201549485169381019390935264010000000090930473ffffffffffffffffffffffffffffffffffffffff1690820152906137ef576000848152600a60205260408120613eef9063ffffffff808716906145af16565b60009586526009602090815260408088209288529181529581902081516060810183528154815260019091015463ffffffff81169782019790975264010000000090960473ffffffffffffffffffffffffffffffffffffffff169086015250929392505050565b6000828152600860209081526040808320600480820154600c90920154815484517fa5a41031000000000000000000000000000000000000000000000000000000008152945173ffffffffffffffffffffffffffffffffffffffff94851697929687969395614031956127109561402b959092169363a5a410319383830193909290829003018186803b158015613fec57600080fd5b505afa158015614000573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140249190614e9e565b86906137e3565b90614672565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372c8fc0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561409d57600080fd5b505afa1580156140b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d59190614b83565b90506140e183836145a3565b600088815260086020526040812060090154919450908190606090819061ffff16156143935760048054604080517f93f1c911000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926393f1c911928282019260209290829003018186803b15801561416f57600080fd5b505afa158015614183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141a79190614b83565b60008c815260086020526040908190206009015490517f74a0a25100000000000000000000000000000000000000000000000000000000815261ffff909116600482015273ffffffffffffffffffffffffffffffffffffffff8c81166024830152604482018e905291909116906374a0a2519060640160006040518083038186803b15801561423557600080fd5b505afa158015614249573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261428f9190810190614eb7565b91945092509050611388831115614302576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c6964207374726174656779000000000000000000000000000000006044820152606401610ac7565b600a8251111561436e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642073706c6974536861726500000000000000000000000000006044820152606401610ac7565b82156143935761438461271061402b8a866137e3565b935061439087856145a3565b96505b60008b8152600860205260409020546143c4908a9073ffffffffffffffffffffffffffffffffffffffff168961450a565b6143cf89868861450a565b83156144fd57600082511180156143e7575080518251145b156144f25761271060005b83518110156144eb57600061442985838151811061441257614412615b08565b6020026020010151846145a390919063ffffffff16565b101580156144505750600084828151811061444657614446615b08565b6020026020010151115b156144d9576144aa8b84838151811061446b5761446b615b08565b60200260200101516144a561271061402b89878151811061448e5761448e615b08565b60200260200101518c6137e390919063ffffffff16565b61450a565b6144d68482815181106144bf576144bf615b08565b60200260200101518361467290919063ffffffff16565b91505b806144e381615a71565b9150506143f2565b50506144fd565b6144fd898b8661450a565b5050505050505050505050565b6006546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528581166024830152604482018490529091169063d9caed1290606401600060405180830381600087803b15801561458657600080fd5b505af115801561459a573d6000803e3d6000fd5b50505050505050565b60006137ef8284615a2e565b81546000906145c057506000610b33565b82546000905b8082101561461c5760006145da838361467e565b9050848682815481106145ef576145ef615b08565b9060005260206000200154111561460857809150614616565b61461381600161599e565b92505b506145c6565b60008211801561465157508385614634600185615a2e565b8154811061464457614644615b08565b9060005260206000200154145b1561466a57614661600183615a2e565b92505050610b33565b509050610b33565b60006137ef82846159b6565b600061468d60028484186159b6565b6137ef9084841661599e565b604080516101e0810182526000808252602082018190529181018290526060808201819052608082015260a081018290529060c0820190815260200160008152602001600081526020016000815260200160008152602001600061ffff16815260200161472f6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b815260200160008152602001600081525090565b82805482825590600052602060002090810192821561477e579160200282015b8281111561477e578251825591602001919060010190614763565b5061478a92915061478e565b5090565b5b8082111561478a576000815560010161478f565b80356147ae81615b66565b919050565b80516147ae81615b66565b600082601f8301126147cf57600080fd5b813560206147e46147df83615934565b6158e5565b80838252828201915082860187848660051b890101111561480457600080fd5b60005b8581101561482357813584529284019290840190600101614807565b5090979650505050505050565b600082601f83011261484157600080fd5b815160206148516147df83615934565b80838252828201915082860187848660051b890101111561487157600080fd5b60005b8581101561482357815184529284019290840190600101614874565b600082601f8301126148a157600080fd5b81356148af6147df82615958565b8181528460208386010111156148c457600080fd5b816020850160208301376000918101602001919091529392505050565b80356147ae81615b96565b80516147ae81615b96565b600082601f83011261490857600080fd5b81516149166147df82615958565b81815284602083860101111561492b57600080fd5b61493c826020830160208701615a45565b949350505050565b60006040828403121561495657600080fd5b61495e615875565b9050813561496b81615b66565b808252506020820135602082015292915050565b60006040828403121561499157600080fd5b614999615875565b905081516149a681615b66565b808252506020820151602082015292915050565b6000606082840312156149cc57600080fd5b6149d461589e565b905081356149e181615ba3565b8152602082013567ffffffffffffffff808211156149fe57600080fd5b614a0a85838601614890565b60208401526040840135915080821115614a2357600080fd5b50614a3084828501614890565b60408301525092915050565b600060608284031215614a4e57600080fd5b614a5661589e565b90508151614a6381615ba3565b8152602082015167ffffffffffffffff80821115614a8057600080fd5b614a8c858386016148f7565b60208401526040840151915080821115614aa557600080fd5b50614a30848285016148f7565b600060808284031215614ac457600080fd5b6040516080810167ffffffffffffffff8282108183111715614ae857614ae8615b37565b8160405282935084358352602085013560208401526040850135915080821115614b1157600080fd5b614b1d86838701614890565b60408401526060850135915080821115614b3657600080fd5b50614b4385828601614890565b6060830152505092915050565b80356147ae81615ba3565b80516147ae81615ba3565b600060208284031215614b7857600080fd5b81356137ef81615b66565b600060208284031215614b9557600080fd5b81516137ef81615b66565b60008060408385031215614bb357600080fd5b8235614bbe81615b66565b946020939093013593505050565b600060208284031215614bde57600080fd5b813567ffffffffffffffff811115614bf557600080fd5b61493c848285016147be565b60008060408385031215614c1457600080fd5b823567ffffffffffffffff80821115614c2c57600080fd5b614c38868387016147be565b93506020850135915080821115614c4e57600080fd5b50614c5b85828601614ab2565b9150509250929050565b600060208284031215614c7757600080fd5b81356137ef81615b88565b600060208284031215614c9457600080fd5b81516137ef81615b88565b600080600060608486031215614cb457600080fd5b8335614cbf81615b66565b92506020840135614ccf81615b66565b91506040840135614cdf81615b66565b809150509250925092565b600080600060608486031215614cff57600080fd5b833567ffffffffffffffff80821115614d1757600080fd5b908501906102008288031215614d2c57600080fd5b614d346158c1565b614d3d836147a3565b8152614d4b60208401614b50565b6020820152614d5c604084016147a3565b6040820152606083013582811115614d7357600080fd5b614d7f898286016147be565b606083015250608083013582811115614d9757600080fd5b614da3898286016147be565b608083015250614db560a084016147a3565b60a0820152614dc660c084016148e1565b60c082015260e08381013590820152610100808401359082015261012080840135908201526101408084013590820152610160614e04818501614b50565b90820152610180614e1789858301614944565b81830152506101c0808401356101a08301526101e08401358183015250809550506020860135915080821115614e4c57600080fd5b614e58878388016149ba565b93506040860135915080821115614e6e57600080fd5b50614e7b86828701614ab2565b9150509250925092565b600060208284031215614e9757600080fd5b5035919050565b600060208284031215614eb057600080fd5b5051919050565b600080600060608486031215614ecc57600080fd5b8351925060208085015167ffffffffffffffff80821115614eec57600080fd5b614ef888838901614830565b94506040870151915080821115614f0e57600080fd5b508501601f81018713614f2057600080fd5b8051614f2e6147df82615934565b8082825284820191508484018a868560051b8701011115614f4e57600080fd5b600094505b83851015614f7a578051614f6681615b66565b835260019490940193918501918501614f53565b5080955050505050509250925092565b600080600060608486031215614f9f57600080fd5b83519250602084015167ffffffffffffffff80821115614fbe57600080fd5b908501906102008288031215614fd357600080fd5b614fdb6158c1565b614fe4836147b3565b8152614ff260208401614b5b565b6020820152615003604084016147b3565b604082015260608301518281111561501a57600080fd5b61502689828601614830565b60608301525060808301518281111561503e57600080fd5b61504a89828601614830565b60808301525061505c60a084016147b3565b60a082015261506d60c084016148ec565b60c082015260e083810151908201526101008084015190820152610120808401519082015261014080840151908201526101606150ab818501614b5b565b908201526101806150be8985830161497f565b908201526101c0838101516101a08301526101e090930151928101929092526040860151919350808211156150f257600080fd5b50614e7b86828701614a3c565b6000806040838503121561511257600080fd5b82359150602083013567ffffffffffffffff81111561513057600080fd5b614c5b85828601614ab2565b6000806040838503121561514f57600080fd5b50508035926020909101359150565b60008060006060848603121561517357600080fd5b83359250602084013561518581615bb3565b9150604084013567ffffffffffffffff8111156151a157600080fd5b614e7b86828701614890565b6000602082840312156151bf57600080fd5b81516137ef81615bb3565b6000806000606084860312156151df57600080fd5b83516151ea81615bc5565b60208501519093506151fb81615b66565b80925050604084015190509250925092565b6000806040838503121561522057600080fd5b823561522b81615bc5565b9150602083013567ffffffffffffffff81111561524757600080fd5b614c5b85828601614890565b600081518084526020808501945080840160005b8381101561528357815187529582019590820190600101615267565b509495945050505050565b600081518084526152a6816020860160208601615a45565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6006811061530f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b61ffff81511682526000602082015160606020850152615336606085018261528e565b90506040830151848203604086015261534f828261528e565b95945050505050565b805173ffffffffffffffffffffffffffffffffffffffff1682526000610200602083015161538c602086018261ffff169052565b5060408301516153b4604086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060608301518160608601526153cc82860182615253565b915050608083015184820360808601526153e68282615253565b91505060a083015161541060a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015161542360c08601826152d8565b5060e083810151908501526101008084015190850152610120808401519085015261014080840151908501526101608084015161ffff811682870152505061018083810151805173ffffffffffffffffffffffffffffffffffffffff168683015260208101516101a087015250506101a08301516101c085810191909152909201516101e090930192909252919050565b805182526020810151602083015260006040820151608060408501526154dd608085018261528e565b90506060830151848203606086015261534f828261528e565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a0604083015261552f60a0830186615253565b82810360608401526155418186615253565b9150508260808301529695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061493c6040830184615358565b73ffffffffffffffffffffffffffffffffffffffff8e8116825261ffff8e1660208301528c811660408301528b1660608201526101c081016155c8608083018c6152d8565b8960a08301528860c08301528760e08301528661010083015261ffff861661012083015261561a610140830186805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b6101808201939093526101a001529b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8516815283602082015263ffffffff83166040820152608060608201526000615678608083018461528e565b9695505050505050565b6020815260006137ef6020830184615313565b6020815260006137ef6020830184615358565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a0604082015260006156e160a0830186615358565b82810360608401526156f38186615313565b9050828103608084015261570781856154b4565b98975050505050505050565b61ffff8516815273ffffffffffffffffffffffffffffffffffffffff8416602082015282604082015260806060820152600061567860808301846154b4565b600060808201868352602073ffffffffffffffffffffffffffffffffffffffff808816828601528087166040860152506080606085015281855480845260a0860191508660005282600020935060005b818110156157be578454835260019485019492840192016157a2565b50909998505050505050505050565b83815273ffffffffffffffffffffffffffffffffffffffff831660208201526060810161493c60408301846152d8565b86815273ffffffffffffffffffffffffffffffffffffffff8616602082015284604082015263ffffffff8416606082015282608082015260c060a0820152600061570760c083018461528e565b8381526060602082015260006158636060830185615358565b82810360408401526156788185615313565b6040805190810167ffffffffffffffff8111828210171561589857615898615b37565b60405290565b6040516060810167ffffffffffffffff8111828210171561589857615898615b37565b6040516101e0810167ffffffffffffffff8111828210171561589857615898615b37565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561592c5761592c615b37565b604052919050565b600067ffffffffffffffff82111561594e5761594e615b37565b5060051b60200190565b600067ffffffffffffffff82111561597257615972615b37565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082198211156159b1576159b1615aaa565b500190565b6000826159ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615a2957615a29615aaa565b500290565b600082821015615a4057615a40615aaa565b500390565b60005b83811015615a60578181015183820152602001615a48565b83811115611f915750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615aa357615aa3615aaa565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612e9d57600080fd5b8015158114612e9d57600080fd5b60068110612e9d57600080fd5b61ffff81168114612e9d57600080fd5b63ffffffff81168114612e9d57600080fd5b60ff81168114612e9d57600080fdfea2646970667358221220141c075a96336d4879c14e2d8ff43c0eb702dfded6a3321907b6eebdd5b2c91664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_allowTask": "allow running task",
          "_chainId": "layerZero chainId",
          "_helper": "protocol helper address",
          "_prevId": "previous taskId"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Openluck LucksTrade.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelTask(uint256,(uint256,uint256,bytes,bytes))": {
        "notice": "seller cancel the task, only when task status equal to 'Pending' or no funds amount"
      },
      "claimNFTs(uint256[],(uint256,uint256,bytes,bytes))": {
        "notice": "when taskItem Fail, user can claim NFTs back (cross-chain case)"
      },
      "claimTokens(uint256[])": {
        "notice": "when taskItem Fail, user can claim tokens back "
      },
      "closeTask(uint256,(uint256,uint256,bytes,bytes))": {
        "notice": "finish a Task,  case 1: reach target crowd amount, status success, and start to pick a winner case 2: time out and not reach the target amount, status close, and returns funds to claimable pool"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "joinTask(uint256,uint32,string)": {
        "notice": "buyer join a task num: how many ticket"
      },
      "pickWinner(uint256,(uint256,uint256,bytes,bytes))": {
        "notice": "start to picker a winner via chainlink VRF"
      }
    },
    "notice": "It is the core contract for crowd funds to buy NFTs result to one lucky winner randomness provided externally.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 507,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 307,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5659,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "prevId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5661,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "currentId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5664,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "HELPER",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ILucksHelper)9430"
      },
      {
        "astId": 5667,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "PROXY_NFT",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IProxyNFTStation)9737"
      },
      {
        "astId": 5670,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "PROXY_TOKEN",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IProxyTokenStation)9778"
      },
      {
        "astId": 5673,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "BRIDGE",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ILucksBridge)8969"
      },
      {
        "astId": 5677,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "isAllowTask",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 5682,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "tasks",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(TaskItem)9020_storage)"
      },
      {
        "astId": 5689,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "tickets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Ticket)9034_storage))"
      },
      {
        "astId": 5694,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "ticketIds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5699,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "infos",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(TaskInfo)9041_storage)"
      },
      {
        "astId": 5705,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "userTickets",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5711,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "userClaimeds",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILucksBridge)8969": {
        "encoding": "inplace",
        "label": "contract ILucksBridge",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksHelper)9430": {
        "encoding": "inplace",
        "label": "contract ILucksHelper",
        "numberOfBytes": "20"
      },
      "t_contract(IProxyNFTStation)9737": {
        "encoding": "inplace",
        "label": "contract IProxyNFTStation",
        "numberOfBytes": "20"
      },
      "t_contract(IProxyTokenStation)9778": {
        "encoding": "inplace",
        "label": "contract IProxyTokenStation",
        "numberOfBytes": "20"
      },
      "t_enum(TaskStatus)8980": {
        "encoding": "inplace",
        "label": "enum TaskStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Ticket)9034_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Ticket))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Ticket)9034_storage)"
      },
      "t_mapping(t_uint256,t_struct(TaskInfo)9041_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TaskInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TaskInfo)9041_storage"
      },
      "t_mapping(t_uint256,t_struct(TaskItem)9020_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TaskItem)",
        "numberOfBytes": "32",
        "value": "t_struct(TaskItem)9020_storage"
      },
      "t_mapping(t_uint256,t_struct(Ticket)9034_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ticket)",
        "numberOfBytes": "32",
        "value": "t_struct(Ticket)9034_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ExclusiveToken)8985_storage": {
        "encoding": "inplace",
        "label": "struct ExclusiveToken",
        "members": [
          {
            "astId": 8982,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8984,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TaskInfo)9041_storage": {
        "encoding": "inplace",
        "label": "struct TaskInfo",
        "members": [
          {
            "astId": 9036,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "lastTID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9038,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "closeTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9040,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "finalNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TaskItem)9020_storage": {
        "encoding": "inplace",
        "label": "struct TaskItem",
        "members": [
          {
            "astId": 8987,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8989,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "nftChainId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8991,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8994,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "tokenIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8997,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "tokenAmounts",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8999,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "acceptToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9002,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "status",
            "offset": 20,
            "slot": "4",
            "type": "t_enum(TaskStatus)8980"
          },
          {
            "astId": 9004,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9006,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "endTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9008,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "targetAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9010,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "price",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 9012,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "paymentStrategy",
            "offset": 0,
            "slot": "9",
            "type": "t_uint16"
          },
          {
            "astId": 9015,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "exclusiveToken",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(ExclusiveToken)8985_storage"
          },
          {
            "astId": 9017,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "amountCollected",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 9019,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "depositId",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Ticket)9034_storage": {
        "encoding": "inplace",
        "label": "struct Ticket",
        "members": [
          {
            "astId": 9029,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9031,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "count",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 9033,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "owner",
            "offset": 4,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
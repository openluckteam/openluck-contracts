{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}"
    },
    "contracts/interfaces/IPrices.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./AggregatorV3Interface.sol\";\r\n\r\ninterface IPrices {\r\n\r\n  event AddFeed(uint256 indexed currency, uint256 indexed base, AggregatorV3Interface feed);\r\n\r\n  function TARGET_DECIMALS() external returns (uint256);\r\n\r\n  function feedFor(uint256 _currency, uint256 _base) external returns (AggregatorV3Interface);\r\n\r\n  function priceFor(uint256 _currency, uint256 _base) external view returns (uint256);\r\n\r\n  function addFeedFor(\r\n    uint256 _currency,\r\n    uint256 _base,\r\n    AggregatorV3Interface _priceFeed\r\n  ) external;\r\n}\r\n"
    },
    "contracts/Prices.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"./interfaces/IPrices.sol\";\r\n\r\n//*********************************************************************//\r\n// --------------------------- custom errors ------------------------- //\r\n//*********************************************************************//\r\nerror PRICE_FEED_ALREADY_EXISTS();\r\nerror PRICE_FEED_NOT_FOUND();\r\n\r\n/** \r\n  @notice Manages and normalizes price feeds.\r\n*/\r\ncontract Prices is IPrices, Ownable {\r\n  //*********************************************************************//\r\n  // ---------------- public constant stored properties ---------------- //\r\n  //*********************************************************************//\r\n\r\n  /** \r\n    @notice \r\n    The normalized number of decimals each price feed has.\r\n  */\r\n  uint256 public constant override TARGET_DECIMALS = 18;\r\n\r\n  //*********************************************************************//\r\n  // --------------------- public stored properties -------------------- //\r\n  //*********************************************************************//\r\n\r\n  /** \r\n    @notice \r\n    The available price feeds.\r\n\r\n    _currency he currency of the feed.\r\n    _base he base of the feed. \r\n  */\r\n  mapping(uint256 => mapping(uint256 => AggregatorV3Interface)) public override feedFor;\r\n\r\n  //*********************************************************************//\r\n  // ------------------------- external views -------------------------- //\r\n  //*********************************************************************//\r\n\r\n  /** \r\n      @notice \r\n      Gets the current price of the provided currency in terms of the provided base currency.\r\n      \r\n      @param _currency The currency to get a price for.\r\n      @param _base The currency to base the price on.\r\n      \r\n      @return The price of the currency in terms of the base, with 18 decimals.\r\n    */\r\n  function priceFor(uint256 _currency, uint256 _base) external view override returns (uint256) {\r\n    // If the currency is the base, return 1 since they are priced the same.\r\n    if (_currency == _base) return 10**TARGET_DECIMALS;\r\n\r\n    // Get a reference to the feed.\r\n    AggregatorV3Interface _feed = feedFor[_currency][_base];\r\n\r\n    // Feed must exist.\r\n    if (_feed == AggregatorV3Interface(address(0))) {\r\n      revert PRICE_FEED_NOT_FOUND();\r\n    }\r\n\r\n    // Get the latest round information. Only need the price is needed.\r\n    (, int256 _price, , , ) = _feed.latestRoundData();\r\n\r\n    // Get a reference to the number of decimals the feed uses.\r\n    uint256 _decimals = _feed.decimals();\r\n\r\n    // If decimals need adjusting, multiply or divide the price by the decimal adjuster to get the normalized result.\r\n    if (TARGET_DECIMALS == _decimals) {\r\n      return uint256(_price);\r\n    } else if (TARGET_DECIMALS > _decimals) {\r\n      return uint256(_price) * 10**(TARGET_DECIMALS - _decimals);\r\n    } else {\r\n      return uint256(_price) / 10**(_decimals - TARGET_DECIMALS);\r\n    }\r\n  }\r\n\r\n  //*********************************************************************//\r\n  // ---------------------------- constructor -------------------------- //\r\n  //*********************************************************************//\r\n\r\n  /** \r\n    @param _owner The address that will own the contract.\r\n  */\r\n  constructor(address _owner) {\r\n    // Transfer the ownership.\r\n    transferOwnership(_owner);\r\n  }\r\n\r\n  //*********************************************************************//\r\n  // ---------------------- external transactions ---------------------- //\r\n  //*********************************************************************//\r\n\r\n  /** \r\n    @notice \r\n    Add a price feed for a currency in terms of the provided base currency.\r\n\r\n    @dev\r\n    Current feeds can't be modified.\r\n\r\n    @param _currency The currency that the price feed is for.\r\n    @param _base The currency that the price feed is based on.\r\n    @param _feed The price feed being added.\r\n  */\r\n  function addFeedFor(\r\n    uint256 _currency,\r\n    uint256 _base,\r\n    AggregatorV3Interface _feed\r\n  ) external override onlyOwner {\r\n    // There can't already be a feed for the specified currency.\r\n    if (feedFor[_currency][_base] != AggregatorV3Interface(address(0))) {\r\n      revert PRICE_FEED_ALREADY_EXISTS();\r\n    }\r\n\r\n    // Set the feed.\r\n    feedFor[_currency][_base] = _feed;\r\n\r\n    emit AddFeed(_currency, _base, _feed);\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/tests/NFTs/PandaNFT.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract PandaNFT is ERC721, Ownable {\r\n    \r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public baseURI = 'https://www.pandamultiversenft.com/metadata/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"Panda Multiverse\", \"PNDMLT\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString(),\".json\"));\r\n    }\r\n\r\n    function safeMint(address to) public {\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _tokenIdCounter.increment();\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/tests/NFTs/DracooMaster.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract DracooMaster is ERC721, Ownable {\r\n\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public baseURI = 'https://api.dracoomaster.com/platform/nft/dracoo/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"Dracoo Master\", \"Dracoo\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _tokenIdCounter.increment();\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs/DoodleApes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract DoodleApes is ERC721, Ownable {\r\n\r\n    using Strings for uint256;    \r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n   string public baseURI = 'https://doodleapes.meta.rareboard.com/api/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"Doodle Apes BSC\", \"dApes\") {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _tokenIdCounter.increment();\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs/CyBlocPack.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract CyBlocPack is ERC721, Ownable {\r\n\r\n    using Strings for uint256;    \r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string constant public baseURI = \"https://nftmetadata.cyball.com/blocpack/\";\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"CyBall Genesis Pack\", \"BLOCPACK\") {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _tokenIdCounter.increment();\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs-ETH/EthShitBeast.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract EthShitBeast is ERC721, Ownable {\r\n\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public baseURI = 'https://metadata.pieceofshit.wtf/shitbeast/02372da9-ea1b-4bb3-9ff8-f1f89c6a98ed/json/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"ShitBeast\", \"SB\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString(), \".json\"));\r\n    }\r\n\r\n    function safeMint(address to) public {     \r\n        require(balanceOf(to) <=3 , 'owner count out of bounds');\r\n\r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        require(tokenId <= 10000, \"over cap\");\r\n       \r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs-ETH/EthOtherdeed.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract EthOtherdeed is ERC721, Ownable {\r\n\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n    mapping(address=>uint256) public userMinted;\r\n    string public baseURI = 'https://api.otherside.xyz/lands/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"Otherdeed\", \"OTHR\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        require(userMinted[to] + num <= 6, \"mint limit\");\r\n        userMinted[to] += num;\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {        \r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs-ETH/EthMurakamiFlowers.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract EthMurakamiFlowers is ERC721, Ownable {\r\n\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public baseURI = 'https://mflowers-prod.s3.us-west-1.amazonaws.com/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"Murakami.Flowers\", \"M.F\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {     \r\n        require(balanceOf(to) <=3 , 'owner count out of bounds');\r\n\r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        require(tokenId <= 10000, \"over cap\");\r\n       \r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs-ETH/EthMoonbirds.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract EthMoonbirds is ERC721, Ownable {\r\n\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public baseURI = 'https://live---metadata-5covpqijaa-uc.a.run.app/metadata/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"Moonbirds\", \"MOONBIRD\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {        \r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs-ETH/EthMfers.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract EthMfers is ERC721, Ownable {\r\n\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public baseURI = 'ipfs://QmWiQE65tmpYzcokCheQmng2DCM33DEhjXcPB6PanwpAZo/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"mfers\", \"MFER\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {     \r\n        require(balanceOf(to) <=3 , 'owner count out of bounds');\r\n\r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        require(tokenId <= 10000, \"over cap\");\r\n       \r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs-ETH/EthMeebits.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract EthMeebits is ERC721, Ownable {\r\n\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public baseURI = 'https://meebits.larvalabs.com/meebit/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"Meebits\", unicode\"⚇\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {     \r\n        require(balanceOf(to) <=3 , 'owner count out of bounds');\r\n\r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        require(tokenId <= 10000, \"over cap\");\r\n       \r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs-ETH/EthGoblintownNFT.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract EthGoblintownNFT is ERC721, Ownable {\r\n\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public baseURI = 'ipfs://QmewJ9GaaH11Z8n1muXUndrivPi5CmENxV1nx7P5A23VQx/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"goblintown\", \"GOBLIN\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {     \r\n        require(balanceOf(to) <=3 , 'owner count out of bounds');\r\n\r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        require(tokenId <= 10000, \"over cap\");\r\n       \r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs-ETH/EthBoredApeYachtClub.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract EthBoredApeYachtClub is ERC721, Ownable {\r\n\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public baseURI = 'ipfs://QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"BoredApeYachtClub\", \"BAYC\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {        \r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/tests/NFTs-ETH/EthAzuki.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract EthAzuki is ERC721, Ownable {\r\n\r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public baseURI = 'https://ikzttp.mypinata.cloud/ipfs/QmQFkLSQysj94s5GvTHPyzTxrawwtjgiiYS2TBLgrvw8CW/';\r\n\r\n    constructor(address mintTo, uint num) ERC721(\"Azuki\", \"AZUKI\")  {\r\n        mint(mintTo, num);\r\n    }\r\n\r\n    function mint(address to, uint num) public {\r\n        for (uint i = 0; i < num; i++) {\r\n            safeMint(to);\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\r\n    }\r\n\r\n    function safeMint(address to) public {        \r\n        _tokenIdCounter.increment();\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _safeMint(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tokenIdCounter.current();\r\n    }\r\n}"
    },
    "contracts/ProxyNFTStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// imports\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\n// interfaces\r\nimport {IProxyNFTStation, DepositNFT} from \"./interfaces/IProxyNFTStation.sol\";\r\n\r\ncontract ProxyNFTStation is IProxyNFTStation, ERC721Holder, ERC1155Holder, Ownable {\r\n\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _depositIds;\r\n\r\n    // ============ Public  ============    \r\n\r\n    // interfaceID\r\n    bytes4 public constant ID_ERC721 = 0x80ac58cd;  // ERC721    \r\n    bytes4 public constant ID_ERC1155 = 0xd9b67a26; // ERC1155\r\n\r\n    // OpenLuck executors\r\n    mapping(address => bool) public executors;\r\n\r\n    // store user deposited nfts, support multiple executors (executor-address => depositId => NFT)    \r\n    mapping(address => mapping(uint256 => DepositNFT)) public deposits;\r\n\r\n\r\n    modifier onlyExecutor() {\r\n        require(executors[msg.sender] == true, \"Lucks: caller must be LucksExecutor.\");\r\n        _;\r\n    }\r\n\r\n    // ======== Constructor =========\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _executor address\r\n     */\r\n    constructor(address _executor) {\r\n       executors[_executor]= true;\r\n    }\r\n\r\n    // ============ Public functions ============\r\n\r\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) override external payable onlyExecutor \r\n        returns(uint256 depositId) { \r\n\r\n        // transfer nft to this contract\r\n        _transferNFTs(nft, user, address(this), tokenIds, amounts);    \r\n\r\n        // store deposit record\r\n        _depositIds.increment();\r\n        depositId = _depositIds.current();\r\n\r\n        deposits[msg.sender][depositId] = DepositNFT(user, nft, tokenIds, amounts, endTime);\r\n        \r\n        emit Deposit(msg.sender, depositId, user, nft, tokenIds, amounts, endTime);   \r\n    }\r\n\r\n    function withdraw(uint256 depositId, address to) override external onlyExecutor {\r\n\r\n        require(deposits[msg.sender][depositId].tokenIds.length > 0, \"Invalid depositId\");\r\n\r\n        address nft = deposits[msg.sender][depositId].nftContract;\r\n        uint256[] memory tokenIds = deposits[msg.sender][depositId].tokenIds;\r\n        uint256[] memory amounts = deposits[msg.sender][depositId].amounts;\r\n\r\n        // update storage\r\n        delete deposits[msg.sender][depositId];\r\n\r\n        // transfer out nft\r\n        _transferNFTs(nft, address(this), to, tokenIds, amounts);\r\n\r\n        emit Withdraw(msg.sender, depositId, to, nft, tokenIds, amounts);   \r\n    }\r\n\r\n\r\n    // ============ Internal functions ============\r\n\r\n    /**\r\n     * @notice batch transfer NFTs (seller/winner <-> protocol)\r\n     * @param nft NFT contract address\r\n     * @param from sender\r\n     * @param to reciever\r\n     * @param tokenIds tokenId array\r\n     * @param amounts amounts array (ERC721 can be null)\r\n     */\r\n    function _transferNFTs(address nft, address from, address to, uint256[] memory tokenIds, uint256[] memory amounts) internal\r\n    {\r\n        require(nft != from && from != to, \"Invalid address\");\r\n\r\n        if (IERC165(nft).supportsInterface(ID_ERC721)) {\r\n            // transfer ERC721\r\n            for (uint256 i = 0; i < tokenIds.length; i++) {\r\n                IERC721(nft).transferFrom(from, to, tokenIds[i]);\r\n            }\r\n        } else if (IERC165(nft).supportsInterface(ID_ERC1155)) {\r\n            // transfer ERC1155\r\n            require(tokenIds.length == amounts.length, \"Invalid ids & amounts\");\r\n            IERC1155(nft).safeBatchTransferFrom(from, to, tokenIds, amounts, \"\");\r\n        }\r\n    }\r\n\r\n    \r\n    // ============ only Owner ============\r\n\r\n    /**\r\n     * @notice for enmergency case\r\n     * for user to redeem\r\n     * in case of cross chain withdraw suck nft, enable to redeem back to seller nft after endTime\r\n    */\r\n    function redeem(address executor, uint256 depositId, address to) override external onlyOwner {\r\n        \r\n        require(deposits[executor][depositId].tokenIds.length > 0, \"Invalid depositId\");\r\n        require(block.timestamp > deposits[executor][depositId].endTime, \"Not time to redeem\");\r\n        require(deposits[executor][depositId].user == to , \"Invalid redeem to\");\r\n\r\n        address nft = deposits[executor][depositId].nftContract;\r\n        uint256[] memory tokenIds = deposits[executor][depositId].tokenIds;\r\n        uint256[] memory amounts = deposits[executor][depositId].amounts;\r\n\r\n        // update storage\r\n        delete deposits[executor][depositId];\r\n\r\n        // transfer back nft to user\r\n        _transferNFTs(nft, address(this), to, tokenIds, amounts);\r\n\r\n        emit Redeem(msg.sender, depositId, to, nft, tokenIds, amounts);   \r\n    }\r\n\r\n\r\n    //  ============ onlyOwner  functions  ============\r\n\r\n    /**\r\n    @notice set operator\r\n     */\r\n    function setExecutor(address executor) external onlyOwner {\r\n        executors[executor] = true;\r\n    }\r\n} "
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/interfaces/IProxyNFTStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nstruct DepositNFT {\r\n    address user; // deposit user\r\n    address nftContract; // NFT registry address    \r\n    uint256[] tokenIds; // Allow mulit nfts for sell    \r\n    uint256[] amounts; // support ERC1155\r\n    uint256 endTime; // Task end time\r\n}\r\n\r\ninterface IProxyNFTStation {\r\n\r\n    event Deposit(address indexed executor, uint256 depositId, address indexed user, address nft, uint256[] tokenIds, uint256[] amounts, uint256 endTime);\r\n    event Withdraw(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\r\n    event Redeem(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\r\n\r\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) external payable returns (uint256 depositId);    \r\n    function withdraw(uint256 depositId, address to) external;    \r\n    function redeem(address executor, uint256 depositId, address to) external;    \r\n}"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/LucksExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// imports\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Arrays.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\n// Openluck interfaces\r\nimport {ILucksExecutor, TaskItem, TaskExt, TaskStatus, Ticket, TaskInfo, UserState } from \"./interfaces/ILucksExecutor.sol\";\r\nimport {IProxyNFTStation} from \"./interfaces/IProxyNFTStation.sol\";\r\nimport {IProxyTokenStation} from \"./interfaces/IProxyTokenStation.sol\";\r\nimport {ILucksHelper} from \"./interfaces/ILucksHelper.sol\";\r\nimport {ILucksBridge, lzTxObj} from \"./interfaces/ILucksBridge.sol\";\r\n\r\n\r\n/** @title Openluck LucksTrade.\r\n * @notice It is the core contract for crowd funds to buy NFTs result to one lucky winner\r\n * randomness provided externally.\r\n */\r\ncontract LucksExecutor is ILucksExecutor, ReentrancyGuardUpgradeable, OwnableUpgradeable {    \r\n    using SafeMath for uint256;\r\n    using Arrays for uint256[];\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private ids;\r\n\r\n    // ============ Openluck interfaces ============\r\n    ILucksHelper public HELPER;    \r\n    IProxyNFTStation public NFT;\r\n    IProxyTokenStation public TOKEN;\r\n    ILucksBridge public BRIDGE;\r\n    \r\n    uint16 public lzChainId;\r\n    bool public isAllowTask; // this network allow running task or not (ethereum & Rinkeby not allow)\r\n\r\n    // ============ Public Mutable Storage ============\r\n\r\n    // VARIABLES    \r\n    mapping(uint256 => TaskItem) public tasks; // store tasks info by taskId    \r\n    mapping(uint256 => TaskInfo) public infos; // store task updated info (taskId=>TaskInfo)\r\n    mapping(uint256 => mapping(uint256 => Ticket)) public tickets; // store tickets (taskId => ticketId => ticket)    \r\n    mapping(uint256 => uint256[]) public ticketIds; // store ticket ids (taskId => lastTicketIds)             \r\n    mapping(address => mapping(uint256 => UserState)) public userState; // Keep track of user ticket ids for a given taskId (user => taskId => userstate)        \r\n\r\n    // ======== Constructor =========\r\n\r\n    /**\r\n     * @notice Constructor / initialize\r\n     * @param _chainId layerZero chainId\r\n     * @param _allowTask allow running task\r\n     */\r\n    function initialize(uint16 _chainId, bool _allowTask) external initializer { \r\n        __ReentrancyGuard_init();\r\n        __Ownable_init();\r\n        lzChainId = _chainId;\r\n        isAllowTask = _allowTask;\r\n    }\r\n\r\n    //  ============ Modifiers  ============\r\n\r\n    // MODIFIERS\r\n    modifier isExists(uint256 taskId) {\r\n        require(exists(taskId), \"Task not exists\");\r\n        _;\r\n    }\r\n\r\n    // ============ Public functions ============\r\n\r\n    function count() public view override returns (uint256) {\r\n        return ids.current();\r\n    }\r\n\r\n    function exists(uint256 taskId) public view override returns (bool) {\r\n        return taskId > 0 && taskId <= ids.current();\r\n    }\r\n\r\n    function getTask(uint256 taskId) public view override returns (TaskItem memory) {\r\n        return tasks[taskId];\r\n    }\r\n\r\n    function getInfo(uint256 taskId) public view override returns (TaskInfo memory) {\r\n        return infos[taskId];\r\n    }\r\n    \r\n    function isFail(uint256 taskId) public view override returns(bool) {\r\n        return tasks[taskId].status == TaskStatus.Fail ||\r\n            (tasks[taskId].amountCollected < tasks[taskId].targetAmount && block.timestamp > tasks[taskId].endTime);\r\n    }\r\n\r\n    function getChainId() external view override returns (uint16) {\r\n        return lzChainId;\r\n    }\r\n    \r\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable override nonReentrant {\r\n        \r\n        require(lzChainId == item.nftChainId, \"Invalid chainId\"); // action must start from NFTChain   \r\n        require(address(NFT) != address(0), \"ProxyNFT unset\");\r\n\r\n        // inputs validation\r\n        HELPER.checkNewTask(msg.sender, item);\r\n        HELPER.checkNewTaskExt(ext);\r\n\r\n        // Transfer nfts to proxy station (NFTChain) \r\n        // in case of dst chain transection fail, enable user redeem nft back, after endTime\r\n        uint256 depositId = NFT.deposit(msg.sender, item.nftContract, item.tokenIds, item.tokenAmounts, item.endTime);\r\n        item.depositId = depositId;\r\n             \r\n        // Create Task Item           \r\n        if (ext.chainId == item.nftChainId) { // same chain creation    \r\n            _createTask(item, ext);\r\n        }\r\n        else {\r\n            // cross chain creation\r\n            require(address(BRIDGE) != address(0), \"Bridge unset\");\r\n            BRIDGE.sendCreateTask{value: msg.value}(ext.chainId, payable(msg.sender), item, ext, _param);\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice buyer join a task\r\n    num: how many ticket\r\n    */\r\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable override isExists(taskId) nonReentrant \r\n    {\r\n        // check inputs and task\r\n        HELPER.checkJoinTask(msg.sender, taskId, num, note);\r\n\r\n        // Calculate number of TOKEN to this contract\r\n        uint256 amount = tasks[taskId].price.mul(num);\r\n\r\n        // deposit payment to token station.        \r\n        TOKEN.deposit{value: msg.value}(msg.sender, tasks[taskId].acceptToken, amount);\r\n\r\n        // create tickets\r\n        uint256 lastTID = _createTickets(taskId, num, msg.sender);\r\n\r\n        // update task item info\r\n        if (tasks[taskId].status == TaskStatus.Pending) {\r\n            tasks[taskId].status = TaskStatus.Open; \r\n        }\r\n        tasks[taskId].amountCollected = tasks[taskId].amountCollected.add(amount);\r\n\r\n        //if reach target amount, trigger to close task\r\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {\r\n            if (address(HELPER.getAutoClose()) != address(0)) {\r\n                HELPER.getAutoClose().addTask(taskId, tasks[taskId].endTime);\r\n            }\r\n        }\r\n\r\n        emit JoinTask(taskId, msg.sender, amount, num, lastTID, note);\r\n    }\r\n\r\n    /**\r\n    @notice seller cancel the task, only when task status equal to 'Pending' or no funds amount\r\n    */\r\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \r\n    {                                \r\n        require((tasks[taskId].status == TaskStatus.Pending || tasks[taskId].status == TaskStatus.Open) && infos[taskId].lastTID <= 0, \"Opening or canceled\");        \r\n        require(tasks[taskId].seller == msg.sender, \"Invalid auth\"); // only seller can cancel\r\n        \r\n        // update status\r\n        tasks[taskId].status = TaskStatus.Close;\r\n        \r\n        _withdrawNFTs(taskId, payable(tasks[taskId].seller), true, _param);\r\n\r\n        emit CancelTask(taskId, msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n    @notice finish a Task, \r\n    case 1: reach target crowd amount, status success, and start to pick a winner\r\n    case 2: time out and not reach the target amount, status close, and returns funds to claimable pool\r\n    */\r\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \r\n    {        \r\n        require(tasks[taskId].status == TaskStatus.Open, \"Not Open\");\r\n        require(tasks[taskId].amountCollected >= tasks[taskId].targetAmount || block.timestamp > tasks[taskId].endTime, \"Not reach target or not expired\");\r\n\r\n        // mark operation time\r\n        infos[taskId].closeTime = block.timestamp;\r\n\r\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {    \r\n            // Reached task target        \r\n            // update task, Task Close & start to draw\r\n            tasks[taskId].status = TaskStatus.Close; \r\n\r\n            // Request a random number from the generator based on a seed(max ticket number)\r\n            HELPER.getVRF().reqRandomNumber(taskId, infos[taskId].lastTID);\r\n\r\n            // add to auto draw Queue\r\n            if (address(HELPER.getAutoDraw()) != address(0)) {\r\n                HELPER.getAutoDraw().addTask(taskId, block.timestamp + HELPER.getDrawDelay());\r\n            }\r\n\r\n            // cancel the auto close queue if seller open directly\r\n             if (msg.sender == tasks[taskId].seller && address(HELPER.getAutoClose()) != address(0)) {\r\n                HELPER.getAutoClose().removeTask(taskId);\r\n            }\r\n\r\n        } else {\r\n            // Task Fail & Expired\r\n            // update task\r\n            tasks[taskId].status = TaskStatus.Fail; \r\n\r\n            // NFTs back to seller            \r\n            _withdrawNFTs(taskId, payable(tasks[taskId].seller), false, _param);                            \r\n        }\r\n\r\n        emit CloseTask(taskId, msg.sender, tasks[taskId].status);\r\n    }\r\n\r\n    /**\r\n    @notice start to picker a winner via chainlink VRF\r\n    */\r\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant\r\n    {                \r\n        require(tasks[taskId].status == TaskStatus.Close, \"Not Close\");\r\n        // require(block.timestamp >= infos[taskId].closeTime + HELPER.getDrawDelay(), \"Delay limit\");\r\n         \r\n        // get drawn number from Chainlink VRF\r\n        uint32 finalNo = HELPER.getVRF().viewRandomResult(taskId);\r\n        require(finalNo > 0, \"Not Drawn\");\r\n        require(finalNo <= infos[taskId].lastTID, \"Invalid finalNo\");\r\n\r\n        // find winner by drawn number\r\n        Ticket memory ticket = _findWinnerTicket(taskId, finalNo);    \r\n        require(ticket.number > 0, \"Lost winner\");\r\n        \r\n        // update store item\r\n        tasks[taskId].status = TaskStatus.Success;    \r\n        infos[taskId].finalNo = ticket.number;          \r\n        \r\n        // withdraw NFTs to winner (maybe cross chain)         \r\n        _withdrawNFTs(taskId, payable(ticket.owner), true, _param);\r\n\r\n        // dispatch Payment\r\n        _transferPayment(taskId, ticket.owner);    \r\n        \r\n        emit PickWinner(taskId, ticket.owner, finalNo);\r\n    }\r\n\r\n\r\n    /**\r\n    @notice when taskItem Fail, user can claim tokens back \r\n    */\r\n    function claimTokens(uint256[] memory taskIds) override external nonReentrant\r\n    {\r\n        for (uint256 i = 0; i < taskIds.length; i++) {\r\n            _claimToken(taskIds[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice when taskItem Fail, user can claim NFTs back (cross-chain case)\r\n    */\r\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) override external payable nonReentrant\r\n    {  \r\n        for (uint256 i = 0; i < taskIds.length; i++) {\r\n            _claimNFTs(taskIds[i], _param);\r\n        }\r\n    }\r\n\r\n    // ============ Remote(destination) functions ============\r\n    \r\n    function onLzReceive(uint8 functionType, bytes memory _payload) override external {\r\n        require(msg.sender == address(BRIDGE), \"Executor: onlyBridge\");\r\n        if (functionType == 1) { //TYPE_CREATE_TASK\r\n            (, TaskItem memory item, TaskExt memory ext) = abi.decode(_payload, (uint256, TaskItem, TaskExt));\r\n             _createTask(item, ext);\r\n                    \r\n        } else if (functionType == 2) { //TYPE_WITHDRAW_NFT\r\n            (, address user, uint256 depositId) = abi.decode(_payload, (uint8, address, uint256));                        \r\n            NFT.withdraw(depositId, user); \r\n        }\r\n    }    \r\n\r\n    // ============ Internal functions ============\r\n\r\n    /**\r\n    @notice seller create a crowdluck task\r\n    returns: new taskId\r\n     */\r\n    function _createTask(TaskItem memory item, TaskExt memory ext) internal \r\n    {        \r\n        require(isAllowTask, \"Not allow task\");\r\n        HELPER.checkNewTaskRemote(item);\r\n\r\n        //create TaskId\r\n        ids.increment();\r\n        uint256 taskId = ids.current();\r\n\r\n        // start now\r\n        if (item.status == TaskStatus.Open) {\r\n            item.startTime = item.startTime < block.timestamp ? item.startTime : block.timestamp;\r\n        } else {\r\n            require(block.timestamp <= item.startTime && item.startTime < item.endTime, \"Invalid time range\");\r\n            // start in future\r\n            item.status = TaskStatus.Pending;\r\n        }\r\n\r\n        //store taskItem\r\n        tasks[taskId] = item;\r\n\r\n        emit CreateTask(taskId, item, ext);\r\n    }\r\n\r\n    /**\r\n     * @notice join task succes. create tickets for buyer\r\n     * @param taskId task id\r\n     * @param num how many ticket\r\n     * @param buyer buery\r\n     */\r\n    function _createTickets(uint256 taskId, uint32 num, address buyer) internal returns (uint256) \r\n    {\r\n        uint256 start = infos[taskId].lastTID.add(1);\r\n        uint256 lastTID = start.add(num).sub(1);\r\n\r\n        tickets[taskId][lastTID] = Ticket(lastTID, num, buyer);\r\n        ticketIds[taskId].push(lastTID);\r\n\r\n        userState[buyer][taskId].num += num;\r\n        infos[taskId].lastTID = lastTID;\r\n\r\n        emit CreateTickets(taskId, buyer, num, start, lastTID);\r\n        return lastTID;\r\n    }\r\n\r\n    /**\r\n     * @notice search a winner ticket by number\r\n     * @param taskId task id\r\n     * @param number final number\r\n     */\r\n    function _findWinnerTicket(uint256 taskId, uint32 number) internal view returns (Ticket memory)\r\n    {\r\n        // find by ticketId\r\n        Ticket memory ticket = tickets[taskId][number];\r\n\r\n        if (ticket.number == 0) {\r\n\r\n            uint256 idx = ticketIds[taskId].findUpperBound(number);\r\n            uint256 lastTID = ticketIds[taskId][idx];\r\n            ticket = tickets[taskId][lastTID];\r\n        }\r\n\r\n        return ticket;\r\n    }\r\n\r\n    /**\r\n    @notice when taskItem Fail, user can claim token back  \r\n    */\r\n    function _claimToken(uint256 taskId) internal isExists(taskId)\r\n    {\r\n        TaskItem memory item = tasks[taskId];\r\n        require(isFail(taskId), \"Not Fail\");\r\n        require(userState[msg.sender][taskId].claimed == false, \"Claimed\");\r\n\r\n        // Calculate the funds buyer payed\r\n        uint256 amount = item.price.mul(userState[msg.sender][taskId].num);\r\n        \r\n        // update claim info\r\n        userState[msg.sender][taskId].claimed = true;\r\n        \r\n        // Transfer\r\n        _transferOut(item.acceptToken, msg.sender, amount);\r\n\r\n        emit ClaimToken(taskId, msg.sender, amount, item.acceptToken);\r\n    }\r\n\r\n    function _claimNFTs(uint256 taskId, lzTxObj memory _param) internal isExists(taskId)\r\n    {\r\n        address seller = tasks[taskId].seller;\r\n        require(isFail(taskId), \"Not Fail\");\r\n        require(userState[seller][taskId].claimed == false, \"Claimed\");\r\n        \r\n        // update claim info\r\n        userState[seller][taskId].claimed = true;\r\n        \r\n        // withdraw NFTs to winner (maybe cross chain)     \r\n        _withdrawNFTs(taskId, payable(seller), true, _param);\r\n\r\n        emit ClaimNFT(taskId, seller, tasks[taskId].nftContract, tasks[taskId].tokenIds);\r\n    }\r\n\r\n    function _withdrawNFTs(uint256 taskId, address payable user, bool enableCrossChain, lzTxObj memory _param) internal\r\n    {\r\n        if (lzChainId == tasks[taskId].nftChainId) { // same chain\r\n            NFT.withdraw(tasks[taskId].depositId, user);\r\n        }\r\n        else if (enableCrossChain){ // cross chain            \r\n            BRIDGE.sendWithdrawNFTs{value: msg.value}(tasks[taskId].nftChainId, payable(msg.sender), user, tasks[taskId].depositId, _param);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice transfer protocol fee and funds\r\n     * @param taskId taskId\r\n     * @param winner winner address\r\n     * paymentStrategy for winner share is up to 50% (500 = 5%, 5,000 = 50%)\r\n     */\r\n    function _transferPayment(uint256 taskId, address winner) internal\r\n    {\r\n        // inner variables\r\n        address acceptToken = tasks[taskId].acceptToken;\r\n\r\n        // Calculate amount to seller\r\n        uint256 collected = tasks[taskId].amountCollected;\r\n        uint256 sellerAmount = collected;\r\n\r\n        // 1. Calculate protocol fee\r\n        uint256 fee = (collected.mul(HELPER.getProtocolFee())).div(10000);\r\n        address feeRecipient = HELPER.getProtocolFeeRecipient();\r\n        require(fee >= 0, \"Invalid fee\");\r\n        sellerAmount = sellerAmount.sub(fee);\r\n\r\n        // 2. Calculate winner share amount with payment stragey (up to 50%)\r\n        uint256 winnerAmount = 0;\r\n        uint256 winnerShare = 0;\r\n        uint256[] memory splitShare;\r\n        address[] memory splitAddr;\r\n        if (tasks[taskId].paymentStrategy > 0) {\r\n            (winnerShare, splitShare, splitAddr) = HELPER.getSTRATEGY().viewPaymentShares(tasks[taskId].paymentStrategy, winner, taskId);\r\n            require(winnerShare >= 0 && winnerShare <= 5000, \"Invalid strategy\");\r\n            require(splitShare.length <= 10, \"Invalid splitShare\"); // up to 10 splitter\r\n            if (winnerShare > 0) {\r\n                winnerAmount = (collected.mul(winnerShare)).div(10000);\r\n                sellerAmount = sellerAmount.sub(winnerAmount);\r\n            }\r\n        }\r\n        \r\n        // 3. transfer funds\r\n\r\n        // transfer protocol fee\r\n        _transferOut(acceptToken, feeRecipient, fee);\r\n        emit TransferFee(taskId, feeRecipient, acceptToken, fee);     \r\n\r\n        // transfer winner share\r\n        if (winnerAmount > 0) {\r\n            if (splitShare.length > 0 && splitShare.length == splitAddr.length) {  \r\n                // split winner share for strategy case\r\n                uint256 splited = 10000;                \r\n                for (uint i=0; i < splitShare.length; i++) {   \r\n                    // make sure spliter cannot overflow\r\n                    if ((splited.sub(splitShare[i])) >=0 && splitShare[i] > 0) { \r\n                        uint256 splitAmount = (winnerAmount.mul(splitShare[i]).div(10000));\r\n                        _transferOut(acceptToken, splitAddr[i], splitAmount);\r\n                        splited = splited.sub(splitShare[i]);\r\n\r\n                        emit TransferShareAmount(taskId, splitAddr[i], acceptToken, splitAmount); \r\n                    }\r\n                }\r\n\r\n                if (splited > 0) {\r\n                    // if there's a remainder of splitShare, give it to the seller\r\n                    sellerAmount = sellerAmount.add((winnerAmount.mul(splited).div(10000)));\r\n                }\r\n            }\r\n            else {                \r\n                _transferOut(acceptToken, winner, winnerAmount);\r\n\r\n                emit TransferShareAmount(taskId, winner, acceptToken, winnerAmount); \r\n            }\r\n        }    \r\n\r\n        // transfer funds to seller\r\n        _transferOut(acceptToken, tasks[taskId].seller, sellerAmount);  \r\n\r\n        emit TransferPayment(taskId, tasks[taskId].seller, acceptToken, sellerAmount);                    \r\n    }\r\n\r\n    function _transferOut(address token, address to, uint256 amount) internal {        \r\n        TOKEN.withdraw(to, token, amount);\r\n    }\r\n\r\n    //  ============ onlyOwner  functions  ============\r\n\r\n    function setAllowTask(bool enable) external onlyOwner {\r\n        isAllowTask = enable;\r\n    }\r\n\r\n    function setLucksHelper(ILucksHelper addr) external onlyOwner {\r\n        HELPER = addr;\r\n    }\r\n\r\n    function setBridgeAndProxy(ILucksBridge _bridge, IProxyTokenStation _token, IProxyNFTStation _nft) external onlyOwner {\r\n\r\n        require(address(_bridge) != address(0x0), \"Invalid BRIDGE\");\r\n        if (isAllowTask) {\r\n            require(address(_token) != address(0x0), \"Invalid TOKEN\");\r\n        }\r\n        require(address(_nft) != address(0x0), \"Invalid NFT\");\r\n\r\n        BRIDGE = _bridge;\r\n        TOKEN = _token;\r\n        NFT = _nft;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ILucksExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport { lzTxObj } from \"./ILucksBridge.sol\";\r\n\r\n/** \r\n    TaskStatus\r\n    0) Pending: task created but not reach starttime\r\n    1) Open: task opening\r\n    2) Close: task close, waiting for draw\r\n    3) Success: task reach target, drawed winner\r\n    4) Fail: task Fail and expired\r\n    5) Cancel: task user cancel\r\n */\r\nenum TaskStatus {\r\n    Pending,\r\n    Open,\r\n    Close,\r\n    Success,\r\n    Fail,\r\n    Cancel\r\n}\r\n\r\nstruct ExclusiveToken {\r\n    address token; // exclusive token contract address    \r\n    uint256 amount; // exclusive token holding amount required\r\n}\r\n\r\nstruct TaskItem {\r\n\r\n    address seller; // Owner of the NFTs\r\n    uint16 nftChainId; // NFT source ChainId    \r\n    address nftContract; // NFT registry address    \r\n    uint256[] tokenIds; // Allow mulit nfts for sell    \r\n    uint256[] tokenAmounts; // support ERC1155\r\n    \r\n    address acceptToken; // acceptToken    \r\n    TaskStatus status; // Task status    \r\n\r\n    uint256 startTime; // Task start time    \r\n    uint256 endTime; // Task end time\r\n    \r\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \r\n    uint256 price; // Per ticket price  (in wei)    \r\n    \r\n    uint16 paymentStrategy; // payment strategy;\r\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \r\n    \r\n    // editable fields\r\n    uint256 amountCollected; // The amount (in wei) collected of this task\r\n    uint256 depositId; // NFTs depositId (system set)\r\n}\r\n\r\nstruct TaskExt {\r\n    uint16 chainId; // Task Running ChainId   \r\n    string title; // title (for searching keywords)  \r\n    string note;   // memo\r\n}\r\n\r\nstruct Ticket {\r\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\r\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\r\n    address owner;  // ticket owner\r\n}\r\n\r\nstruct TaskInfo {\r\n    uint256 lastTID;\r\n    uint256 closeTime;\r\n    uint256 finalNo;\r\n}\r\n \r\nstruct UserState {\r\n    uint256 num; // user buyed tickets count\r\n    bool claimed;  // user claimed\r\n}\r\ninterface ILucksExecutor {\r\n\r\n    // ============= events ====================\r\n\r\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\r\n    event CancelTask(uint256 taskId, address seller);\r\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\r\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\r\n    event PickWinner(uint256 taskId, address winner, uint256 number);\r\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\r\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);    \r\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\r\n\r\n    event TransferFee(uint256 taskId, address to, address token, uint256 amount); // for protocol\r\n    event TransferShareAmount(uint256 taskId, address to, address token, uint256 amount); // for winners\r\n    event TransferPayment(uint256 taskId, address to, address token, uint256 amount); // for seller\r\n\r\n    // ============= functions ====================\r\n\r\n    function count() external view returns (uint256);\r\n    function exists(uint256 taskId) external view returns (bool);\r\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\r\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\r\n    function isFail(uint256 taskId) external view returns(bool);\r\n    function getChainId() external view returns (uint16);\r\n\r\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\r\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\r\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\r\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\r\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\r\n\r\n    function claimTokens(uint256[] memory taskIds) external;\r\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\r\n\r\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\r\n}\r\n"
    },
    "contracts/interfaces/IProxyTokenStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IProxyTokenStation {\r\n\r\n    event Deposit(address indexed executor, address indexed user, address token, uint256 amount);\r\n    event Withdraw(address indexed executor, address indexed user, address token, uint256 amount);\r\n\r\n    function deposit(address user, address token, uint256 amount) external payable;\r\n    function withdraw(address user, address token, uint256 amount) external;\r\n}"
    },
    "contracts/interfaces/ILucksHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// Openluck interfaces\r\nimport {TaskItem, TaskExt} from \"./ILucksExecutor.sol\";\r\nimport {ILucksVRF} from \"./ILucksVRF.sol\";\r\nimport {ILucksGroup} from \"./ILucksGroup.sol\";\r\nimport {ILucksPaymentStrategy} from \"./ILucksPaymentStrategy.sol\";\r\nimport {ILucksAuto} from \"./ILucksAuto.sol\";\r\n\r\ninterface ILucksHelper {\r\n\r\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\r\n    function checkAcceptToken(address acceptToken) external view returns (bool);\r\n    function checkNFTContract(address addr) external view returns (bool);\r\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\r\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\r\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\r\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\r\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \r\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\r\n\r\n    function getProtocolFeeRecipient() external view returns (address);\r\n    function getProtocolFee() external view returns (uint256);\r\n    function getMinTargetLimit(address token) external view returns (uint256);\r\n    function getDrawDelay() external view returns (uint32);\r\n\r\n    function getVRF() external view returns (ILucksVRF);\r\n    function getGROUPS() external view returns (ILucksGroup);\r\n    // function getREWARDS() external view returns (ILucksRewards);\r\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\r\n    function getAutoClose() external view returns (ILucksAuto);\r\n    function getAutoDraw() external view returns (ILucksAuto);\r\n}\r\n"
    },
    "contracts/interfaces/ILucksBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenLuck\r\nimport {TaskItem, TaskExt} from \"./ILucksExecutor.sol\";\r\n\r\nstruct lzTxObj {\r\n    uint256 dstGasForCall;\r\n    uint256 dstNativeAmount;\r\n    bytes dstNativeAddr;\r\n    bytes zroPaymentAddr; //  the address of the ZRO token holder who would pay for the transaction\r\n}\r\n\r\ninterface ILucksBridge {\r\n    // ============= events ====================\r\n    event SendMsg(uint8 msgType, uint64 nonce);\r\n\r\n    // ============= Task functions ====================\r\n\r\n    function sendCreateTask(\r\n        uint16 _dstChainId,\r\n        address payable _refundAddress,\r\n        TaskItem memory item,\r\n        TaskExt memory ext,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable;\r\n\r\n    function sendWithdrawNFTs(\r\n        uint16 _dstChainId,\r\n        address payable _refundAddress,\r\n        address payable _user,\r\n        uint256 depositId,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable;\r\n\r\n    // ============= Assets functions ====================\r\n\r\n    function quoteLayerZeroFee(\r\n        uint16 _dstChainId,\r\n        uint8 _functionType,\r\n        string memory _note,\r\n        lzTxObj memory _lzTxParams\r\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\r\n\r\n    function estimateCreateTaskFee(\r\n        uint16 _dstChainId,\r\n        TaskItem memory item,\r\n        TaskExt memory ext,\r\n        lzTxObj memory _lzTxParams\r\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\r\n\r\n    function estimateWithdrawNFTsFee(\r\n        uint16 _dstChainId,\r\n        address payable _user,\r\n        uint256 depositId,\r\n        lzTxObj memory _lzTxParams\r\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/interfaces/ILucksVRF.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ILucksVRF {\r\n\r\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\r\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \r\n\r\n    /**\r\n     * Requests randomness from a user-provided max\r\n     */\r\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\r\n\r\n    /**\r\n     * Views random result\r\n     */\r\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\r\n}"
    },
    "contracts/interfaces/ILucksGroup.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// Openluck interfaces\r\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \"./ILucksExecutor.sol\";\r\nimport {ILucksHelper} from \"./ILucksHelper.sol\";\r\n\r\ninterface ILucksGroup {    \r\n\r\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\r\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \r\n\r\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\r\n   \r\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\r\n    function createGroup(uint256 taskId, uint16 seat) external;\r\n}"
    },
    "contracts/interfaces/ILucksPaymentStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface ILucksPaymentStrategy {\r\n    \r\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\r\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\r\n}"
    },
    "contracts/interfaces/ILucksAuto.sol": {
      "content": "  // SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nstruct Task {\r\n    uint256 endTime;\r\n    uint256 lastTimestamp;\r\n}\r\n\r\ninterface ILucksAuto {\r\n\r\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\r\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\r\n\r\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);\r\n    event MinWaitPeriodUpdated(uint256 oldMinWaitPeriod, uint256 newMinWaitPeriod);\r\n\r\n    event RevertInvoke(uint256 taskId, bytes reason);\r\n\r\n    function addTask(uint256 taskId, uint endTime) external;\r\n    function removeTask(uint256 taskId) external;\r\n    function getQueueTasks() external view returns (uint256[] memory);\r\n\r\n}"
    },
    "contracts/LucksBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\n// imports\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"layerzero-contracts/contracts/lzApp/NonblockingLzApp.sol\";\r\n\r\n// interfaces\r\nimport \"./interfaces/ILucksExecutor.sol\";\r\nimport \"./interfaces/ILucksBridge.sol\";\r\n\r\ncontract LucksBridge is NonblockingLzApp, ILucksBridge {\r\n    using SafeMath for uint256;\r\n    //---------------------------------------------------------------------------\r\n    // CONSTANTS\r\n    uint8 internal constant TYPE_CREATE_TASK = 1;\r\n    uint8 internal constant TYPE_WITHDRAW_NFT = 2;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // VARIABLES\r\n    mapping(uint16 => mapping(uint8 => uint256)) public gasLookup;\r\n    ILucksExecutor public EXECUTOR;\r\n    bool public useLayerZeroToken;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // MODIFIERS\r\n    modifier onlyExecutor() {\r\n        require(msg.sender == address(EXECUTOR), \"Lucks: caller must be LucksExecutor.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _lzEndpoint, address _executor) NonblockingLzApp(_lzEndpoint) {\r\n        require(_executor != address(0x0), \"Lucks: _executor cannot be 0x0\");\r\n        EXECUTOR = ILucksExecutor(_executor);\r\n    }\r\n\r\n    // main method\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        uint8 functionType;\r\n        assembly {\r\n            functionType := mload(add(_payload, 32))\r\n        }\r\n        // try-catch all errors/exceptions\r\n        try EXECUTOR.onLzReceive(functionType, _payload) {\r\n            // do nothing\r\n        } catch {\r\n            // error / exception\r\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\r\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\r\n        }\r\n    }\r\n\r\n    // ============ EXTERNAL functions ============\r\n    // estimateSendFee\r\n\r\n    function quoteLayerZeroFee(uint16 _dstChainId, uint8 _functionType, string memory _note, lzTxObj memory _lzTxParams) \r\n        external view override returns (uint256 nativeFee, uint256 zroFee) {\r\n        bytes memory payload = \"\";\r\n        uint256[] memory amounts = new uint256[](2);\r\n        amounts[0] = 10000;\r\n        amounts[1] = 10000;\r\n\r\n        if (_functionType == TYPE_CREATE_TASK) {\r\n            TaskItem memory item = TaskItem(\r\n                address(0),\r\n                0,\r\n                address(0),\r\n                amounts,\r\n                amounts,\r\n                address(0),\r\n                TaskStatus.Open,\r\n                block.timestamp,\r\n                block.timestamp,\r\n                1000e18,\r\n                1e18,\r\n                1,\r\n                ExclusiveToken(address(0), 1e18),\r\n                0,\r\n                10000\r\n            );\r\n            TaskExt memory ext = TaskExt(1, \"nft collection item title\", _note);\r\n\r\n            payload = abi.encode(TYPE_CREATE_TASK, item, ext);\r\n\r\n        } else if (_functionType == TYPE_WITHDRAW_NFT) {\r\n\r\n            payload = abi.encode(TYPE_WITHDRAW_NFT, address(0), 10000);\r\n\r\n        } else {\r\n            revert(\"Lucks: unsupported function type\");\r\n        }\r\n\r\n        bytes memory lzTxParamBuilt = _txParamBuilder( _dstChainId, _functionType, _lzTxParams);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, useLayerZeroToken, lzTxParamBuilt);\r\n    }\r\n\r\n    function estimateCreateTaskFee(uint16 _dstChainId, TaskItem memory item, TaskExt memory ext, lzTxObj memory _lzTxParams) \r\n        external view override returns (uint256 nativeFee, uint256 zroFee) {\r\n        bytes memory payload = abi.encode(TYPE_CREATE_TASK, item, ext);\r\n        bytes memory lzTxParamBuilt = _txParamBuilder(_dstChainId, TYPE_CREATE_TASK, _lzTxParams);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, useLayerZeroToken, lzTxParamBuilt);\r\n    }\r\n\r\n    function estimateWithdrawNFTsFee(uint16 _dstChainId, address payable _user, uint256 depositId, lzTxObj memory _lzTxParams) \r\n        external view override returns (uint256 nativeFee, uint256 zroFee) {\r\n        bytes memory payload = abi.encode(TYPE_WITHDRAW_NFT, _user, depositId);\r\n        bytes memory lzTxParamBuilt = _txParamBuilder(_dstChainId, TYPE_WITHDRAW_NFT, _lzTxParams);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, useLayerZeroToken,lzTxParamBuilt);\r\n    }\r\n\r\n    function renounceOwnership() public override onlyOwner {}\r\n\r\n    // ============  LOCAL CHAIN (send out message to destination chain)============\r\n\r\n    function sendCreateTask(\r\n        uint16 _dstChainId,\r\n        address payable _refundAddress,\r\n        TaskItem memory item,\r\n        TaskExt memory ext,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable override onlyExecutor {\r\n        bytes memory payload = abi.encode(TYPE_CREATE_TASK, item, ext);\r\n        _call(_dstChainId, TYPE_CREATE_TASK, _refundAddress, _lzTxParams, payload);\r\n    }\r\n\r\n    function sendWithdrawNFTs(\r\n        uint16 _dstChainId,        \r\n        address payable _refundAddress,\r\n        address payable _user,\r\n        uint256 depositId,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable override onlyExecutor {\r\n        bytes memory payload = abi.encode(TYPE_WITHDRAW_NFT, _user, depositId);\r\n        _call(_dstChainId, TYPE_WITHDRAW_NFT, _refundAddress, _lzTxParams, payload);\r\n    }\r\n\r\n    // ============ onlyOwner functions ============\r\n\r\n    function setGasAmount(uint16 _dstChainId, uint8 _functionType, uint256 _gasAmount) external onlyOwner {\r\n        require(\r\n            _functionType >= 1 && _functionType <= 4,\r\n            \"Lucks: invalid _functionType\"\r\n        );\r\n        gasLookup[_dstChainId][_functionType] = _gasAmount;\r\n    }\r\n\r\n    // ============ INTERNAL functions ============\r\n\r\n    function txParamBuilderType1(uint256 _gasAmount) internal pure returns (bytes memory) {\r\n        uint16 txType = 1;\r\n        return abi.encodePacked(txType, _gasAmount);\r\n    }\r\n\r\n    function txParamBuilderType2(uint256 _gasAmount, uint256 _dstNativeAmount, bytes memory _dstNativeAddr) internal pure returns (bytes memory) {\r\n        uint16 txType = 2;\r\n        return abi.encodePacked(txType, _gasAmount, _dstNativeAmount,_dstNativeAddr);\r\n    }\r\n\r\n    function _txParamBuilder(\r\n        uint16 _dstChainId,\r\n        uint8 _type,\r\n        lzTxObj memory _lzTxParams\r\n    ) internal view returns (bytes memory) {\r\n        bytes memory lzTxParam;\r\n        address dstNativeAddr;\r\n        {\r\n            bytes memory dstNativeAddrBytes = _lzTxParams.dstNativeAddr;\r\n            assembly {\r\n                dstNativeAddr := mload(add(dstNativeAddrBytes, 20))\r\n            }\r\n        }\r\n\r\n        uint256 totalGas = gasLookup[_dstChainId][_type].add(_lzTxParams.dstGasForCall);\r\n        if (_lzTxParams.dstNativeAmount > 0 && dstNativeAddr != address(0x0)) {\r\n            lzTxParam = txParamBuilderType2(totalGas, _lzTxParams.dstNativeAmount, _lzTxParams.dstNativeAddr);\r\n        } else {\r\n            lzTxParam = txParamBuilderType1(totalGas);\r\n        }\r\n\r\n        return lzTxParam;\r\n    }\r\n\r\n    function _call(\r\n        uint16 _dstChainId, // dst chainId\r\n        uint8 _type, // function type\r\n        address payable _refundAddress, // _user refundAddress\r\n        lzTxObj memory _lzTxParams,\r\n        bytes memory _payload\r\n    ) internal {\r\n        bytes memory _adapterParams = _txParamBuilder(_dstChainId, _type, _lzTxParams);\r\n        address zroPaymentAddr;\r\n        {\r\n            bytes memory zroPaymentAddrBytes = _lzTxParams.zroPaymentAddr;\r\n            assembly {\r\n                zroPaymentAddr := mload(add(zroPaymentAddrBytes, 20))\r\n            }\r\n        }\r\n        _lzSend(_dstChainId, _payload, _refundAddress, zroPaymentAddr, _adapterParams);\r\n\r\n        uint64 nextNonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\r\n        emit SendMsg(_type, nextNonce);\r\n    }\r\n\r\n    \r\n    /**\r\n    @notice set operator\r\n     */\r\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\r\n        EXECUTOR = _executor;\r\n    }\r\n\r\n    /**\r\n    @notice set useLayerZeroToken\r\n     */\r\n    function setUseLayerZeroToken(bool enable) external onlyOwner {\r\n        useLayerZeroToken = enable;\r\n    }\r\n\r\n}\r\n"
    },
    "layerzero-contracts/contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./LzApp.sol\";\r\n\r\n/*\r\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\r\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\r\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\r\n */\r\nabstract contract NonblockingLzApp is LzApp {\r\n    constructor(address _endpoint) LzApp(_endpoint) {}\r\n\r\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\r\n\r\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\r\n\r\n    // overriding the virtual function in LzReceiver\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // try-catch all errors/exceptions\r\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\r\n            // do nothing\r\n        } catch {\r\n            // error / exception\r\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\r\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\r\n        }\r\n    }\r\n\r\n    function nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual {\r\n        // only internal transaction\r\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public payable virtual {\r\n        // assert there is message to retry\r\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\r\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\r\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\r\n        // clear the stored message\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\r\n        // execute the message. revert if it fails again\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n}\r\n"
    },
    "layerzero-contracts/contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\r\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\r\n\r\n/*\r\n * a generic LzReceiver implementation\r\n */\r\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\r\n    ILayerZeroEndpoint public immutable lzEndpoint;\r\n\r\n    mapping(uint16 => bytes) public trustedRemoteLookup;\r\n\r\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\r\n\r\n    constructor(address _endpoint) {\r\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual override {\r\n        // lzReceive must be called by the endpoint for security\r\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\r\n\r\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\r\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\r\n        require(_srcAddress.length == trustedRemote.length && keccak256(_srcAddress) == keccak256(trustedRemote), \"LzApp: invalid source sending contract\");\r\n\r\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\r\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\r\n        lzEndpoint.send{value: msg.value}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    //---------------------------UserApplication config----------------------------------------\r\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\r\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\r\n    }\r\n\r\n    // generic config for LayerZero user Application\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\r\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\r\n    }\r\n\r\n    function setSendVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setSendVersion(_version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setReceiveVersion(_version);\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\r\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    // allow owner to set it multiple times.\r\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyOwner {\r\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\r\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    //--------------------------- VIEW FUNCTION ----------------------------------------\r\n\r\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\r\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\r\n        return keccak256(trustedSource) == keccak256(_srcAddress);\r\n    }\r\n}\r\n"
    },
    "layerzero-contracts/contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroReceiver {\r\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\r\n    // @param _srcChainId - the source endpoint identifier\r\n    // @param _srcAddress - the source sending contract address from the source chain\r\n    // @param _nonce - the ordered message nonce\r\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\r\n}\r\n"
    },
    "layerzero-contracts/contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroUserApplicationConfig {\r\n    // @notice set the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    // @param _config - configuration in the bytes. can encode arbitrary content.\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\r\n\r\n    // @notice set the send() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    // @notice set the lzReceive() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\r\n    // @param _srcChainId - the chainId of the source chain\r\n    // @param _srcAddress - the contract address of the source contract at the source chain\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n}\r\n"
    },
    "layerzero-contracts/contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\n\r\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\r\n\r\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}\r\n"
    },
    "contracts/lucks/LucksRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\n// Openluck interfaces\r\nimport {ILucksRewards} from \"../interfaces/ILucksRewards.sol\";\r\nimport {Ticket} from \"../interfaces/ILucksExecutor.sol\";\r\nimport {ILucksExecutor, TaskItem, TaskStatus} from \"../interfaces/ILucksExecutor.sol\";\r\n\r\n\r\n/** @title Openluck LucksRewards\r\n * @notice It is the contract for LucksRewards\r\n */\r\ncontract LucksRewards is ILucksRewards {\r\n\r\n    using Counters for Counters.Counter;    \r\n\r\n    ILucksExecutor public EXECUTOR;\r\n\r\n    address public OpenLuckToken;\r\n\r\n    mapping(address => address) private inviters;     // store invite relationship (invitee => inviter)\r\n    mapping(address => uint256) private inviteNums;    // store invter fans count (inviter => invitee count)\r\n    \r\n    constructor(address _executor, address _token) {\r\n        EXECUTOR =  ILucksExecutor(_executor);        \r\n        OpenLuckToken = _token;\r\n    }\r\n\r\n    function getInviter(address invitee) override view public returns (address) {\r\n        return inviters[invitee];\r\n    }\r\n\r\n    function invite(address invitee, address inviter) override public {\r\n        require(inviters[invitee] == address(0), \"Already invite\");\r\n        inviters[invitee] = inviter;\r\n        inviteNums[inviter] += 1;\r\n    }\r\n\r\n    function rewardCreateTask(address seller, uint256 taskId) override public {\r\n        emit RewardCreateTask(seller, taskId);\r\n    }\r\n\r\n    function rewardJoinTask(address user, uint256 taskId, address acceptToken, uint256 amount) override public {\r\n        emit RewardJoinTask(user, taskId, acceptToken, amount);\r\n    }\r\n\r\n    function rewardTaskSucess(uint256 taskId) override public {\r\n        emit RewardTaskSucess(taskId);\r\n    }\r\n\r\n    function rewardTaskFail(uint256 taskId) override public {\r\n        emit RewardTaskFail(taskId);\r\n    } \r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/ILucksRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// Openluck interfaces\r\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \"./ILucksExecutor.sol\";\r\nimport {ILucksHelper} from \"./ILucksHelper.sol\";\r\n\r\ninterface ILucksRewards {        \r\n\r\n    event RewardCreateTask(address seller, uint256 taskId);\r\n    event RewardJoinTask(address user, uint256 taskId, address acceptToken, uint256 amount);\r\n    event RewardTaskSucess(uint256 taskId);\r\n    event RewardTaskFail(uint256 taskId);   \r\n\r\n    function getInviter(address invitee) view external returns (address);\r\n    function invite(address invitee, address inviter) external;\r\n\r\n    function rewardCreateTask(address seller, uint256 taskId) external;\r\n    function rewardJoinTask(address user, uint256 taskId, address acceptToken, uint256 amount) external;\r\n    function rewardTaskSucess(uint256 taskId) external;\r\n    function rewardTaskFail(uint256 taskId) external;   \r\n\r\n}"
    },
    "contracts/lucks/LucksHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\n// Openluck interfaces\r\nimport {ILucksExecutor, TaskItem, TaskExt, TaskStatus} from \"../interfaces/ILucksExecutor.sol\";\r\nimport {ILucksHelper} from \"../interfaces/ILucksHelper.sol\";\r\nimport {ILucksVRF} from \"../interfaces/ILucksVRF.sol\";\r\nimport {ILucksGroup} from \"../interfaces/ILucksGroup.sol\";\r\nimport {ILucksPaymentStrategy} from \"../interfaces/ILucksPaymentStrategy.sol\";\r\nimport {ILucksAuto} from \"../interfaces/ILucksAuto.sol\";\r\n\r\n/** @title Openluck LucksHelper.\r\n * @notice It is the contract for protocol settings\r\n */\r\ncontract LucksHelper is ILucksHelper, Ownable {\r\n    using SafeMath for uint256;\r\n    // ============ Openluck interfaces ============\r\n\r\n    ILucksExecutor public EXECUTOR;\r\n    ILucksVRF public VRF;\r\n    ILucksGroup public GROUPS;\r\n    ILucksPaymentStrategy public STRATEGY;  \r\n\r\n    ILucksAuto public AUTO_CLOSE;  \r\n    ILucksAuto public AUTO_DRAW;  \r\n\r\n    address public feeRecipient;    // protocol fee recipient\r\n\r\n    uint32 public MAX_PER_JOIN_NUM = 10000;    // limit user per jointask num (default 10000), to avoid block fail and huge gas fee\r\n    uint32 public DRAW_DELAY_SEC = 30;    // picker winner need a delay time from task close. (default 30sec)\r\n    uint256 public protocolFee = 200;     // acceptToken (200 = 2%, 1,000 = 10%)\r\n\r\n    mapping(address => bool) public operators;     // protocol income balance (address => bool)\r\n    mapping(address => bool) public acceptTokens;   // accept payment tokens (Chain Token equals to zero address)     \r\n    mapping(address => uint256) public minTargetAmount;  // when seller create task, check the min targetAmount limit (token address => min amount)\r\n\r\n    constructor(\r\n        address[] memory _acceptTokens,\r\n        address _recipient,\r\n        uint256 _fee,\r\n        ILucksExecutor  _executor,\r\n        ILucksVRF _vrf,\r\n        ILucksGroup _groups,\r\n        ILucksPaymentStrategy _strategy,\r\n        ILucksAuto _auto_close,\r\n        ILucksAuto _auto_draw\r\n    ) {\r\n        feeRecipient = _recipient;\r\n        protocolFee = _fee;\r\n        EXECUTOR = _executor;\r\n        VRF = _vrf;        \r\n        GROUPS = _groups;\r\n        STRATEGY = _strategy;\r\n        AUTO_CLOSE = _auto_close;\r\n        AUTO_DRAW = _auto_draw;\r\n        setAcceptTokens(_acceptTokens, true);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == owner() || operators[msg.sender], \"onlyOperator\");\r\n        _;\r\n    }\r\n\r\n    function getMinTargetLimit(address token) external view override returns (uint256) {\r\n        return minTargetAmount[token];\r\n    }\r\n\r\n    function checkPerJoinLimit(uint32 num) public view override returns (bool) {\r\n        return MAX_PER_JOIN_NUM < 1 || num <= MAX_PER_JOIN_NUM;\r\n    }\r\n\r\n    /**\r\n    @notice check acceptToken support\r\n    @param acceptToken token address, blockchain token is address(0)\r\n    @return bool\r\n    */\r\n    function checkAcceptToken(address acceptToken)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return acceptTokens[acceptToken];\r\n    }\r\n\r\n    /**\r\n     * @notice check nft contract, support erc721 & erc1155\r\n     */\r\n    function checkNFTContract(address addr) public view override returns (bool) {\r\n        require(addr != address(0) && Address.isContract(addr), \"Invalid nftContract\");\r\n        require(\r\n            IERC165(addr).supportsInterface(0x80ac58cd) ||  // ERC721 interfaceID\r\n            IERC165(addr).supportsInterface(0xd9b67a26), // ERC1155 interfaceID\r\n            \"Invalid contract\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice check the new task inputs\r\n     */\r\n    function checkNewTask(address user, TaskItem memory item) public view override returns(bool) { \r\n\r\n        require(item.seller != address(0) && item.seller == user, \"Invalid seller address\");      \r\n        require(item.nftChainId > 0, \"Invalid nftChainId\");       \r\n        require(item.tokenIds.length > 0, \"Empty tokenIds\");\r\n        require(block.timestamp < item.endTime, \"Invalid time range\");\r\n        require(item.endTime - block.timestamp > 84600 , \"Duration too short\"); // at least 23.5 hour\r\n        require(item.endTime - block.timestamp < 2678400 , \"Duration too long\"); // 31 days limit\r\n        require(item.price > 0 && item.price < item.targetAmount && item.targetAmount.mod(item.price) == 0,\"Invalid price or targetAmount\");\r\n\r\n        uint num = item.targetAmount.div(item.price);\r\n        require(num > 0 && num <= 100000 && num.mod(10) == 0, \"Invalid num\");\r\n\r\n        require(item.amountCollected == 0, \"Invalid amountCollected\");    \r\n       \r\n        // check nftContract\r\n        require(checkNFTContract(item.nftContract), \"Invalid nftContract\");\r\n        (bool checkState, string memory checkMsg) = checkTokenListing(item.nftContract, item.seller, item.tokenIds, item.tokenAmounts);\r\n        require(checkState, checkMsg);\r\n\r\n        return true;\r\n    }\r\n\r\n    function checkNewTaskExt(TaskExt memory ext) public pure override returns(bool) {\r\n        require(bytes(ext.title).length >=0 && bytes(ext.title).length <= 256, \"Invalid ext title\");\r\n        require(bytes(ext.note).length <= 256, \"Invalid ext note\");\r\n        return true;\r\n    }\r\n\r\n    function checkNewTaskRemote(TaskItem memory item) public view override returns (bool) \r\n    {        \r\n        if (address(item.exclusiveToken.token) != address(0) && item.exclusiveToken.amount > 0) {\r\n            require(Address.isContract(item.exclusiveToken.token), \"Invalid exclusiveToken\");\r\n        }       \r\n        require(checkAcceptToken(item.acceptToken), \"Unsupported acceptToken\");\r\n        uint256 minTarget = minTargetAmount[item.acceptToken];\r\n        require(minTarget == 0 || item.targetAmount >= minTarget, \"Target too small\");\r\n        return true;\r\n    }\r\n\r\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) public view override returns(bool) {\r\n\r\n        require(bytes(note).length <= 256, \"Note too large\");\r\n        require(checkPerJoinLimit(num), \"Over join limit\");                \r\n        require(num > 0, \"Invalid num\");\r\n\r\n        TaskItem memory item = EXECUTOR.getTask(taskId);\r\n\r\n        require(item.seller != user, \"Not allow owner\");\r\n        require(block.timestamp >= item.startTime && block.timestamp <= item.endTime, \"Invalid time range\");\r\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \"Invalid status\");\r\n\r\n        // Calculate number of TOKEN to this contract\r\n        uint256 amount = item.price.mul(num);\r\n        require(amount > 0, \"Invalid amount\");\r\n\r\n        // check Exclusive\r\n        if (address(item.exclusiveToken.token) != address(0) && item.exclusiveToken.amount > 0) {\r\n            require(\r\n                checkExclusive(user, address(item.exclusiveToken.token), item.exclusiveToken.amount),\r\n                \"Not pass EXCLUSIVE\"\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice checking seller listing NFTs ownership and balance\r\n     * @param addr NFT contract address\r\n     * @param tokenIds tokenId array\r\n     * @param amounts tokenId amount array (ERC721 can be null)\r\n     */\r\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) public view override returns (bool, string memory)\r\n    {\r\n        if (IERC165(addr).supportsInterface(0x80ac58cd)) {         // ERC721 interfaceID\r\n            for (uint256 i = 0; i < tokenIds.length; i++) {\r\n                if (IERC721(addr).ownerOf(tokenIds[i]) != seller) {\r\n                    return (false, \"Token listed or not owner\");\r\n                }               \r\n            }\r\n        } else if (IERC165(addr).supportsInterface(0xd9b67a26)) {  // ERC1155 interfaceID\r\n            require(tokenIds.length == amounts.length, \"Invalid ids len\");\r\n            for (uint256 i = 0; i < tokenIds.length; i++) {\r\n                if (!(IERC1155(addr).balanceOf(seller, tokenIds[i]) >= amounts[i] && amounts[i] > 0)) {\r\n                    return (false, \"Invalid amount or balance\");\r\n                }\r\n            }\r\n        }\r\n        return (true ,\"\");\r\n    }\r\n\r\n    function checkExclusive(address account, address token, uint256 amount) override public view returns (bool){\r\n        if (amount > 0 && Address.isContract(token)) {\r\n            if (IERC165(token).supportsInterface(0x80ac58cd)) {\r\n                return IERC721(token).balanceOf(account) >= amount;\r\n            }\r\n            return IERC20(token).balanceOf(account) >= amount;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function getProtocolFeeRecipient()\r\n        external\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        return feeRecipient;\r\n    }\r\n\r\n    /**\r\n    @notice get protocol fee for eache success TaskItem payment, default is 2%\r\n    @return fee (200 = 25%, 1,000 = 10%)\r\n    */\r\n    function getProtocolFee() external view override returns (uint256) {\r\n        return protocolFee;\r\n    }\r\n\r\n    /**\r\n    @notice get Draw Delay second for security\r\n     */\r\n    function getDrawDelay() external view override returns (uint32) {\r\n        return DRAW_DELAY_SEC;\r\n    }\r\n\r\n    /**\r\n    @notice get ILucksVRF instance  \r\n    */\r\n    function getVRF() public view override returns (ILucksVRF) {\r\n        return VRF;\r\n    }\r\n\r\n    /**\r\n    @notice get ILucksGroup instance  \r\n    */\r\n    function getGROUPS() public view override returns (ILucksGroup) {\r\n        return GROUPS;\r\n    }\r\n\r\n    /**\r\n    @notice get ILucksPaymentStrategy instance  \r\n    */\r\n    function getSTRATEGY() public view override returns (ILucksPaymentStrategy) {\r\n        return STRATEGY;\r\n    }\r\n\r\n    function getAutoClose() external view override returns (ILucksAuto) {\r\n        return AUTO_CLOSE;\r\n    }\r\n\r\n    function getAutoDraw() external view override returns (ILucksAuto) {\r\n        return AUTO_DRAW;\r\n    }\r\n\r\n    //  ============ onlyOwner  functions  ============\r\n\r\n    /**\r\n    @notice set operator\r\n     */\r\n    function setOperator(address addr, bool enable) external onlyOwner {\r\n        operators[addr] = enable;\r\n    }\r\n\r\n    /**\r\n    @notice set the ProtocolFeeRecipient\r\n     */\r\n    function setProtocolFeeRecipient(address addr) external onlyOwner {\r\n        feeRecipient = addr;\r\n    }\r\n\r\n    /**\r\n    @notice set protocol fee for eache success TaskItem payment, default is 5%\r\n    @param fee fee (500 = 5%, 1,000 = 10%)\r\n    */\r\n    function setProtocolFee(uint256 fee) external onlyOwner {\r\n        protocolFee = fee;\r\n    }\r\n\r\n    //  ============ onlyOwner & onlyOperator functions  ============\r\n\r\n    /**\r\n    @notice set the set MAX_PER_JOIN_NUM\r\n     */\r\n    function setJoinLimitNum(uint32 num) external onlyOperator {\r\n        MAX_PER_JOIN_NUM = num;\r\n    }\r\n\r\n    /**\r\n    @notice set Draw Delay for security\r\n     */\r\n    function setDrawDelay(uint32 second) external onlyOperator {\r\n        DRAW_DELAY_SEC = second;\r\n    }\r\n\r\n    /**\r\n    @notice set the acceptTokens\r\n     */\r\n    function setAcceptTokens(address[] memory tokens, bool enable)\r\n        public\r\n        onlyOperator\r\n    {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            acceptTokens[tokens[i]] = enable;\r\n        }\r\n    }\r\n\r\n\r\n    function setMinTargetAmount(address[] memory tokens, uint256[] memory amounts)\r\n        public\r\n        onlyOperator\r\n    {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            minTargetAmount[tokens[i]] = amounts[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice set operator\r\n     */\r\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\r\n        EXECUTOR = _executor;\r\n    }\r\n\r\n    /**\r\n    @notice set the VRF\r\n     */\r\n    function setLucksVRF(ILucksVRF addr) external onlyOperator {\r\n        VRF = addr;\r\n    }\r\n\r\n    /**\r\n    @notice set the LucksGroup\r\n     */\r\n    function setLucksGroup(ILucksGroup addr) external onlyOperator {\r\n        GROUPS = addr;\r\n    }\r\n\r\n    /**\r\n    @notice set the PaymentStrategy\r\n     */\r\n    function setPaymentStrategy(ILucksPaymentStrategy addr) external onlyOperator {\r\n        STRATEGY = addr;\r\n    }\r\n\r\n    function setLucksAuto(ILucksAuto _auto_close, ILucksAuto _auto_draw) external onlyOperator {\r\n        AUTO_CLOSE = _auto_close;\r\n        AUTO_DRAW = _auto_draw;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/lucks/LucksAutoDrawTask.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\n// Chainlink contracts\r\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\r\n\r\n// Openluck interfaces\r\nimport {ILucksExecutor, TaskItem} from \"../interfaces/ILucksExecutor.sol\";\r\nimport {ILucksAuto,Task} from \"../interfaces/ILucksAuto.sol\";\r\nimport {ILucksBridge, lzTxObj} from \"../interfaces/ILucksBridge.sol\";\r\nimport \"../libraries/SortedLinkMap.sol\";\r\n\r\ncontract LucksAutoDrawTask is ILucksAuto, Ownable, Pausable, KeeperCompatibleInterface {\r\n\r\n    using SortedLinkMap for SortedLinkMap.SortedMap;    \r\n\r\n    SortedLinkMap.SortedMap private taskList;\r\n    \r\n    uint256 public BATCH_PERFORM_LIMIT = 10; // perform limist, default 10\r\n    uint256 public DST_GAS_AMOUNT = 550000; // layer zero dstGasAmount\r\n\r\n    uint16 public immutable lzChainId;\r\n\r\n    address public KEEPER; // chainLink keeper Registry Address\r\n    ILucksExecutor public EXECUTOR;    \r\n    ILucksBridge public BRIDGE;\r\n\r\n    /**\r\n    * @param _keeperRegAddr The address of the keeper registry contract\r\n    * @param _executor The LucksExecutor contract\r\n    * @param _bridge The LucksBridge contract\r\n    */\r\n    constructor(address _keeperRegAddr, ILucksExecutor _executor, ILucksBridge _bridge, uint16 _lzChainId) {        \r\n        KEEPER = _keeperRegAddr;\r\n        EXECUTOR = _executor;\r\n        BRIDGE = _bridge;\r\n        lzChainId = _lzChainId;\r\n    }\r\n\r\n\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == KEEPER || msg.sender == owner(), \"onlyKeeperRegistry\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExecutor() {\r\n        require(msg.sender == address(EXECUTOR) || msg.sender == owner(), \"onlyExecutor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Receive funds\r\n    */\r\n    receive() external payable {\r\n        emit FundsAdded(msg.value, address(this).balance, msg.sender);\r\n    }\r\n\r\n    //  ============ Public  functions  ============\r\n\r\n     function size() external view returns(uint256) {\r\n        return taskList.count;\r\n    }\r\n\r\n    function first() external view returns(uint256) {\r\n        return taskList.first();\r\n    }\r\n\r\n    function next(uint256 taskId) external view returns(uint256) {\r\n        return taskList.next(taskId);\r\n    }    \r\n\r\n    function get(uint256 taskId) external view returns(uint256) {\r\n        return taskList.nodes[taskId].value;\r\n    }\r\n\r\n    function addTask(uint256 taskId, uint endTime) external override onlyExecutor {    \r\n        if (taskId > 0 && endTime > 0) {            \r\n            taskList.add(taskId, endTime);\r\n        }\r\n    }\r\n\r\n    function removeTask(uint256 taskId) external override onlyExecutor {        \r\n        _removeTask(taskId);\r\n    }\r\n\r\n    function getQueueTasks() public override view returns (uint256[] memory) {\r\n\r\n        uint256[] memory ids = new uint256[](BATCH_PERFORM_LIMIT);\r\n\r\n        uint256 count = 0;\r\n        uint taskId = taskList.first();\r\n       \r\n        while (taskId > 0 && count < BATCH_PERFORM_LIMIT) {\r\n                  \r\n            if (taskList.nodes[taskId].value <= block.timestamp) {                \r\n                ids[count] = taskId;    \r\n                count++;                   \r\n            }else {\r\n                break;\r\n            }\r\n            taskId = taskList.next(taskId);           \r\n        }\r\n       \r\n        if (count != BATCH_PERFORM_LIMIT) {\r\n            assembly {\r\n                mstore(ids, count)\r\n            }\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    //  ============ internal  functions  ============\r\n\r\n    function _removeTask(uint256 taskId) internal {                \r\n        taskList.remove(taskId);\r\n    }\r\n\r\n    function invokeTasks(uint256[] memory _taskIds) internal {\r\n\r\n        lzTxObj memory _lzTxObj = lzTxObj(DST_GAS_AMOUNT, 0, bytes(\"0x\"), bytes(\"0x\"));\r\n              \r\n        for (uint256 i = 0; i < _taskIds.length; i++) {\r\n\r\n            uint256 taskId = _taskIds[i];\r\n            _removeTask(taskId);\r\n\r\n            uint256 quoteLayerZeroFee = 0;\r\n            TaskItem memory item = EXECUTOR.getTask(taskId);\r\n            if (item.nftChainId != lzChainId) {\r\n                if (address(BRIDGE) != address(0)) {\r\n                    (quoteLayerZeroFee,) = BRIDGE.quoteLayerZeroFee(item.nftChainId, 2, \"\", _lzTxObj);\r\n                }\r\n            }\r\n\r\n            if (address(this).balance < quoteLayerZeroFee) {\r\n                emit RevertInvoke(taskId, \"AutoDraw: not enough fees\");\r\n            }            \r\n            else {             \r\n\r\n                try EXECUTOR.pickWinner{value: quoteLayerZeroFee}(taskId, _lzTxObj){\r\n\r\n                } catch(bytes memory reason) {\r\n                    emit RevertInvoke(taskId, reason);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //  ============ Keeper  functions  ============\r\n\r\n    function checkUpkeep(bytes calldata /* checkData */) external view override whenNotPaused returns (bool upkeepNeeded, bytes memory performData) {\r\n        uint256[] memory ids = getQueueTasks();\r\n        upkeepNeeded = ids.length > 0;\r\n        performData = abi.encode(ids);\r\n        return (upkeepNeeded, performData);\r\n    }\r\n\r\n    function performUpkeep(bytes calldata performData) external override whenNotPaused onlyKeeper {\r\n        uint256[] memory ids = abi.decode(performData, (uint256[]));\r\n        invokeTasks(ids);\r\n    }\r\n\r\n    //  ============ onlyOwner  functions  ============\r\n    \r\n    /**\r\n    * @notice Pauses the contract, which prevents executing performUpkeep\r\n    */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n    * @notice Unpauses the contract\r\n    */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n    * @notice Withdraws the contract balance\r\n    * @param amount The amount of eth (in wei) to withdraw\r\n    * @param payee The address to pay\r\n    */\r\n    function withdraw(uint256 amount, address payable payee) external onlyOwner {\r\n        require(payee != address(0));\r\n        emit FundsWithdrawn(amount, payee);\r\n        payee.transfer(amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the keeper registry address\r\n    */\r\n    function setKeeper(address _keeperRegAddr) public onlyOwner {\r\n        require(_keeperRegAddr != address(0));\r\n        emit KeeperRegistryAddressUpdated(KEEPER, _keeperRegAddr);\r\n        KEEPER = _keeperRegAddr;\r\n    }\r\n\r\n    function setBatchPerformLimist(uint256 num) public onlyOwner {      \r\n        require(num > 0, \"Invalid limit num\");\r\n        BATCH_PERFORM_LIMIT = num;\r\n    }\r\n\r\n    function setDstGasAmount(uint256 amount) public onlyOwner {      \r\n        DST_GAS_AMOUNT = amount;\r\n    }\r\n\r\n    /**\r\n    @notice set operator\r\n     */\r\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\r\n        EXECUTOR = _executor;\r\n    }\r\n\r\n    /**\r\n    @notice set BRIDGE\r\n     */\r\n    function setBridge(ILucksBridge _bridge) external onlyOwner {\r\n        BRIDGE = _bridge;\r\n    }\r\n}\r\n\r\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./KeeperBase.sol\";\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\n\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\n"
    },
    "contracts/libraries/SortedLinkMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary SortedLinkMap {\r\n\r\n    struct Item {        \r\n        uint id;\r\n        uint value;\r\n        uint leftId;\r\n    }\r\n\r\n    uint constant None = uint(0);\r\n\r\n    struct SortedMap {\r\n        uint count;\r\n        Item max;\r\n        mapping(uint => uint) keys; // id => id , linked list\r\n        mapping(uint => Item) nodes; // id => value item\r\n    }\r\n    \r\n    function add(SortedMap storage self, uint id, uint value) internal {                \r\n\r\n        require(id > 0, \"require id > 0\");\r\n        \r\n        if (self.nodes[id].value > 0){\r\n            // not allow duplicate key\r\n            return;\r\n        }\r\n\r\n        uint leftId = findPrevByValue(self, value);\r\n        uint rightId = next(self, leftId);\r\n\r\n        // update prev item link\r\n        self.keys[leftId] = id;\r\n\r\n        // update current item\r\n        self.keys[id] = rightId;        \r\n        self.nodes[id] = Item(id, value, leftId);   \r\n\r\n        // update max item\r\n        if (rightId == None) {\r\n            self.max.id = id;\r\n            self.max.leftId = leftId;\r\n            self.max.value = value;\r\n        }        \r\n        else {\r\n            // upate next item link\r\n            self.nodes[rightId].leftId = id;   \r\n        }\r\n\r\n        // update counts\r\n        self.count ++;                    \r\n    }\r\n\r\n    function remove(SortedMap storage self, uint id) internal {\r\n\r\n        if (exists(self, id)) {\r\n\r\n            delete self.nodes[id]; // remove value\r\n            delete self.keys[id]; // remove key\r\n\r\n            uint leftId = prev(self, id);\r\n            uint rightId = next(self, id);\r\n\r\n            self.keys[leftId] = rightId;\r\n\r\n            if (rightId > 0) {\r\n                self.nodes[rightId].leftId = leftId;\r\n            }\r\n\r\n            self.count --;\r\n        }\r\n    }\r\n\r\n    function exists(SortedMap storage self, uint id) internal view returns(bool) {\r\n        require(id > 0);\r\n        return self.nodes[id].value > 0;\r\n    }\r\n\r\n    function first(SortedMap storage self) internal view returns(uint) {\r\n        return next(self, 0);\r\n    }\r\n       \r\n    function last(SortedMap storage self) internal view returns(uint) {\r\n        return self.max.id;\r\n    }\r\n\r\n    function size(SortedMap storage self) internal view returns(uint) {\r\n        return self.count;\r\n    }\r\n\r\n    function findPrevByValue(SortedMap storage self, uint target) internal view returns(uint256) {  \r\n\r\n        require(target > 0, \"require target > 0\");\r\n\r\n        if (self.count == 0) return None;\r\n        \r\n        // try to match last item\r\n        uint lastId = self.max.id;\r\n        uint lastValue = self.max.value;\r\n        if (target >= lastValue) {            \r\n            return lastId; // return max\r\n        }\r\n\r\n        // try to match first item\r\n        uint firstId = first(self);\r\n        uint firsValue = self.nodes[firstId].value;\r\n        if (target <= firsValue) {\r\n            return None;  // return head\r\n        }\r\n\r\n        uint mid = (firsValue + lastValue) >> 1;\r\n\r\n        if (target >= mid) {\r\n            // find prev item step by step (right to left)\r\n            uint curentId = lastId;\r\n            while (curentId > 0) {\r\n                curentId = prev(self, curentId);\r\n                if (curentId > 0 && target >= self.nodes[curentId].value) {\r\n                    return curentId;\r\n                }        \r\n            }\r\n        }\r\n        else {\r\n            // find next item step by step (left to right)\r\n            uint curentId = firstId;\r\n            while (curentId > 0) { // the lastId node is zero\r\n                curentId = next(self, curentId);\r\n                if (curentId > 0 && target >= self.nodes[curentId].value) {\r\n                    return curentId;\r\n                }        \r\n            }\r\n        }\r\n\r\n        return None;\r\n    }\r\n\r\n    function prev(SortedMap storage self, uint id) internal view returns(uint256) {\r\n        if (exists(self, id)) {\r\n            return self.nodes[id].leftId;\r\n        }  \r\n        return None;     \r\n    }\r\n\r\n    function next(SortedMap storage self, uint id) internal view returns(uint256) {\r\n        uint nextId = self.keys[id];\r\n        return nextId;\r\n    }  \r\n\r\n    function get(SortedMap storage self, uint id) internal view returns(Item memory) {\r\n        return self.nodes[id];\r\n    }  \r\n}"
    },
    "@chainlink/contracts/src/v0.8/KeeperBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract KeeperBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/lucks/LucksAutoCloseTask.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\n// Chainlink contracts\r\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\r\n\r\n// Openluck interfaces\r\nimport {ILucksExecutor, TaskItem} from \"../interfaces/ILucksExecutor.sol\";\r\nimport {ILucksAuto,Task} from \"../interfaces/ILucksAuto.sol\";\r\nimport {lzTxObj} from \"../interfaces/ILucksBridge.sol\";\r\nimport \"../libraries/SortedLinkMap.sol\";\r\n\r\ncontract LucksAutoCloseTask is ILucksAuto, Ownable, Pausable, KeeperCompatibleInterface {\r\n\r\n    using SortedLinkMap for SortedLinkMap.SortedMap;    \r\n\r\n    SortedLinkMap.SortedMap private taskList;\r\n\r\n    // uint256 public WAIT_PERIOD_SEC = 300; // set WAIT_PERIOD_SEC to avoid repeated execution, default 5min\r\n    uint256 public BATCH_PERFORM_LIMIT = 10; // perform limist, default 10\r\n    uint256 public DST_GAS_AMOUNT = 0; // layer zero dstGasAmount\r\n\r\n    address public KEEPER; // chainLink keeper Registry Address\r\n    ILucksExecutor public EXECUTOR;    \r\n\r\n    /**\r\n    * @param _keeperRegAddr The address of the keeper registry contract\r\n    * @param _executor The LucksExecutor contract\r\n    */\r\n    constructor(address _keeperRegAddr, ILucksExecutor _executor) {        \r\n        KEEPER = _keeperRegAddr;\r\n        EXECUTOR = _executor;\r\n    }\r\n\r\n\r\n    modifier onlyKeeper() {\r\n        require(msg.sender == KEEPER || msg.sender == owner(), \"onlyKeeperRegistry\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyExecutor() {\r\n        require(msg.sender == address(EXECUTOR) || msg.sender == owner(), \"onlyExecutor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Receive funds\r\n    */\r\n    receive() external payable {\r\n        emit FundsAdded(msg.value, address(this).balance, msg.sender);\r\n    }\r\n\r\n    //  ============ Public  functions  ============\r\n\r\n    function size() external view returns(uint256) {\r\n        return taskList.count;\r\n    }\r\n\r\n    function first() external view returns(uint256) {\r\n        return taskList.first();\r\n    }\r\n\r\n    function next(uint256 taskId) external view returns(uint256) {\r\n        return taskList.next(taskId);\r\n    }    \r\n\r\n    function get(uint256 taskId) external view returns(uint256) {\r\n        return taskList.nodes[taskId].value;\r\n    }\r\n\r\n    function addTask(uint256 taskId, uint endTime) external override onlyExecutor {    \r\n        if (taskId > 0 && endTime > 0) {            \r\n            taskList.add(taskId, endTime);\r\n        }\r\n    }\r\n\r\n    function removeTask(uint256 taskId) external override onlyExecutor {        \r\n        _removeTask(taskId);\r\n    }\r\n\r\n    function getQueueTasks() public override view returns (uint256[] memory) {\r\n\r\n        uint256[] memory ids = new uint256[](BATCH_PERFORM_LIMIT);\r\n\r\n        uint256 count = 0;\r\n        uint taskId = taskList.first();\r\n       \r\n        while (taskId > 0 && count < BATCH_PERFORM_LIMIT) {\r\n                  \r\n            if (taskList.nodes[taskId].value <= block.timestamp) {                \r\n                ids[count] = taskId;    \r\n                count++;                   \r\n            }else {\r\n                break;\r\n            }\r\n            taskId = taskList.next(taskId);           \r\n        }\r\n       \r\n        if (count != BATCH_PERFORM_LIMIT) {\r\n            assembly {\r\n                mstore(ids, count)\r\n            }\r\n        }\r\n        return ids;\r\n    }\r\n\r\n    //  ============ internal  functions  ============\r\n\r\n    function _removeTask(uint256 taskId) internal {                \r\n        taskList.remove(taskId);\r\n    }\r\n\r\n    function invokeTasks(uint256[] memory _taskIds) internal {\r\n\r\n        lzTxObj memory _lzTxObj = lzTxObj(DST_GAS_AMOUNT, 0, bytes(\"0x\"), bytes(\"0x\"));\r\n\r\n         for (uint256 i = 0; i < _taskIds.length; i++) {\r\n\r\n            uint256 taskId = _taskIds[i];\r\n            _removeTask(taskId);\r\n\r\n            try EXECUTOR.closeTask(taskId, _lzTxObj) {\r\n         \r\n            } catch(bytes memory reason) {\r\n                emit RevertInvoke(taskId, reason);\r\n            }            \r\n        }\r\n    }\r\n\r\n    //  ============ Keeper  functions  ============\r\n\r\n    function checkUpkeep(bytes calldata /* checkData */) external view override whenNotPaused returns (bool upkeepNeeded, bytes memory performData) {\r\n        uint256[] memory ids = getQueueTasks();\r\n        upkeepNeeded = ids.length > 0;\r\n        performData = abi.encode(ids);\r\n        return (upkeepNeeded, performData);\r\n    }\r\n\r\n    function performUpkeep(bytes calldata performData) external override whenNotPaused onlyKeeper {\r\n        uint256[] memory ids = abi.decode(performData, (uint256[]));\r\n        invokeTasks(ids);\r\n    }\r\n\r\n    //  ============ onlyOwner  functions  ============\r\n    \r\n    /**\r\n    * @notice Pauses the contract, which prevents executing performUpkeep\r\n    */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n    * @notice Unpauses the contract\r\n    */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n    * @notice Withdraws the contract balance\r\n    * @param amount The amount of eth (in wei) to withdraw\r\n    * @param payee The address to pay\r\n    */\r\n    function withdraw(uint256 amount, address payable payee) external onlyOwner {\r\n        require(payee != address(0));\r\n        emit FundsWithdrawn(amount, payee);\r\n        payee.transfer(amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the keeper registry address\r\n    */\r\n    function setKeeper(address _keeperRegAddr) public onlyOwner {\r\n        require(_keeperRegAddr != address(0));\r\n        emit KeeperRegistryAddressUpdated(KEEPER, _keeperRegAddr);\r\n        KEEPER = _keeperRegAddr;\r\n    }\r\n\r\n    // function setWaitPeriod(uint256 second) public onlyOwner {      \r\n    //     WAIT_PERIOD_SEC = second;\r\n    // }\r\n\r\n    function setBatchPerformLimist(uint256 num) public onlyOwner {      \r\n        require(num > 0, \"Invalid limit num\");\r\n        BATCH_PERFORM_LIMIT = num;\r\n    }\r\n\r\n    function setDstGasAmount(uint256 amount) public onlyOwner {      \r\n        DST_GAS_AMOUNT = amount;\r\n    }\r\n\r\n    /**\r\n    @notice set operator\r\n     */\r\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\r\n        EXECUTOR = _executor;\r\n    }\r\n}\r\n\r\n"
    },
    "contracts/token/OpenLuckToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"layerzero-contracts/contracts/token/oft/extension/BasedOFT.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\n\r\ncontract OpenLuckToken is BasedOFT, Pausable {\r\n\r\n    uint256 public immutable SUPPLY_CAP;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _lzEndpoint _lzEndpoint address\r\n     * @param _premintReceiver address that receives the premint\r\n     * @param _premintAmount amount to premint\r\n     * @param _cap supply cap (to prevent abusive mint)\r\n     */\r\n    constructor(\r\n        address _lzEndpoint,\r\n        address _premintReceiver,\r\n        uint256 _premintAmount,\r\n        uint256 _cap\r\n    ) BasedOFT(\"OpenLuckToken\", \"LUCK\", _lzEndpoint) {    \r\n        require(_cap > _premintAmount, \"Cap limit\");  \r\n        _mint(_premintReceiver, _premintAmount);\r\n        SUPPLY_CAP = _cap;\r\n    }\r\n\r\n    /**\r\n     * @notice Mint tokens\r\n     * @param account address to receive tokens\r\n     * @param amount amount to mint\r\n     * @return status true if mint is successful, false if not\r\n     */\r\n    function mint(address account, uint256 amount) external onlyOwner returns (bool status) {\r\n        if (totalSupply() + amount <= SUPPLY_CAP) {\r\n            _mint(account, amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual override whenNotPaused {\r\n        super._debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n    }\r\n\r\n    function pauseSendTokens(bool pause) external onlyOwner {\r\n        pause ? _pause() : _unpause();\r\n    }\r\n}\r\n"
    },
    "layerzero-contracts/contracts/token/oft/extension/BasedOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFT.sol\";\r\n\r\ncontract BasedOFT is OFT {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) OFT(_name, _symbol, _lzEndpoint) {}\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        unchecked {\r\n            return totalSupply() - balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _transfer(_from, address(this), _amount);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\r\n        _transfer(address(this), _toAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "layerzero-contracts/contracts/token/oft/OFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"./OFTCore.sol\";\r\nimport \"./IOFT.sol\";\r\n\r\n// override decimal() function is needed\r\ncontract OFT is OFTCore, ERC20, IOFT {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC20(_name, _symbol) OFTCore(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\r\n        return interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _burn(_from, _amount);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\r\n        _mint(_toAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "layerzero-contracts/contracts/token/oft/OFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../lzApp/NonblockingLzApp.sol\";\r\nimport \"./IOFTCore.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract OFTCore is NonblockingLzApp, ERC165, IOFTCore {\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for send()\r\n        bytes memory payload = abi.encode(_toAddress, _amount);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (bytes, uint));\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        _creditTo(_srcChainId, toAddress, amount);\r\n\r\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, amount, _nonce);\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        _debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n\r\n        bytes memory payload = abi.encode(_toAddress, _amount);\r\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n\r\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\r\n        emit SendToChain(_from, _dstChainId, _toAddress, _amount, nonce);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual;\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual;\r\n}\r\n"
    },
    "layerzero-contracts/contracts/token/oft/IOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IOFTCore.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface of the OFT standard\r\n */\r\ninterface IOFT is IOFTCore, IERC20 {\r\n\r\n}\r\n"
    },
    "layerzero-contracts/contracts/token/oft/IOFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the IOFT core standard\r\n */\r\ninterface IOFTCore is IERC165 {\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _amount - amount of the tokens to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    /**\r\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_from` the owner of token\r\n     * `_dstChainId` the destination chain identifier\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_amount` the quantity of tokens in wei\r\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev returns the circulating amount of tokens on current chain\r\n     */\r\n    function circulatingSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _amount, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\r\n     * `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _amount, uint64 _nonce);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/mocks/LZEndpointMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nimport \"layerzero-contracts/contracts/interfaces/ILayerZeroReceiver.sol\";\r\nimport \"layerzero-contracts/contracts/interfaces/ILayerZeroEndpoint.sol\";\r\n\r\n/*\r\nmocking multi endpoint connection.\r\n- send() will short circuit to lzReceive() directly\r\n- no reentrancy guard. the real LayerZero endpoint on main net has a send and receive guard, respectively.\r\nif we run a ping-pong-like application, the recursive call might use all gas limit in the block.\r\n- not using any messaging library, hence all messaging library func, e.g. estimateFees, version, will not work\r\n*/\r\ncontract LZEndpointMock is ILayerZeroEndpoint {\r\n    mapping(address => address) public lzEndpointLookup;\r\n\r\n    uint16 public mockChainId;\r\n    address payable public mockOracle;\r\n    address payable public mockRelayer;\r\n    uint public mockBlockConfirmations;\r\n    uint16 public mockLibraryVersion;\r\n    uint public mockStaticNativeFee;\r\n    uint16 public mockLayerZeroVersion;\r\n    uint public nativeFee;\r\n    uint public zroFee;\r\n    bool nextMsgBLocked;\r\n\r\n    struct StoredPayload {\r\n        uint64 payloadLength;\r\n        address dstAddress;\r\n        bytes32 payloadHash;\r\n    }\r\n\r\n    struct QueuedPayload {\r\n        address dstAddress;\r\n        uint64 nonce;\r\n        bytes payload;\r\n    }\r\n\r\n    // inboundNonce = [srcChainId][srcAddress].\r\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\r\n    // outboundNonce = [dstChainId][srcAddress].\r\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\r\n    // storedPayload = [srcChainId][srcAddress]\r\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\r\n    // msgToDeliver = [srcChainId][srcAddress]\r\n    mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;\r\n\r\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\r\n    event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);\r\n    event PayloadStored(uint16 srcChainId, bytes srcAddress, address dstAddress, uint64 nonce, bytes payload, bytes reason);\r\n\r\n    constructor(uint16 _chainId) {\r\n        mockStaticNativeFee = 42;\r\n        mockLayerZeroVersion = 1;\r\n        mockChainId = _chainId;\r\n    }\r\n\r\n    // mock helper to set the value returned by `estimateNativeFees`\r\n    function setEstimatedFees(uint _nativeFee, uint _zroFee) public {\r\n        nativeFee = _nativeFee;\r\n        zroFee = _zroFee;\r\n    }\r\n\r\n    function getChainId() external view override returns (uint16) {\r\n        return mockChainId;\r\n    }\r\n\r\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\r\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\r\n    }\r\n\r\n    function send(\r\n        uint16 _chainId,\r\n        bytes calldata _destination,\r\n        bytes calldata _payload,\r\n        address payable, // _refundAddress\r\n        address, // _zroPaymentAddress\r\n        bytes memory _adapterParams\r\n    ) external payable override {\r\n        address destAddr = packedBytesToAddr(_destination);\r\n        address lzEndpoint = lzEndpointLookup[destAddr];\r\n\r\n        require(lzEndpoint != address(0), \"LayerZeroMock: destination LayerZero Endpoint not found\");\r\n\r\n        require(msg.value >= nativeFee * _payload.length, \"LayerZeroMock: not enough native for fees\");\r\n\r\n        uint64 nonce;\r\n        {\r\n            nonce = ++outboundNonce[_chainId][msg.sender];\r\n        }\r\n\r\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\r\n        {\r\n            uint extraGas;\r\n            uint dstNative;\r\n            address dstNativeAddr;\r\n            assembly {\r\n                extraGas := mload(add(_adapterParams, 34))\r\n                dstNative := mload(add(_adapterParams, 66))\r\n                dstNativeAddr := mload(add(_adapterParams, 86))\r\n            }\r\n\r\n            // to simulate actually sending the ether, add a transfer call and ensure the LZEndpointMock contract has an ether balance\r\n        }\r\n\r\n        bytes memory bytesSourceUserApplicationAddr = addrToPackedBytes(address(msg.sender)); // cast this address to bytes\r\n\r\n        // not using the extra gas parameter because this is a single tx call, not split between different chains\r\n        // LZEndpointMock(lzEndpoint).receivePayload(mockChainId, bytesSourceUserApplicationAddr, destAddr, nonce, extraGas, _payload);\r\n        LZEndpointMock(lzEndpoint).receivePayload(mockChainId, bytesSourceUserApplicationAddr, destAddr, nonce, 0, _payload);\r\n    }\r\n\r\n    function receivePayload(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        address _dstAddress,\r\n        uint64 _nonce,\r\n        uint, /*_gasLimit*/\r\n        bytes calldata _payload\r\n    ) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n\r\n        // assert and increment the nonce. no message shuffling\r\n        require(_nonce == ++inboundNonce[_srcChainId][_srcAddress], \"LayerZero: wrong nonce\");\r\n\r\n        // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst\r\n        if (sp.payloadHash != bytes32(0)) {\r\n            QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];\r\n            QueuedPayload memory newMsg = QueuedPayload(_dstAddress, _nonce, _payload);\r\n\r\n            // warning, might run into gas issues trying to forward through a bunch of queued msgs\r\n            // shift all the msgs over so we can treat this like a fifo via array.pop()\r\n            if (msgs.length > 0) {\r\n                // extend the array\r\n                msgs.push(newMsg);\r\n\r\n                // shift all the indexes up for pop()\r\n                for (uint i = 0; i < msgs.length - 1; i++) {\r\n                    msgs[i + 1] = msgs[i];\r\n                }\r\n\r\n                // put the newMsg at the bottom of the stack\r\n                msgs[0] = newMsg;\r\n            } else {\r\n                msgs.push(newMsg);\r\n            }\r\n        } else if (nextMsgBLocked) {\r\n            storedPayload[_srcChainId][_srcAddress] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\r\n            emit PayloadStored(_srcChainId, _srcAddress, _dstAddress, _nonce, _payload, bytes(\"\"));\r\n            // ensure the next msgs that go through are no longer blocked\r\n            nextMsgBLocked = false;\r\n        } else {\r\n            // we ignore the gas limit because this call is made in one tx due to being \"same chain\"\r\n            // ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\r\n            ILayerZeroReceiver(_dstAddress).lzReceive(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\r\n        }\r\n    }\r\n\r\n    // used to simulate messages received get stored as a payload\r\n    function blockNextMsg() external {\r\n        nextMsgBLocked = true;\r\n    }\r\n\r\n    function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint) {\r\n        return msgsToDeliver[_srcChainId][_srcAddress].length;\r\n    }\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16, address, bytes memory _payload, bool, bytes memory) external view override returns (uint _nativeFee, uint _zroFee) {\r\n        _nativeFee = nativeFee * _payload.length;\r\n        _zroFee = zroFee;\r\n    }\r\n\r\n    // give 20 bytes, return the decoded address\r\n    function packedBytesToAddr(bytes calldata _b) public pure returns (address) {\r\n        address addr;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, sub(_b.offset, 2), add(_b.length, 2))\r\n            addr := mload(sub(ptr, 10))\r\n        }\r\n        return addr;\r\n    }\r\n\r\n    // given an address, return the 20 bytes\r\n    function addrToPackedBytes(address _a) public pure returns (bytes memory) {\r\n        bytes memory data = abi.encodePacked(_a);\r\n        return data;\r\n    }\r\n\r\n    function setConfig(\r\n        uint16, /*_version*/\r\n        uint16, /*_chainId*/\r\n        uint, /*_configType*/\r\n        bytes memory /*_config*/\r\n    ) external override {}\r\n\r\n    function getConfig(\r\n        uint16, /*_version*/\r\n        uint16, /*_chainId*/\r\n        address, /*_ua*/\r\n        uint /*_configType*/\r\n    ) external pure override returns (bytes memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function setSendVersion(\r\n        uint16 /*version*/\r\n    ) external override {}\r\n\r\n    function setReceiveVersion(\r\n        uint16 /*version*/\r\n    ) external override {}\r\n\r\n    function getSendVersion(\r\n        address /*_userApplication*/\r\n    ) external pure override returns (uint16) {\r\n        return 1;\r\n    }\r\n\r\n    function getReceiveVersion(\r\n        address /*_userApplication*/\r\n    ) external pure override returns (uint16) {\r\n        return 1;\r\n    }\r\n\r\n    function getInboundNonce(uint16 _chainID, bytes calldata _srcAddress) external view override returns (uint64) {\r\n        return inboundNonce[_chainID][_srcAddress];\r\n    }\r\n\r\n    function getOutboundNonce(uint16 _chainID, address _srcAddress) external view override returns (uint64) {\r\n        return outboundNonce[_chainID][_srcAddress];\r\n    }\r\n\r\n    // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload\r\n    function _clearMsgQue(uint16 _srcChainId, bytes calldata _srcAddress) internal {\r\n        QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];\r\n\r\n        // warning, might run into gas issues trying to forward through a bunch of queued msgs\r\n        while (msgs.length > 0) {\r\n            QueuedPayload memory payload = msgs[msgs.length - 1];\r\n            ILayerZeroReceiver(payload.dstAddress).lzReceive(_srcChainId, _srcAddress, payload.nonce, payload.payload);\r\n            msgs.pop();\r\n        }\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n        // revert if no messages are cached. safeguard malicious UA behaviour\r\n        require(sp.payloadHash != bytes32(0), \"LayerZero: no stored payload\");\r\n        require(sp.dstAddress == msg.sender, \"LayerZero: invalid caller\");\r\n\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        emit UaForceResumeReceive(_srcChainId, _srcAddress);\r\n\r\n        // resume the receiving of msgs after we force clear the \"stuck\" msg\r\n        _clearMsgQue(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n        require(sp.payloadHash != bytes32(0), \"LayerZero: no stored payload\");\r\n        require(_payload.length == sp.payloadLength && keccak256(_payload) == sp.payloadHash, \"LayerZero: invalid payload\");\r\n\r\n        address dstAddress = sp.dstAddress;\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        uint64 nonce = inboundNonce[_srcChainId][_srcAddress];\r\n\r\n        ILayerZeroReceiver(dstAddress).lzReceive(_srcChainId, _srcAddress, nonce, _payload);\r\n        emit PayloadCleared(_srcChainId, _srcAddress, nonce, dstAddress);\r\n    }\r\n\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view override returns (bool) {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n        return sp.payloadHash != bytes32(0);\r\n    }\r\n\r\n    function isSendingPayload() external pure override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function isReceivingPayload() external pure override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function getSendLibraryAddress(address) external view override returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function getReceiveLibraryAddress(address) external view override returns (address) {\r\n        return address(this);\r\n    }\r\n}\r\n"
    },
    "contracts/tests/TokenUSDT.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n// Just for local testing\r\ncontract TokenUSDT is ERC20 {\r\n\r\n    constructor()\r\n        ERC20('TokenUSDT', 'USDT')\r\n    {}\r\n    \r\n    function mint(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n}"
    },
    "contracts/tests/TokenUSDC.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n// Just for local testing\r\ncontract TokenUSDC is ERC20 {\r\n\r\n    constructor()\r\n        ERC20('TokenUSDC', 'USDC')\r\n    {}\r\n    \r\n    function mint(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n}"
    },
    "contracts/tests/TokenBUSD.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n// Just for local testing\r\ncontract TokenBUSD is ERC20 {\r\n\r\n    constructor()\r\n        ERC20('TokenBUSD', 'BUSD')\r\n    {}\r\n    \r\n    function mint(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n}"
    },
    "contracts/mocks/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockToken is ERC20 {\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) ERC20(name_, symbol_) {\r\n        _mint(msg.sender, 1000000000 * (10**decimals_));\r\n    }\r\n\r\n    bool paused;\r\n\r\n    function mint(address _to, uint256 _amount) public {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        // need to mock some failed transfer events\r\n        require(!paused, \"Failed transfer due to pause\");\r\n\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        // need to mock some failed transfer events\r\n        require(!paused, \"Failed transfer due to pause\");\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function pauseTransfers(bool _paused) external {\r\n        paused = _paused;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/ProxyTokenStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// imports\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\n// interfaces\r\nimport {IProxyTokenStation} from \"./interfaces/IProxyTokenStation.sol\";\r\nimport {IWETH} from \"./interfaces/IWETH.sol\";\r\n\r\ncontract ProxyTokenStation is IProxyTokenStation, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ============ Public  ============    \r\n   \r\n    // OpenLuck executors\r\n    mapping(address => bool) public executors;\r\n\r\n    // support multiple executors (executor-address => token address => amount)    \r\n    mapping(address => mapping(address => uint256)) public deposits;\r\n\r\n    address public WETH;\r\n   \r\n    modifier onlyExecutor() {\r\n        require(executors[msg.sender] == true, \"Lucks: caller must be LucksExecutor.\");\r\n        _;\r\n    }\r\n\r\n    // ======== Constructor =========\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _executor executor address\r\n     */\r\n    constructor(address _executor, address _weth) {\r\n        executors[_executor] = true;\r\n        WETH = _weth;\r\n    }\r\n\r\n    // ============ external functions ============\r\n\r\n    function deposit(address user, address token, uint256 amount) override external payable onlyExecutor {\r\n        \r\n        _deposit(msg.sender, user, token, amount);\r\n        \r\n        emit Deposit(msg.sender, user, token, amount);        \r\n    }\r\n\r\n    function withdraw(address user, address token, uint256 amount) override external onlyExecutor {\r\n\r\n        _withdraw(msg.sender, user, token, amount);\r\n\r\n        emit Withdraw(msg.sender, user, token, amount);   \r\n    }\r\n\r\n    // ============ Internal functions ============\r\n\r\n    function _deposit(address executor, address user, address token, uint256 amount) internal {\r\n        //zero address means Chain Navite Token, support ETH+WETH\r\n         if (token == address(0)) { \r\n            // allow ETH+WETH\r\n            uint256 wrapTokenAmount = amount.sub(msg.value);\r\n            require(wrapTokenAmount >= 0, \"deposit: Msg.value too high\");\r\n            if (wrapTokenAmount > 0) {\r\n                require(address(WETH) != address(0), \"wrapp token not set or msg.value too small\");\r\n                require(IERC20(WETH).balanceOf(user) >= wrapTokenAmount, \"Insufficient balance\");\r\n                require(IERC20(WETH).allowance(user, address(this)) >= wrapTokenAmount, \"Insufficient allowance\");       \r\n                // Transfer WETH to this contract\r\n                IERC20(WETH).transferFrom(user, address(this), wrapTokenAmount);\r\n                // transfer WETH to ETH\r\n                IWETH(WETH).withdraw(wrapTokenAmount);\r\n\r\n            }\r\n            \r\n        } else {\r\n            require(IERC20(token).balanceOf(user) >= amount, \"Insufficient token balance\");\r\n            require(IERC20(token).allowance(user, address(this)) >= amount, \"Insufficient token allowance\");\r\n            // Transfer tokens to this contract\r\n            IERC20(token).transferFrom(user, address(this), amount);\r\n        }\r\n\r\n        // update deposits balance\r\n        deposits[executor][token] = deposits[executor][token].add(amount);\r\n    }\r\n\r\n    function _withdraw(address executor, address user, address token, uint256 amount) internal {\r\n        \r\n        require(user != address(0) && user != address(this), \"Invalid address\");\r\n        require(amount > 0, \"Invalid amount\");\r\n        require(deposits[executor][token] >= amount, \"Insufficient deposited balance for this executor\");\r\n\r\n        // update deposits balance\r\n        deposits[executor][token] = deposits[executor][token].sub(amount);\r\n\r\n        // transfer\r\n        if (token == address(0)) {    \r\n            require(address(this).balance >= amount, \"Lack of funds\");       \r\n            // transfer funds \r\n            payable(user).transfer(amount);                      \r\n        } else {        \r\n            require(IERC20(token).balanceOf(address(this)) >= amount, \"Lack of token\");\r\n            // Transfer tokens                \r\n            IERC20(token).transfer(user, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice set operator\r\n     */\r\n    function setExecutor(address executor) external onlyOwner {\r\n        executors[executor] = true;\r\n    }\r\n\r\n\r\n    /**\r\n    @notice set IWETH\r\n     */\r\n    function setWETH(address _eth) external onlyOwner {\r\n        WETH = _eth;\r\n    }\r\n} "
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GNU\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address dst, uint256 wad) external returns (bool);\r\n\r\n    function withdraw(uint256 wad) external;\r\n}"
    },
    "contracts/tests/NFTs/WatcherMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\n\r\ncontract WatcherMinter is ERC1155 {\r\n    string public name;\r\n    string public symbol;\r\n    string public contractURI =\r\n        \"QmdqrVASguJRJHAzbfys3xdfbhLCTyKogGNyQiDQeNSgss\";\r\n\r\n    bytes32 public OWNER_ROLE = keccak256(\"OWNER_ROLE\");\r\n    bytes32 public ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n\r\n    mapping(uint256 => string) public tokenURI;\r\n    mapping(address => bool) public isAdmin;\r\n\r\n    address public owner;\r\n    address payable public royaltyAddress =\r\n        payable(0x21ff1ac88a4A7c07C7573132f976D05B259632EE);\r\n\r\n    constructor() ERC1155(\"\") {\r\n        name = \"Frontier\";\r\n        symbol = \"FRONTIER\";\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier adminOnly() {\r\n        require(msg.sender == owner || isAdmin[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier ownerOnly() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function addAdmin(address _address) external ownerOnly {\r\n        isAdmin[_address] = true;\r\n    }\r\n\r\n    function mint(\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    ) external adminOnly {\r\n        _mint(_to, _id, _amount, \"\");\r\n    }\r\n\r\n    function mintBatch(\r\n        address _to,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts\r\n    ) external adminOnly {\r\n        _mintBatch(_to, _ids, _amounts, \"\");\r\n    }\r\n\r\n    function burn(uint256 _id, uint256 _amount) external {\r\n        _burn(msg.sender, _id, _amount);\r\n    }\r\n\r\n    function burnBatch(uint256[] memory _ids, uint256[] memory _amounts)\r\n        external\r\n    {\r\n        _burnBatch(msg.sender, _ids, _amounts);\r\n    }\r\n\r\n    function burnForMint(\r\n        address _from,\r\n        uint256[] memory _burnIds,\r\n        uint256[] memory _burnAmounts,\r\n        uint256[] memory _mintIds,\r\n        uint256[] memory _mintAmounts\r\n    ) external adminOnly {\r\n        _burnBatch(_from, _burnIds, _burnAmounts);\r\n        _mintBatch(_from, _mintIds, _mintAmounts, \"\");\r\n    }\r\n\r\n    function setURI(uint256 _id, string memory _uri) external adminOnly {\r\n        require(bytes(tokenURI[_id]).length == 0);\r\n        tokenURI[_id] = _uri;\r\n\r\n        emit URI(_uri, _id);\r\n    }\r\n\r\n    function uri(uint256 _id) public view override returns (string memory) {\r\n        return tokenURI[_id];\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IOpenLuckToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IOpenLuckToken is IERC20 {\r\n    \r\n    function SUPPLY_CAP() external view returns (uint256);\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n}"
    },
    "contracts/token/OpenLuckOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"layerzero-contracts/contracts/token/oft/OFT.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\n\r\ncontract OpenLuckOFT is OFT, Pausable {\r\n\r\n    constructor(address _lzEndpoint) OFT(\"OpenLuckToken\", \"LUCK\", _lzEndpoint) {\r\n        \r\n    }\r\n    \r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual override whenNotPaused {\r\n        super._debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n    }\r\n\r\n    function pauseSendTokens(bool pause) external onlyOwner {\r\n        pause ? _pause() : _unpause();\r\n    }\r\n}\r\n"
    },
    "contracts/lucks/LucksPaymentStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// Openluck interfaces\r\nimport {ILucksPaymentStrategy} from \"../interfaces/ILucksPaymentStrategy.sol\";\r\nimport {ILucksGroup} from \"../interfaces/ILucksGroup.sol\";\r\nimport {ILucksExecutor, Ticket} from \"../interfaces/ILucksExecutor.sol\";\r\n\r\n\r\n/** @title Openluck LucksPaymentStrategy\r\n * @notice It is the contract for PaymentStrategy\r\n */\r\ncontract LucksPaymentStrategy is ILucksPaymentStrategy {    \r\n\r\n    ILucksExecutor public EXECUTOR;\r\n    ILucksGroup public GROUPS;\r\n\r\n    constructor(address _executor, ILucksGroup _groups) {\r\n        EXECUTOR = ILucksExecutor(_executor);\r\n        GROUPS = _groups;\r\n    }\r\n\r\n    function getShareRate(uint16 strategyId) public override pure returns (uint32) {\r\n        if (strategyId == 1){ // 10%\r\n            return 1000;  \r\n        } else if (strategyId == 2) { // 20%\r\n            return 2000;   \r\n        }\r\n        else if (strategyId == 3){ // 30%\r\n            return 3000;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) \r\n      override public view returns (uint256, uint256[] memory, address[] memory) \r\n    {        \r\n        uint32 rate = getShareRate(strategyId);\r\n        uint256[] memory spliter;\r\n        address[] memory users;\r\n\r\n        if (rate > 0) {                               \r\n            users = GROUPS.getGroupUsers(taskId, winner);\r\n            if (users.length > 1){            \r\n                spliter = new uint256[](users.length);\r\n                uint256 splitShare = 10000 / users.length;\r\n                for (uint i=0; i< users.length; i++) {\r\n                    spliter[i] = splitShare;\r\n                }            \r\n            }             \r\n        }\r\n\r\n        return (rate,spliter,users);\r\n    }\r\n}"
    },
    "contracts/lucks/LucksGroup.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// Openluck interfaces\r\nimport {ILucksGroup} from \"../interfaces/ILucksGroup.sol\";\r\nimport {ILucksExecutor, TaskItem, TaskStatus} from \"../interfaces/ILucksExecutor.sol\";\r\n\r\n\r\n/** @title Openluck LucksGroup\r\n * @notice It is the contract for LucksGroup\r\n */\r\ncontract LucksGroup is ILucksGroup, Ownable {\r\n\r\n    using Counters for Counters.Counter;    \r\n\r\n    ILucksExecutor public EXECUTOR;\r\n\r\n    uint32 public MAX_SEAT = 10;\r\n    \r\n    mapping(uint256 => uint256) public groupIds;               // groupId counter (taskId => groupId)\r\n    mapping(uint256 => mapping(uint256 => address[])) public groups;     // store task groups (taskId => groupId => group member address)\r\n    mapping(address => mapping(uint256 => uint256)) public userGroups;   // store user joined groups (user => taskId => groupId)\r\n    mapping(uint256 => mapping(uint256 => uint16)) public groupSeat;     // store group setting(task=> groupId = > group seat)\r\n\r\n    constructor(address _executor, uint32 _maxSeat) {\r\n        EXECUTOR =  ILucksExecutor(_executor);        \r\n        MAX_SEAT = _maxSeat;\r\n    }\r\n\r\n    function getGroupUsers(uint256 taskId, address user) override view public returns (address[] memory){                \r\n        return groups[taskId][userGroups[user][taskId]];\r\n    }\r\n\r\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) override public {   \r\n        address user = msg.sender;                  \r\n        require(groupId > 0 && groupId <= groupIds[taskId], \"Invalid groupId\");\r\n        require(seat <= MAX_SEAT, \"Invalid seat\");\r\n        require(userGroups[user][taskId] == 0, \"Already join a group\");\r\n        require(address(EXECUTOR)!=address(0), \"EXECUTOR not set\");\r\n            \r\n        TaskItem memory item = EXECUTOR.getTask(taskId);        \r\n        require(block.timestamp <= item.endTime, \"Invalid time range\");    \r\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \"Invalid status\");\r\n\r\n        // join\r\n        if (groups[taskId][groupId].length < MAX_SEAT) {            \r\n            groups[taskId][groupId].push(user);\r\n            userGroups[user][taskId] = groupId;\r\n\r\n            emit JoinGroup(user, taskId, groupId);\r\n        }\r\n        else {\r\n            if (seat > 1) {\r\n                // over seat, create new group\r\n                _createGroup(user, taskId, seat); \r\n            }\r\n            else {\r\n                revert(\"Exceed seat\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function createGroup(uint256 taskId, uint16 seat) override public {  \r\n        _createGroup(msg.sender, taskId, seat);\r\n    }\r\n\r\n    function _createGroup(address user, uint256 taskId, uint16 seat) internal {            \r\n                 \r\n        require(seat <= MAX_SEAT && seat > 1, \"Invalid seat\");\r\n        require(userGroups[user][taskId] == 0, \"Already join a group\");\r\n        require(address(EXECUTOR)!=address(0), \"EXECUTOR not set\");\r\n            \r\n        TaskItem memory item = EXECUTOR.getTask(taskId);        \r\n        require(block.timestamp <= item.endTime, \"Invalid time range\");    \r\n        require(item.status == TaskStatus.Pending || item.status == TaskStatus.Open, \"Invalid status\");\r\n        \r\n        uint256 groupId = groupIds[taskId] + 1;\r\n        groupIds[taskId] = groupId;\r\n\r\n        groups[taskId][groupId].push(user);\r\n        userGroups[user][taskId] = groupId;\r\n\r\n        emit CreateGroup(user, taskId, groupId, seat);\r\n    }\r\n\r\n    \r\n    /**\r\n    @notice set operator\r\n     */\r\n    function setExecutor(ILucksExecutor _executor) external onlyOwner {\r\n        EXECUTOR = _executor;\r\n    }\r\n}"
    },
    "contracts/tests/LocalLucksVRF.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\n// Chainlink contracts\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\n// Openluck interfaces\r\nimport {ILucksVRF} from \"./../interfaces/ILucksVRF.sol\";\r\n\r\ncontract LocalLucksVRF is VRFConsumerBaseV2, ILucksVRF, Ownable {\r\n\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private currentNonce;   \r\n\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n    LinkTokenInterface LINKTOKEN;\r\n\r\n    // Your subscription ID.\r\n    uint64 s_subscriptionId;\r\n\r\n    // Rinkeby coordinator. For other networks,\r\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    address vrfCoordinator = 0x6168499c0cFfCaCD319c818142124B7A15E857ab;\r\n\r\n    // Rinkeby LINK token contract. For other networks,\r\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    address link = 0x01BE23585060835E02B77ef475b0Cc51aA1e0709;\r\n\r\n    // The gas lane to use, which specifies the maximum gas price to bump to.\r\n    // For a list of available gas lanes on each network,\r\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    bytes32 keyHash =\r\n        0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc;\r\n\r\n    // Depends on the number of requested values that you want sent to the\r\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\r\n    // so 100,000 is a safe default for this example contract. Test and adjust\r\n    // this limit based on the network that you select, the size of the request,\r\n    // and the processing of the callback request in the fulfillRandomWords()\r\n    // function.\r\n    uint32 callbackGasLimit = 100000;\r\n\r\n    // The default is 3, but you can set this higher.\r\n    uint16 requestConfirmations = 3;\r\n\r\n    address public executor;\r\n\r\n    // taskId => ticket FinalNumber\r\n    mapping(uint256 => uint32) public randomResults;\r\n    // requestId => taskId\r\n    mapping(uint256 => uint256) public requestToTaskId;\r\n    // requestId => max num\r\n    mapping(uint256 => uint256) public requestToMaxNum;\r\n    // taskId => requestId\r\n    mapping(uint256 => uint256) private taskToRequestId;\r\n\r\n    constructor(\r\n        uint64 _subscriptionId,\r\n        address _vrfCoordinator,\r\n        address _link,\r\n        bytes32 _keyHash,\r\n        address _executor\r\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\r\n        s_subscriptionId = _subscriptionId;\r\n        vrfCoordinator = _vrfCoordinator;\r\n        link = _link;\r\n        keyHash = _keyHash;\r\n\r\n        executor = _executor;\r\n        // COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        // LINKTOKEN = LinkTokenInterface(link);\r\n    }\r\n\r\n    /**\r\n     * @notice Request randomness from a user-provided max\r\n     * @param max: max provided by the LucksExecutor (lastTicketId)\r\n     */\r\n    function reqRandomNumber(uint256 taskId, uint256 max) external override {\r\n        require(msg.sender == owner() || msg.sender == executor, \"Only Lucks can reqRandomNumber\");\r\n        require(max > 0, \"Invalid max input\");\r\n\r\n        if (taskToRequestId[taskId] > 0) {\r\n            return;\r\n        }\r\n\r\n        // Will revert if subscription is not set and funded.\r\n        currentNonce.increment();\r\n        uint64 nonce = uint64(currentNonce.current());\r\n        (uint256 requestId,) = computeRequestId(\r\n            keyHash,\r\n            msg.sender,\r\n            s_subscriptionId,\r\n            nonce   \r\n        );\r\n        requestToTaskId[requestId] = taskId;\r\n        requestToMaxNum[requestId] = max;\r\n        taskToRequestId[taskId] = requestId;\r\n\r\n        emit ReqRandomNumber(taskId, max, requestId);\r\n    }\r\n\r\n    /**\r\n     * @notice View random result\r\n     */\r\n    function viewRandomResult(uint256 taskId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint32)\r\n    {\r\n        return randomResults[taskId];\r\n    }\r\n\r\n    /**\r\n     * @notice Callback function used by ChainLink's VRF Coordinator\r\n     */\r\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\r\n        internal\r\n        override\r\n    {\r\n        uint256 taskId = requestToTaskId[requestId];        \r\n        require(taskId > 0, \"Wrong taskId or requestId\");\r\n\r\n        // Between 1 and max:\r\n        randomResults[taskId] = uint32((randomWords[0] % requestToMaxNum[requestId]) + 1);\r\n\r\n        emit RspRandomNumber(\r\n            taskId,\r\n            requestId,\r\n            randomWords[0],\r\n            randomResults[taskId]\r\n        );\r\n    }\r\n\r\n    function computeRequestId(\r\n        bytes32 _keyHash,\r\n        address _sender,\r\n        uint64 _subId,\r\n        uint64 _nonce\r\n    ) private pure returns (uint256, uint256) {\r\n        uint256 preSeed = uint256(keccak256(abi.encode(_keyHash, _sender, _subId, _nonce)));\r\n        return (uint256(keccak256(abi.encode(_keyHash, preSeed))), preSeed);\r\n    }\r\n\r\n    // ============ only Owner ============\r\n\r\n    /**\r\n     * @notice Callback for test & enmergency case\r\n     */\r\n    function callbackRandomWords(uint256 taskId, uint256 seed)\r\n        external\r\n        onlyOwner\r\n    {    \r\n        uint256 requestId = taskToRequestId[taskId];\r\n\r\n        // generate random by owner\r\n        uint256 random = uint256(\r\n           keccak256(abi.encodePacked(\r\n                seed *\r\n                block.timestamp *\r\n                block.difficulty *\r\n                block.number *\r\n                uint(blockhash(block.number - requestConfirmations))\r\n            ))\r\n        );\r\n\r\n        // Between 1 and max:\r\n        randomResults[taskId] = uint32((random % requestToMaxNum[requestId]) + 1);\r\n\r\n        emit RspRandomNumber(\r\n            taskId,\r\n            requestId,\r\n            random,\r\n            randomResults[taskId]\r\n        );       \r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Callback for test & enmergency case\r\n     */\r\n    function callbackTestRandomWords(uint256 taskId, uint32 number)\r\n        external\r\n        onlyOwner\r\n    {              \r\n        uint256 requestId = taskToRequestId[taskId];\r\n\r\n        randomResults[taskId] = number;\r\n\r\n        emit RspRandomNumber(\r\n            taskId,\r\n            requestId,\r\n            number,\r\n            randomResults[taskId]\r\n        );\r\n    }    \r\n\r\n    /**\r\n     * @notice Change the keyHash\r\n     * @param _keyHash: new keyHash\r\n     */\r\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\r\n        keyHash = _keyHash;\r\n    }\r\n\r\n    /**\r\n     * @notice Change the requestConfirmations\r\n     * @param num: num\r\n     */\r\n    function setReqConfirmations(uint16 num) external onlyOwner {\r\n        requestConfirmations = num;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address for the Lucks\r\n     * @param _executor: address of the PancakeSwap crowdluck\r\n     */\r\n    function setLucksAddress(address _executor) external onlyOwner {\r\n        executor = _executor;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/lucks/LucksVRF.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// Chainlink contracts\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\n// Openluck interfaces\r\nimport {ILucksVRF} from \"../interfaces/ILucksVRF.sol\";\r\n\r\n\r\n/** @title Openluck VRF\r\n * @notice It is the contract for Randomness Number Generation\r\n */\r\ncontract LucksVRF is VRFConsumerBaseV2, ILucksVRF, Ownable {\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n    LinkTokenInterface LINKTOKEN;\r\n\r\n    // Your subscription ID.\r\n    uint64 s_subscriptionId;\r\n\r\n    // Rinkeby coordinator. For other networks,\r\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    address vrfCoordinator = 0x6168499c0cFfCaCD319c818142124B7A15E857ab;\r\n\r\n    // Rinkeby LINK token contract. For other networks,\r\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    address link = 0x01BE23585060835E02B77ef475b0Cc51aA1e0709;\r\n\r\n    // The gas lane to use, which specifies the maximum gas price to bump to.\r\n    // For a list of available gas lanes on each network,\r\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    bytes32 keyHash = 0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc;\r\n\r\n    // Depends on the number of requested values that you want sent to the\r\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\r\n    // so 100,000 is a safe default for this example contract. Test and adjust\r\n    // this limit based on the network that you select, the size of the request,\r\n    // and the processing of the callback request in the fulfillRandomWords()\r\n    // function.\r\n    uint32 callbackGasLimit = 100000;\r\n\r\n    // The default is 3, but you can set this higher.\r\n    uint16 requestConfirmations = 3;\r\n\r\n    address public EXECUTOR;\r\n\r\n    mapping(uint256 => uint32) public randomResults;      // taskId => ticket FinalNumber\r\n    mapping(uint256 => uint256) public requestToTaskId;    // requestId => taskId\r\n    mapping(uint256 => uint256) public requestToMaxNum;    // requestId => max num\r\n    mapping(uint256 => uint256) public taskToRequestId;    // taskId => requestId\r\n\r\n    constructor(\r\n        uint64 _subscriptionId,\r\n        address _vrfCoordinator,\r\n        address _link,\r\n        bytes32 _keyHash,\r\n        address _executor\r\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\r\n        s_subscriptionId = _subscriptionId;\r\n        vrfCoordinator = _vrfCoordinator;\r\n        link = _link;\r\n        keyHash = _keyHash;\r\n\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        LINKTOKEN = LinkTokenInterface(link);\r\n        EXECUTOR = _executor;\r\n    }\r\n\r\n    /**\r\n     * @notice Request randomness from a user-provided max\r\n     * @param max: max provided by the LucksExecutor (lastTicketId)\r\n     */\r\n    function reqRandomNumber(uint256 taskId, uint256 max) external override {\r\n        require(msg.sender == EXECUTOR, \"Only Lucks can reqRandomNumber\");\r\n        require(max > 0, \"Invalid max input\");\r\n        \r\n        if (taskToRequestId[taskId] > 0) {\r\n            return;\r\n        }\r\n        \r\n        // Will revert if subscription is not set and funded.\r\n        uint256 requestId = COORDINATOR.requestRandomWords(\r\n            keyHash,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            callbackGasLimit,\r\n            1\r\n        );\r\n        requestToTaskId[requestId] = taskId;\r\n        requestToMaxNum[requestId] = max;\r\n        taskToRequestId[taskId] = requestId;\r\n\r\n        emit ReqRandomNumber(taskId, max, requestId);\r\n    }\r\n\r\n    /**\r\n     * @notice View random result\r\n     */\r\n    function viewRandomResult(uint256 taskId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint32)\r\n    {\r\n        return randomResults[taskId];\r\n    }\r\n\r\n    /**\r\n     * @notice Callback function used by ChainLink's VRF Coordinator\r\n     */\r\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\r\n        internal\r\n        override\r\n    {\r\n        uint256 taskId = requestToTaskId[requestId];        \r\n        require(taskId > 0, \"Wrong taskId or requestId\");\r\n\r\n        // Between 1 and max:\r\n        randomResults[taskId] = uint32((randomWords[0] % requestToMaxNum[requestId]) + 1);\r\n\r\n        emit RspRandomNumber(\r\n            taskId,\r\n            requestId,\r\n            randomWords[0],\r\n            randomResults[taskId]\r\n        );\r\n    }\r\n\r\n    // ============ only Owner ============\r\n\r\n    /**\r\n     * @notice Callback for enmergency case\r\n     */\r\n    function callbackRandomWords(uint256 taskId, uint256 seed)\r\n        external\r\n        onlyOwner\r\n    {    \r\n        uint256 requestId = taskToRequestId[taskId];\r\n\r\n        // generate random by owner\r\n        uint256 random = uint256(\r\n           keccak256(abi.encodePacked(\r\n                seed *\r\n                block.timestamp *\r\n                block.difficulty *\r\n                block.number *\r\n                uint(blockhash(block.number - requestConfirmations))\r\n            ))\r\n        );\r\n        \r\n        // Between 1 and max:\r\n        randomResults[taskId] = uint32((random % requestToMaxNum[requestId]) + 1);\r\n\r\n        emit RspRandomNumber(\r\n            taskId,\r\n            requestToTaskId[taskId],\r\n            random,\r\n            randomResults[taskId]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Change the keyHash\r\n     * @param _keyHash: new keyHash\r\n     */\r\n    function setKeyHash(bytes32 _keyHash) external onlyOwner {\r\n        keyHash = _keyHash;\r\n    }\r\n\r\n    /**\r\n     * @notice Change the requestConfirmations\r\n     * @param num: num\r\n     */\r\n    function setReqConfirmations(uint16 num) external onlyOwner {\r\n        requestConfirmations = num;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address for the Lucks\r\n     * @param _executor: address of the PancakeSwap crowdluck\r\n     */\r\n    function setExecutor(address _executor) external onlyOwner {\r\n        EXECUTOR = _executor;\r\n    }\r\n}\r\n"
    },
    "contracts/TestTicket.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./libraries/RedBlackTreeLibrary.sol\";\r\nimport \"@openzeppelin/contracts/utils/Arrays.sol\";\r\n\r\n\r\ncontract TestTicket {\r\n\r\n    using Arrays for uint256[];\r\n\r\n    struct Ticket {\r\n        uint256 number;  // the ticket's id, equal to the end number (last ticket id)\r\n        uint256 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\r\n        address owner;  // ticket owner\r\n    }\r\n\r\n    using RedBlackTreeLibrary for RedBlackTreeLibrary.Tree;\r\n\r\n    mapping(uint256 => RedBlackTreeLibrary.Tree) private trees;\r\n\r\n    mapping(uint256 => mapping(uint256 => Ticket)) public tickets;\r\n\r\n    mapping(uint256 => uint256[]) public ticketIds; \r\n\r\n    mapping(address => mapping(uint256 => uint256)) public userTickets;\r\n\r\n    mapping(uint256 => uint256) public lastTIDs; \r\n\r\n    function addTicket(uint256 taskId, uint256 count, uint256 num, address buyer) external {\r\n        for(uint256 i=0; i< count; i++){\r\n            _createTickets(taskId, num, buyer);\r\n        }\r\n    }\r\n\r\n    function addTicket2(uint256 taskId, uint256 count, uint256 num, address buyer) external {\r\n        for(uint256 i=0; i< count; i++){\r\n            _createTickets2(taskId, num, buyer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice join task succes. create tickets for buyer\r\n     * @param taskId task id\r\n     * @param num how many ticket\r\n     * @param buyer buery\r\n     */\r\n    function _createTickets(uint256 taskId, uint256 num, address buyer) internal returns (uint256) \r\n    {\r\n        uint256 start = lastTIDs[taskId] + 1;\r\n        uint256 lastTKID = start + num - 1;\r\n\r\n        tickets[taskId][lastTKID] = Ticket(lastTKID, num, buyer);\r\n        lastTIDs[taskId] = lastTKID;\r\n\r\n        trees[taskId].insert(lastTKID);\r\n\r\n        return lastTKID;\r\n    }\r\n\r\n    function _createTickets2(uint256 taskId, uint256 num, address buyer) internal returns (uint256) \r\n    {\r\n        uint256 start = lastTIDs[taskId] + 1;\r\n        uint256 lastTKID = start + num - 1;\r\n\r\n        tickets[taskId][lastTKID] = Ticket(lastTKID, num, buyer);\r\n        lastTIDs[taskId] = lastTKID;\r\n\r\n        ticketIds[taskId].push(lastTKID);\r\n\r\n        userTickets[buyer][taskId] += num;\r\n\r\n        return lastTKID;\r\n    }\r\n\r\n    /**\r\n     * @notice search a winner ticket by number\r\n     * @param taskId task id\r\n     * @param number final number\r\n     */\r\n    function findWinnerTicket(uint256 taskId, uint256 number) external returns (Ticket memory)\r\n    {\r\n        // find by ticketId\r\n        Ticket memory ticket = tickets[taskId][number];\r\n\r\n        if (ticket.number == 0) {\r\n        \r\n            uint256 node = ticketIds[taskId].findUpperBound(number);\r\n\r\n            ticket = tickets[taskId][node];\r\n        }\r\n       \r\n        return ticket;\r\n    }\r\n\r\n    function findWinnerTicket2(uint256 taskId, uint256 number) external returns (Ticket memory)\r\n    {\r\n        // find by ticketId\r\n        Ticket memory ticket = tickets[taskId][number];\r\n\r\n        if (ticket.number == 0) {\r\n        \r\n            uint node = trees[taskId].greaterThan(number);\r\n\r\n            ticket = tickets[taskId][node];\r\n        }\r\n       \r\n        return ticket;\r\n    }\r\n\r\n    function testFind(uint256 count) external pure returns(uint256){\r\n        uint256 a = 0;\r\n        for(uint256 i=0; i< count; i++){\r\n            a = i;\r\n        }\r\n        return a;\r\n    }\r\n\r\n    function testFind2(uint256 count) external pure returns(uint256){\r\n\r\n        for(uint256 i=0; i< count; i++){\r\n\r\n        }\r\n        return count;\r\n    }\r\n}"
    },
    "contracts/libraries/RedBlackTreeLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary RedBlackTreeLibrary {\r\n\r\n    struct Node {\r\n        uint parent;\r\n        uint left;\r\n        uint right;\r\n        bool red;\r\n    }\r\n\r\n    struct Tree {\r\n        uint root;\r\n        mapping(uint => Node) nodes;\r\n    }\r\n\r\n    uint private constant EMPTY = 0;\r\n\r\n    function first(Tree storage self) internal view returns (uint _key) {\r\n        _key = self.root;\r\n        if (_key != EMPTY) {\r\n            while (self.nodes[_key].left != EMPTY) {\r\n                _key = self.nodes[_key].left;\r\n            }\r\n        }\r\n    }\r\n    function last(Tree storage self) internal view returns (uint _key) {\r\n        _key = self.root;\r\n        if (_key != EMPTY) {            \r\n            while (self.nodes[_key].right != EMPTY) {\r\n                _key = self.nodes[_key].right;\r\n            }\r\n        }\r\n    }\r\n\r\n    function next(Tree storage self, uint target) internal view returns (uint cursor) {\r\n        require(target != EMPTY);\r\n        if (self.nodes[target].right != EMPTY) {\r\n            cursor = treeMinimum(self, self.nodes[target].right);\r\n        } else {\r\n            cursor = self.nodes[target].parent;\r\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\r\n                target = cursor;\r\n                cursor = self.nodes[cursor].parent;\r\n            }\r\n        }\r\n    }\r\n\r\n    function greaterThan(Tree storage self, uint value) internal view returns (uint cursor) {\r\n        uint node = self.root;\r\n        if (node != EMPTY) {\r\n            if (value < node){\r\n                cursor = node;\r\n                node = prev(self, node);              \r\n                while(cursor != EMPTY && node > value) {\r\n                    cursor = node;\r\n                    node = prev(self, node);\r\n                }\r\n            }\r\n            else {\r\n                node = next(self, node);\r\n                cursor = node;\r\n                while(cursor != EMPTY && node < value) {            \r\n                    node = next(self, node);\r\n                    cursor = node;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function prev(Tree storage self, uint target) internal view returns (uint cursor) {\r\n        require(target != EMPTY);\r\n        if (self.nodes[target].left != EMPTY) {\r\n            cursor = treeMaximum(self, self.nodes[target].left);\r\n        } else {\r\n            cursor = self.nodes[target].parent;\r\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\r\n                target = cursor;\r\n                cursor = self.nodes[cursor].parent;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function exists(Tree storage self, uint key) internal view returns (bool) {\r\n        return (key != EMPTY) && ((key == self.root) || (self.nodes[key].parent != EMPTY));\r\n    }\r\n    function isEmpty(uint key) internal pure returns (bool) {\r\n        return key == EMPTY;\r\n    }\r\n    function getEmpty() internal pure returns (uint) {\r\n        return EMPTY;\r\n    }\r\n    function getNode(Tree storage self, uint key) internal view returns (uint _returnKey, uint _parent, uint _left, uint _right, bool _red) {\r\n        require(exists(self, key));\r\n        return(key, self.nodes[key].parent, self.nodes[key].left, self.nodes[key].right, self.nodes[key].red);\r\n    }\r\n\r\n    function insert(Tree storage self, uint key) internal {\r\n        require(key != EMPTY);\r\n        require(!exists(self, key));\r\n        uint cursor = EMPTY;\r\n        uint probe = self.root;\r\n        while (probe != EMPTY) {\r\n            cursor = probe;\r\n            if (key < probe) {\r\n                probe = self.nodes[probe].left;\r\n            } else {\r\n                probe = self.nodes[probe].right;\r\n            }\r\n        }\r\n        self.nodes[key] = Node({parent: cursor, left: EMPTY, right: EMPTY, red: true});\r\n        if (cursor == EMPTY) {\r\n            self.root = key;\r\n        } else if (key < cursor) {\r\n            self.nodes[cursor].left = key;\r\n        } else {\r\n            self.nodes[cursor].right = key;\r\n        }\r\n        insertFixup(self, key);\r\n    }\r\n    function remove(Tree storage self, uint key) internal {\r\n        require(key != EMPTY);\r\n        require(exists(self, key));\r\n        uint probe;\r\n        uint cursor;\r\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\r\n            cursor = key;\r\n        } else {\r\n            cursor = self.nodes[key].right;\r\n            while (self.nodes[cursor].left != EMPTY) {\r\n                cursor = self.nodes[cursor].left;\r\n            }\r\n        }\r\n        if (self.nodes[cursor].left != EMPTY) {\r\n            probe = self.nodes[cursor].left;\r\n        } else {\r\n            probe = self.nodes[cursor].right;\r\n        }\r\n        uint yParent = self.nodes[cursor].parent;\r\n        self.nodes[probe].parent = yParent;\r\n        if (yParent != EMPTY) {\r\n            if (cursor == self.nodes[yParent].left) {\r\n                self.nodes[yParent].left = probe;\r\n            } else {\r\n                self.nodes[yParent].right = probe;\r\n            }\r\n        } else {\r\n            self.root = probe;\r\n        }\r\n        bool doFixup = !self.nodes[cursor].red;\r\n        if (cursor != key) {\r\n            replaceParent(self, cursor, key);\r\n            self.nodes[cursor].left = self.nodes[key].left;\r\n            self.nodes[self.nodes[cursor].left].parent = cursor;\r\n            self.nodes[cursor].right = self.nodes[key].right;\r\n            self.nodes[self.nodes[cursor].right].parent = cursor;\r\n            self.nodes[cursor].red = self.nodes[key].red;\r\n            (cursor, key) = (key, cursor);\r\n        }\r\n        if (doFixup) {\r\n            removeFixup(self, probe);\r\n        }\r\n        delete self.nodes[cursor];\r\n    }\r\n\r\n    function treeMinimum(Tree storage self, uint key) private view returns (uint) {\r\n        while (self.nodes[key].left != EMPTY) {\r\n            key = self.nodes[key].left;\r\n        }\r\n        return key;\r\n    }\r\n    function treeMaximum(Tree storage self, uint key) private view returns (uint) {\r\n        while (self.nodes[key].right != EMPTY) {\r\n            key = self.nodes[key].right;\r\n        }\r\n        return key;\r\n    }\r\n\r\n    function rotateLeft(Tree storage self, uint key) private {\r\n        uint cursor = self.nodes[key].right;\r\n        uint keyParent = self.nodes[key].parent;\r\n        uint cursorLeft = self.nodes[cursor].left;\r\n        self.nodes[key].right = cursorLeft;\r\n        if (cursorLeft != EMPTY) {\r\n            self.nodes[cursorLeft].parent = key;\r\n        }\r\n        self.nodes[cursor].parent = keyParent;\r\n        if (keyParent == EMPTY) {\r\n            self.root = cursor;\r\n        } else if (key == self.nodes[keyParent].left) {\r\n            self.nodes[keyParent].left = cursor;\r\n        } else {\r\n            self.nodes[keyParent].right = cursor;\r\n        }\r\n        self.nodes[cursor].left = key;\r\n        self.nodes[key].parent = cursor;\r\n    }\r\n    function rotateRight(Tree storage self, uint key) private {\r\n        uint cursor = self.nodes[key].left;\r\n        uint keyParent = self.nodes[key].parent;\r\n        uint cursorRight = self.nodes[cursor].right;\r\n        self.nodes[key].left = cursorRight;\r\n        if (cursorRight != EMPTY) {\r\n            self.nodes[cursorRight].parent = key;\r\n        }\r\n        self.nodes[cursor].parent = keyParent;\r\n        if (keyParent == EMPTY) {\r\n            self.root = cursor;\r\n        } else if (key == self.nodes[keyParent].right) {\r\n            self.nodes[keyParent].right = cursor;\r\n        } else {\r\n            self.nodes[keyParent].left = cursor;\r\n        }\r\n        self.nodes[cursor].right = key;\r\n        self.nodes[key].parent = cursor;\r\n    }\r\n\r\n    function insertFixup(Tree storage self, uint key) private {\r\n        uint cursor;\r\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\r\n            uint keyParent = self.nodes[key].parent;\r\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\r\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\r\n                if (self.nodes[cursor].red) {\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[cursor].red = false;\r\n                    self.nodes[self.nodes[keyParent].parent].red = true;\r\n                    key = self.nodes[keyParent].parent;\r\n                } else {\r\n                    if (key == self.nodes[keyParent].right) {\r\n                      key = keyParent;\r\n                      rotateLeft(self, key);\r\n                    }\r\n                    keyParent = self.nodes[key].parent;\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[self.nodes[keyParent].parent].red = true;\r\n                    rotateRight(self, self.nodes[keyParent].parent);\r\n                }\r\n            } else {\r\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\r\n                if (self.nodes[cursor].red) {\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[cursor].red = false;\r\n                    self.nodes[self.nodes[keyParent].parent].red = true;\r\n                    key = self.nodes[keyParent].parent;\r\n                } else {\r\n                    if (key == self.nodes[keyParent].left) {\r\n                      key = keyParent;\r\n                      rotateRight(self, key);\r\n                    }\r\n                    keyParent = self.nodes[key].parent;\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[self.nodes[keyParent].parent].red = true;\r\n                    rotateLeft(self, self.nodes[keyParent].parent);\r\n                }\r\n            }\r\n        }\r\n        self.nodes[self.root].red = false;\r\n    }\r\n\r\n    function replaceParent(Tree storage self, uint a, uint b) private {\r\n        uint bParent = self.nodes[b].parent;\r\n        self.nodes[a].parent = bParent;\r\n        if (bParent == EMPTY) {\r\n            self.root = a;\r\n        } else {\r\n            if (b == self.nodes[bParent].left) {\r\n                self.nodes[bParent].left = a;\r\n            } else {\r\n                self.nodes[bParent].right = a;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function removeFixup(Tree storage self, uint key) private {\r\n        uint cursor;\r\n        while (key != self.root && !self.nodes[key].red) {\r\n            uint keyParent = self.nodes[key].parent;\r\n            if (key == self.nodes[keyParent].left) {\r\n                cursor = self.nodes[keyParent].right;\r\n                if (self.nodes[cursor].red) {\r\n                    self.nodes[cursor].red = false;\r\n                    self.nodes[keyParent].red = true;\r\n                    rotateLeft(self, keyParent);\r\n                    cursor = self.nodes[keyParent].right;\r\n                }\r\n                if (!self.nodes[self.nodes[cursor].left].red && !self.nodes[self.nodes[cursor].right].red) {\r\n                    self.nodes[cursor].red = true;\r\n                    key = keyParent;\r\n                } else {\r\n                    if (!self.nodes[self.nodes[cursor].right].red) {\r\n                        self.nodes[self.nodes[cursor].left].red = false;\r\n                        self.nodes[cursor].red = true;\r\n                        rotateRight(self, cursor);\r\n                        cursor = self.nodes[keyParent].right;\r\n                    }\r\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[self.nodes[cursor].right].red = false;\r\n                    rotateLeft(self, keyParent);\r\n                    key = self.root;\r\n                }\r\n            } else {\r\n                cursor = self.nodes[keyParent].left;\r\n                if (self.nodes[cursor].red) {\r\n                    self.nodes[cursor].red = false;\r\n                    self.nodes[keyParent].red = true;\r\n                    rotateRight(self, keyParent);\r\n                    cursor = self.nodes[keyParent].left;\r\n                }\r\n                if (!self.nodes[self.nodes[cursor].right].red && !self.nodes[self.nodes[cursor].left].red) {\r\n                    self.nodes[cursor].red = true;\r\n                    key = keyParent;\r\n                } else {\r\n                    if (!self.nodes[self.nodes[cursor].left].red) {\r\n                        self.nodes[self.nodes[cursor].right].red = false;\r\n                        self.nodes[cursor].red = true;\r\n                        rotateLeft(self, cursor);\r\n                        cursor = self.nodes[keyParent].left;\r\n                    }\r\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\r\n                    self.nodes[keyParent].red = false;\r\n                    self.nodes[self.nodes[cursor].left].red = false;\r\n                    rotateRight(self, keyParent);\r\n                    key = self.root;\r\n                }\r\n            }\r\n        }\r\n        self.nodes[key].red = false;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
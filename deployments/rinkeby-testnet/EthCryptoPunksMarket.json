{
  "address": "0x5CC356bf3928084AA23eA2277e72b09dF5845212",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "Assign",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAddress",
          "type": "address"
        }
      ],
      "name": "PunkBidEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAddress",
          "type": "address"
        }
      ],
      "name": "PunkBidWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "PunkBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "PunkNoLongerForSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minValue",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "PunkOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "PunkTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        }
      ],
      "name": "acceptBidForPunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allInitialOwnersAssigned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPunksAssigned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "buyPunk",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "enterBidForPunk",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "getPunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imageHash",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPunkIndexToAssign",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSalePriceInWei",
          "type": "uint256"
        }
      ],
      "name": "offerPunkForSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSalePriceInWei",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "offerPunkForSaleToAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingWithdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "punkBids",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasBid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "punkIndexToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "punkNoLongerForSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "punksOfferedForSale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isForSale",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minValue",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onlySellTo",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "punksRemainingToAssign",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "setInitialOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "name": "setInitialOwners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standard",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "transferPunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkIndex",
          "type": "uint256"
        }
      ],
      "name": "withdrawBidForPunk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9bbc51776505f9d7b94a7bb02c88e81b2f7a32ebe2900b51277297803dce867",
  "receipt": {
    "to": null,
    "from": "0x5b770F460978C456d69bC46463dfda71FEEE60AD",
    "contractAddress": "0x5CC356bf3928084AA23eA2277e72b09dF5845212",
    "transactionIndex": 2,
    "gasUsed": "4256230",
    "logsBloom": "0x
    "blockHash": "0x093aca12e310b2967f191a52b4d623f5475e7c2b38b462cfddabc805ea7192de",
    "transactionHash": "0xd9bbc51776505f9d7b94a7bb02c88e81b2f7a32ebe2900b51277297803dce867",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 10964074,
        "transactionHash": "0xd9bbc51776505f9d7b94a7bb02c88e81b2f7a32ebe2900b51277297803dce867",
        "address": "0x5CC356bf3928084AA23eA2277e72b09dF5845212",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b770f460978c456d69bc46463dfda71feee60ad"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x093aca12e310b2967f191a52b4d623f5475e7c2b38b462cfddabc805ea7192de"
      }
    ],
    "blockNumber": 10964074,
    "cumulativeGasUsed": "4298230",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dafaf49e15d0a42c80ca08da769d34e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"PunkBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"PunkBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"PunkBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"PunkNoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"PunkOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"PunkTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBidForPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allInitialOwnersAssigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPunksAssigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"buyPunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"enterBidForPunk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPunkIndexToAssign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerPunkForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerPunkForSaleToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"punkBids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"punkIndexToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"punkNoLongerForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"punksOfferedForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punksRemainingToAssign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"setInitialOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"setInitialOwners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"transferPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawBidForPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol\":\"EthCryptoPunksMarket\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n\\r\\ncontract EthCryptoPunksMarket is ERC721, Ownable {\\r\\n  // You can use this hash to verify the image file containing all the punks\\r\\n  string public imageHash = \\\"ac39af4793119ee46bbff351d8cb6b5f23da60222126add4268e261199a2921b\\\";\\r\\n  string public baseURI = \\\"https://wrappedpunks.com:3000/api/punks/metadata/\\\";\\r\\n\\r\\n  string public standard = \\\"CryptoPunks\\\";\\r\\n  uint8 public decimals;\\r\\n  uint256 public totalSupply;\\r\\n\\r\\n  uint256 public nextPunkIndexToAssign = 0;\\r\\n\\r\\n  bool public allPunksAssigned = false;\\r\\n  uint256 public punksRemainingToAssign = 0;\\r\\n\\r\\n  //mapping (address => uint) public addressToPunkIndex;\\r\\n  mapping(uint256 => address) public punkIndexToAddress;    \\r\\n\\r\\n  struct Offer {\\r\\n    bool isForSale;\\r\\n    uint256 punkIndex;\\r\\n    address seller;\\r\\n    uint256 minValue; // in ether\\r\\n    address onlySellTo; // specify to sell only to a specific person\\r\\n  }\\r\\n\\r\\n  struct Bid {\\r\\n    bool hasBid;\\r\\n    uint256 punkIndex;\\r\\n    address bidder;\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  // A record of punks that are offered for sale at a specific minimum value, and perhaps to a specific person\\r\\n  mapping(uint256 => Offer) public punksOfferedForSale;\\r\\n\\r\\n  // A record of the highest punk bid\\r\\n  mapping(uint256 => Bid) public punkBids;\\r\\n\\r\\n  mapping(address => uint256) public pendingWithdrawals;\\r\\n\\r\\n  event Assign(address indexed to, uint256 punkIndex);  \\r\\n  event PunkTransfer(address indexed from, address indexed to, uint256 punkIndex);\\r\\n  event PunkOffered(uint256 indexed punkIndex, uint256 minValue, address indexed toAddress);\\r\\n  event PunkBidEntered(uint256 indexed punkIndex, uint256 value, address indexed fromAddress);\\r\\n  event PunkBidWithdrawn(uint256 indexed punkIndex, uint256 value, address indexed fromAddress);\\r\\n  event PunkBought(uint256 indexed punkIndex, uint256 value, address indexed fromAddress, address indexed toAddress);\\r\\n  event PunkNoLongerForSale(uint256 indexed punkIndex);\\r\\n\\r\\n  /* Initializes contract with initial supply tokens to the creator of the contract */\\r\\n  constructor() ERC721(\\\"CRYPTOPUNKS\\\", \\\"\\\\x3FE\\\"){\\r\\n    //        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\\r\\n    totalSupply = 10000; // Update total supply\\r\\n    punksRemainingToAssign = totalSupply;\\r\\n    decimals = 0; // Amount of decimals for display purposes\\r\\n  }\\r\\n\\r\\n  function setInitialOwner(address to, uint256 punkIndex) public onlyOwner {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket:  allPunksAssigned\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    if (punkIndexToAddress[punkIndex] != to) {\\r\\n      if (punkIndexToAddress[punkIndex] != address(0)) {      \\r\\n        _safeMint(to, punkIndex);\\r\\n      } else {\\r\\n        punksRemainingToAssign--;\\r\\n      }\\r\\n      punkIndexToAddress[punkIndex] = to;\\r\\n      \\r\\n      emit Assign(to, punkIndex);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setInitialOwners(address[] calldata addresses, uint256[] calldata indices) public onlyOwner {\\r\\n    uint256 n = addresses.length;\\r\\n    for (uint256 i = 0; i < n; i++) {\\r\\n      setInitialOwner(addresses[i], indices[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function allInitialOwnersAssigned() public onlyOwner {\\r\\n    allPunksAssigned = true;\\r\\n  }\\r\\n\\r\\n  function getPunk(uint256 punkIndex) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punksRemainingToAssign != 0, \\\"CryptoPunksMarket: empty punksRemainingToAssign\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == address(0), \\\"CryptoPunksMarket: already got\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n    require(balanceOf(msg.sender) <=3 , 'owner count out of bounds');\\r\\n\\r\\n    punkIndexToAddress[punkIndex] = msg.sender;\\r\\n    _safeMint(msg.sender, punkIndex);\\r\\n    punksRemainingToAssign--;\\r\\n\\r\\n    emit Assign(msg.sender, punkIndex);\\r\\n  }\\r\\n\\r\\n  // Transfer ownership of a punk to another user without requiring payment\\r\\n  function transferPunk(address to, uint256 punkIndex) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == msg.sender, \\\"CryptoPunksMarket: not owner\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    if (punksOfferedForSale[punkIndex].isForSale) {\\r\\n      punkNoLongerForSale(punkIndex);\\r\\n    }\\r\\n    punkIndexToAddress[punkIndex] = to;\\r\\n  \\r\\n    _transfer(msg.sender, to, punkIndex);\\r\\n\\r\\n    emit Transfer(msg.sender, to, 1);\\r\\n    emit PunkTransfer(msg.sender, to, punkIndex);\\r\\n\\r\\n    // Check for the case where there is a bid from the new owner and refund it.\\r\\n    // Any other bid can stay in place.\\r\\n    Bid memory bid = punkBids[punkIndex];\\r\\n    if (bid.bidder == to) {\\r\\n      // Kill bid and refund value\\r\\n      pendingWithdrawals[to] += bid.value;\\r\\n      punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function punkNoLongerForSale(uint256 punkIndex) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == msg.sender, \\\"CryptoPunksMarket: not owner\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    punksOfferedForSale[punkIndex] = Offer(false, punkIndex, msg.sender, 0, address(0));\\r\\n\\r\\n    emit PunkNoLongerForSale(punkIndex);\\r\\n  }\\r\\n\\r\\n  function offerPunkForSale(uint256 punkIndex, uint256 minSalePriceInWei) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == msg.sender, \\\"CryptoPunksMarket: not owner\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    punksOfferedForSale[punkIndex] = Offer(true, punkIndex, msg.sender, minSalePriceInWei, address(0));\\r\\n\\r\\n    emit PunkOffered(punkIndex, minSalePriceInWei, address(0));\\r\\n  }\\r\\n\\r\\n  function offerPunkForSaleToAddress(\\r\\n    uint256 punkIndex,\\r\\n    uint256 minSalePriceInWei,\\r\\n    address toAddress\\r\\n  ) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == msg.sender, \\\"CryptoPunksMarket: not owner\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    punksOfferedForSale[punkIndex] = Offer(true, punkIndex, msg.sender, minSalePriceInWei, toAddress);\\r\\n\\r\\n    emit PunkOffered(punkIndex, minSalePriceInWei, toAddress);\\r\\n  }\\r\\n\\r\\n  function buyPunk(uint256 punkIndex) public payable {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    Offer memory offer = punksOfferedForSale[punkIndex];\\r\\n    require(offer.isForSale, \\\"CryptoPunksMarket: punk not actually for sale\\\");\\r\\n    require(\\r\\n      offer.onlySellTo == address(0) || offer.onlySellTo == msg.sender,\\r\\n      \\\"CryptoPunksMarket: punk not supposed to be sold to this user\\\"\\r\\n    );\\r\\n\\r\\n    require(msg.value >= offer.minValue, \\\"CryptoPunksMarket: Didn't send enough ETH\\\");\\r\\n    require(offer.seller == punkIndexToAddress[punkIndex], \\\"CryptoPunksMarket: Seller no longer owner of punk\\\");\\r\\n\\r\\n    address seller = offer.seller;\\r\\n\\r\\n    punkIndexToAddress[punkIndex] = msg.sender;\\r\\n   \\r\\n   _transfer(seller, msg.sender, punkIndex);\\r\\n\\r\\n    emit Transfer(seller, msg.sender, 1);\\r\\n\\r\\n    punkNoLongerForSale(punkIndex);\\r\\n    pendingWithdrawals[seller] += msg.value;\\r\\n\\r\\n    emit PunkBought(punkIndex, msg.value, seller, msg.sender);\\r\\n\\r\\n    // Check for the case where there is a bid from the new owner and refund it.\\r\\n    // Any other bid can stay in place.\\r\\n    Bid memory bid = punkBids[punkIndex];\\r\\n    if (bid.bidder == msg.sender) {\\r\\n      // Kill bid and refund value\\r\\n      pendingWithdrawals[msg.sender] += bid.value;\\r\\n      punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function withdraw() public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n\\r\\n    uint256 amount = pendingWithdrawals[msg.sender];\\r\\n    // Remember to zero the pending refund before\\r\\n    // sending to prevent re-entrancy attacks\\r\\n    pendingWithdrawals[msg.sender] = 0;\\r\\n\\r\\n    _safeTransferETH(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function enterBidForPunk(uint256 punkIndex) public payable {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n    require(punkIndexToAddress[punkIndex] != msg.sender, \\\"CryptoPunksMarket: can not buy your own punk\\\");\\r\\n    require(punkIndexToAddress[punkIndex] != address(0), \\\"CryptoPunksMarket: can not buy unassigned punk\\\");\\r\\n    require(msg.value > 0, \\\"CryptoPunksMarket: should send eth value\\\");\\r\\n\\r\\n    Bid memory existing = punkBids[punkIndex];\\r\\n    require(msg.value > existing.value, \\\"CryptoPunksMarket: should send more eth value\\\");\\r\\n\\r\\n    if (existing.value > 0) {\\r\\n      // Refund the failing bid\\r\\n      pendingWithdrawals[existing.bidder] += existing.value;\\r\\n    }\\r\\n    punkBids[punkIndex] = Bid(true, punkIndex, msg.sender, msg.value);\\r\\n\\r\\n    emit PunkBidEntered(punkIndex, msg.value, msg.sender);\\r\\n  }\\r\\n\\r\\n  function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) public {\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] == msg.sender, \\\"CryptoPunksMarket: not owner\\\");\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n\\r\\n    address seller = msg.sender;\\r\\n\\r\\n    Bid memory bid = punkBids[punkIndex];\\r\\n    require(bid.value >= minPrice, \\\"CryptoPunksMarket: bid value to small\\\");\\r\\n\\r\\n    punkIndexToAddress[punkIndex] = bid.bidder;\\r\\n\\r\\n    _transfer(seller, bid.bidder, punkIndex);\\r\\n\\r\\n    emit Transfer(seller, bid.bidder, 1);\\r\\n\\r\\n    punksOfferedForSale[punkIndex] = Offer(false, punkIndex, bid.bidder, 0, address(0));\\r\\n    uint256 amount = bid.value;\\r\\n    punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\r\\n    pendingWithdrawals[seller] += amount;\\r\\n\\r\\n    emit PunkBought(punkIndex, bid.value, seller, bid.bidder);\\r\\n  }\\r\\n\\r\\n  function withdrawBidForPunk(uint256 punkIndex) public {\\r\\n    require(punkIndex < 10000, \\\"CryptoPunksMarket: punkIndex overflow\\\");\\r\\n    require(allPunksAssigned, \\\"CryptoPunksMarket: not allPunksAssigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] != address(0), \\\"CryptoPunksMarket: punk not assigned\\\");\\r\\n    require(punkIndexToAddress[punkIndex] != msg.sender, \\\"CryptoPunksMarket: can not withdraw self\\\");\\r\\n\\r\\n    Bid memory bid = punkBids[punkIndex];\\r\\n    require(bid.bidder == msg.sender, \\\"CryptoPunksMakrket: not bid bidder\\\");\\r\\n\\r\\n    emit PunkBidWithdrawn(punkIndex, bid.value, msg.sender);\\r\\n\\r\\n    uint256 amount = bid.value;\\r\\n\\r\\n    punkBids[punkIndex] = Bid(false, punkIndex, address(0), 0);\\r\\n\\r\\n    // Refund the bid money\\r\\n    _safeTransferETH(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev transfer ETH to an address, revert if it fails.\\r\\n   * @param to recipient of the transfer\\r\\n   * @param value the amount to send\\r\\n   */\\r\\n  function _safeTransferETH(address to, uint256 value) internal {\\r\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n    require(success, \\\"ETH_TRANSFER_FAILED\\\");\\r\\n  }\\r\\n\\r\\n  function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual        \\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(tokenId <= 10000, \\\"Nonexistent token\\\");\\r\\n\\r\\n        return string(abi.encodePacked(baseURI, toString(tokenId)));\\r\\n    }\\r\\n\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaf5f0a8a47bf1f99fbc45aed477a8be7a955ac8a07ebfe517e74a4d4dd7fd67f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040908152608081815290620049fd60a03980516200002991600791602090910190620001a3565b50604051806060016040528060318152602001620049cc6031913980516200005a91600891602090910190620001a3565b5060408051808201909152600b8082526a43727970746f50756e6b7360a81b60209092019182526200008f91600991620001a3565b506000600c819055600d805460ff19169055600e55348015620000b157600080fd5b50604080518082018252600b81526a43525950544f50554e4b5360a81b6020808301918252835180850190945260028452613f4560f01b908401528151919291620000ff91600091620001a3565b50805162000115906001906020840190620001a3565b505050620001326200012c6200014d60201b60201c565b62000151565b612710600b819055600e55600a805460ff1916905562000286565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001b19062000249565b90600052602060002090601f016020900481019282620001d5576000855562000220565b82601f10620001f057805160ff191683800117855562000220565b8280016001018555821562000220579182015b828111156200022057825182559160200191906001019062000203565b506200022e92915062000232565b5090565b5b808211156200022e576000815560010162000233565b600181811c908216806200025e57607f821691505b602082108114156200028057634e487b7160e01b600052602260045260246000fd5b50919050565b61473680620002966000396000f3fe6080604052600436106102c65760003560e01c806370a0823111610179578063a75a9049116100d6578063c81d1d5b1161008a578063f2fde38b11610064578063f2fde38b1461085a578063f3f437031461087a578063f6eeff1e146108a757600080fd5b8063c81d1d5b146107d1578063c87b56dd146107f1578063e985e9c51461081157600080fd5b8063bf31196f116100bb578063bf31196f1461077b578063c0d6ce631461079b578063c44193c3146107b157600080fd5b8063a75a90491461073b578063b88d4fde1461075b57600080fd5b80638b72a2ec1161012d57806395d89b411161011257806395d89b41146106e6578063979bc638146106fb578063a22cb4651461071b57600080fd5b80638b72a2ec146106a85780638da5cb5b146106c857600080fd5b80637ecedac91161015e5780637ecedac9146106665780638126c38a1461067b5780638264fe981461069557600080fd5b806370a0823114610631578063715018a61461065157600080fd5b806339c5dde61161022757806358178168116101db5780636352211e116101c05780636352211e146105795780636c0360eb146105995780636e743fa9146105ae57600080fd5b8063581781681461052e5780635a3b7e421461056457600080fd5b806342842e0e1161020c57806342842e0e146104e357806351605d801461050357806352f29a251461051857600080fd5b806339c5dde6146104ae5780633ccfd60b146104ce57600080fd5b8063095ea7b31161027e57806323165b751161026357806323165b751461044257806323b872dd14610462578063313ce5671461048257600080fd5b8063095ea7b3146103fe57806318160ddd1461041e57600080fd5b8063081812fc116102af578063081812fc14610322578063088f11f31461035a578063091dbfd2146103e957600080fd5b806301ffc9a7146102cb57806306fdde0314610300575b600080fd5b3480156102d757600080fd5b506102eb6102e6366004614278565b6108c7565b60405190151581526020015b60405180910390f35b34801561030c57600080fd5b506103156109ac565b6040516102f791906144be565b34801561032e57600080fd5b5061034261033d3660046142b2565b610a3e565b6040516001600160a01b0390911681526020016102f7565b34801561036657600080fd5b506103b36103753660046142b2565b6010602052600090815260409020805460018201546002830154600384015460049094015460ff9093169391926001600160a01b0391821692911685565b60408051951515865260208601949094526001600160a01b0392831693850193909352606084015216608082015260a0016102f7565b6103fc6103f73660046142b2565b610ae9565b005b34801561040a57600080fd5b506103fc6104193660046141e2565b610f50565b34801561042a57600080fd5b50610434600b5481565b6040519081526020016102f7565b34801561044e57600080fd5b506103fc61045d3660046142cb565b611082565b34801561046e57600080fd5b506103fc61047d366004614070565b61156c565b34801561048e57600080fd5b50600a5461049c9060ff1681565b60405160ff90911681526020016102f7565b3480156104ba57600080fd5b506103fc6104c936600461420c565b6115f3565b3480156104da57600080fd5b506103fc6116bb565b3480156104ef57600080fd5b506103fc6104fe366004614070565b611755565b34801561050f57600080fd5b50610315611770565b34801561052457600080fd5b50610434600c5481565b34801561053a57600080fd5b506103426105493660046142b2565b600f602052600090815260409020546001600160a01b031681565b34801561057057600080fd5b506103156117fe565b34801561058557600080fd5b506103426105943660046142b2565b61180b565b3480156105a557600080fd5b50610315611896565b3480156105ba57600080fd5b506106006105c93660046142b2565b601160205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b039091169084565b6040516102f79493929190931515845260208401929092526001600160a01b03166040830152606082015260800190565b34801561063d57600080fd5b5061043461064c36600461401b565b6118a3565b34801561065d57600080fd5b506103fc61193d565b34801561067257600080fd5b506103fc6119a3565b34801561068757600080fd5b50600d546102eb9060ff1681565b6103fc6106a33660046142b2565b611a2a565b3480156106b457600080fd5b506103fc6106c33660046141e2565b611fb7565b3480156106d457600080fd5b506006546001600160a01b0316610342565b3480156106f257600080fd5b50610315612329565b34801561070757600080fd5b506103fc6107163660046142b2565b612338565b34801561072757600080fd5b506103fc6107363660046141a6565b6126fd565b34801561074757600080fd5b506103fc6107563660046141e2565b61270c565b34801561076757600080fd5b506103fc6107763660046140ac565b612931565b34801561078757600080fd5b506103fc6107963660046142ed565b6129b9565b3480156107a757600080fd5b50610434600e5481565b3480156107bd57600080fd5b506103fc6107cc3660046142cb565b612c0f565b3480156107dd57600080fd5b506103fc6107ec3660046142b2565b612e59565b3480156107fd57600080fd5b5061031561080c3660046142b2565b61310b565b34801561081d57600080fd5b506102eb61082c36600461403d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561086657600080fd5b506103fc61087536600461401b565b613191565b34801561088657600080fd5b5061043461089536600461401b565b60126020526000908152604090205481565b3480156108b357600080fd5b506103fc6108c23660046142b2565b613270565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061095a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109a657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546109bb90614575565b80601f01602080910402602001604051908101604052809291908181526020018280546109e790614575565b8015610a345780601f10610a0957610100808354040283529160200191610a34565b820191906000526020600020905b815481529060010190602001808311610a1757829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610acd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600d5460ff16610b615760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6127108110610bd85760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b0316331415610c655760405162461bcd60e51b815260206004820152602c60248201527f43727970746f50756e6b734d61726b65743a2063616e206e6f7420627579207960448201527f6f7572206f776e2070756e6b00000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b0316610cef5760405162461bcd60e51b815260206004820152602e60248201527f43727970746f50756e6b734d61726b65743a2063616e206e6f7420627579207560448201527f6e61737369676e65642070756e6b0000000000000000000000000000000000006064820152608401610ac4565b60003411610d655760405162461bcd60e51b815260206004820152602860248201527f43727970746f50756e6b734d61726b65743a2073686f756c642073656e64206560448201527f74682076616c75650000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152601160209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b031692820192909252600390910154606082018190523411610e2a5760405162461bcd60e51b815260206004820152602d60248201527f43727970746f50756e6b734d61726b65743a2073686f756c642073656e64206d60448201527f6f7265206574682076616c7565000000000000000000000000000000000000006064820152608401610ac4565b606081015115610e6b5760608101516040808301516001600160a01b0316600090815260126020529081208054909190610e659084906144d1565b90915550505b604080516080810182526001808252602080830186815233848601818152346060870181815260008b815260118752899020975188547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016901515178855935195870195909555516002860180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905590516003909401939093559251908152909184917f5b859394fabae0c1ba88baffe67e751ab5248d2e879028b8c8d6897b0519f56a91015b60405180910390a35050565b6000610f5b8261180b565b9050806001600160a01b0316836001600160a01b03161415610fe55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610ac4565b336001600160a01b03821614806110015750611001813361082c565b6110735760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ac4565b61107d83836134b1565b505050565b600d5460ff166110fa5760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000828152600f60205260409020546001600160a01b031633146111605760405162461bcd60e51b815260206004820152601c60248201527f43727970746f50756e6b734d61726b65743a206e6f74206f776e6572000000006044820152606401610ac4565b61271082106111d75760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000828152601160209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b031692820192909252600390910154606082018190523391908311156112a05760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a206269642076616c756520746f2060448201527f736d616c6c0000000000000000000000000000000000000000000000000000006064820152608401610ac4565b604081810180516000878152600f6020529290922080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390931692909217909155516112f890839086613537565b600181604001516001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46040518060a0016040528060001515815260200185815260200182604001516001600160a01b031681526020016000815260200160006001600160a01b03168152506010600086815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015560808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050600081606001519050604051806080016040528060001515815260200186815260200160006001600160a01b0316815260200160008152506011600087815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301559050508060126000856001600160a01b03166001600160a01b03168152602001908152602001600020600082825461150891906144d1565b9250508190555081604001516001600160a01b0316836001600160a01b0316867f58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e3856060015160405161155d91815260200190565b60405180910390a45050505050565b611576338261371c565b6115e85760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ac4565b61107d838383613537565b6006546001600160a01b0316331461164d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac4565b8260005b818110156116b3576116a186868381811061166e5761166e614674565b9050602002016020810190611683919061401b565b85858481811061169557611695614674565b9050602002013561270c565b806116ab816145c9565b915050611651565b505050505050565b600d5460ff166117335760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b3360008181526012602052604081208054919055906117529082613824565b50565b61107d83838360405180602001604052806000815250612931565b6007805461177d90614575565b80601f01602080910402602001604051908101604052809291908181526020018280546117a990614575565b80156117f65780601f106117cb576101008083540402835291602001916117f6565b820191906000526020600020905b8154815290600101906020018083116117d957829003601f168201915b505050505081565b6009805461177d90614575565b6000818152600260205260408120546001600160a01b0316806109a65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610ac4565b6008805461177d90614575565b60006001600160a01b0382166119215760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610ac4565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146119975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac4565b6119a160006138e1565b565b6006546001600160a01b031633146119fd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac4565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b600d5460ff16611aa25760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6127108110611b195760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b600081815260106020908152604091829020825160a081018452815460ff16151580825260018301549382019390935260028201546001600160a01b0390811694820194909452600382015460608201526004909101549092166080830152611bea5760405162461bcd60e51b815260206004820152602d60248201527f43727970746f50756e6b734d61726b65743a2070756e6b206e6f74206163747560448201527f616c6c7920666f722073616c65000000000000000000000000000000000000006064820152608401610ac4565b60808101516001600160a01b03161580611c10575060808101516001600160a01b031633145b611c825760405162461bcd60e51b815260206004820152603c60248201527f43727970746f50756e6b734d61726b65743a2070756e6b206e6f74207375707060448201527f6f73656420746f20626520736f6c6420746f20746869732075736572000000006064820152608401610ac4565b8060600151341015611cfc5760405162461bcd60e51b815260206004820152602960248201527f43727970746f50756e6b734d61726b65743a204469646e27742073656e64206560448201527f6e6f7567682045544800000000000000000000000000000000000000000000006064820152608401610ac4565b6000828152600f60205260409081902054908201516001600160a01b03908116911614611d915760405162461bcd60e51b815260206004820152603160248201527f43727970746f50756e6b734d61726b65743a2053656c6c6572206e6f206c6f6e60448201527f676572206f776e6572206f662070756e6b0000000000000000000000000000006064820152608401610ac4565b6040808201516000848152600f6020529190912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155611ddc90829085613537565b60405160019033906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4611e1e83613270565b6001600160a01b03811660009081526012602052604081208054349290611e469084906144d1565b909155505060405134815233906001600160a01b0383169085907f58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e39060200160405180910390a46000838152601160209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b031692820183905260030154606082015290331415611fb15760608101513360009081526012602052604081208054909190611f059084906144d1565b90915550506040805160808101825260008082526020808301888152838501838152606085018481528a8552601190935294909220925183547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169015151783559051600183015591516002820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905590516003909101555b50505050565b600d5460ff1661202f5760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b031633146120955760405162461bcd60e51b815260206004820152601c60248201527f43727970746f50756e6b734d61726b65743a206e6f74206f776e6572000000006044820152606401610ac4565b612710811061210c5760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b60008181526010602052604090205460ff161561212c5761212c81613270565b6000818152600f6020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416179055612176338383613537565b6040516001906001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a46040518181526001600160a01b0383169033907f05af636b70da6819000c49f85b21fa82081c632069bb626f30932034099107d89060200160405180910390a36000818152601160209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b0390811693830184905260039091015460608301529091908416141561107d5760608101516001600160a01b038416600090815260126020526040812080549091906122779084906144d1565b9091555050604080516080810182526000808252602080830186815283850183815260608501848152978452601190925293909120915182547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169015151782559151600182015590516002820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905591516003909201919091555050565b6060600180546109bb90614575565b61271081106123af5760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b600d5460ff166124275760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b03166124b05760405162461bcd60e51b8152602060048201526024808201527f43727970746f50756e6b734d61726b65743a2070756e6b206e6f74206173736960448201527f676e6564000000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b031633141561253d5760405162461bcd60e51b815260206004820152602860248201527f43727970746f50756e6b734d61726b65743a2063616e206e6f7420776974686460448201527f7261772073656c660000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152601160209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b03169282018390526003015460608201529033146125fe5760405162461bcd60e51b815260206004820152602260248201527f43727970746f50756e6b734d616b726b65743a206e6f7420626964206269646460448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610ac4565b336001600160a01b0316827f6f30e1ee4d81dcc7a8a478577f65d2ed2edb120565960ac45fe7c50551c87932836060015160405161263e91815260200190565b60405180910390a36060818101516040805160808101825260008082526020808301888152838501838152968401838152898452601190925293909120915182547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169015151782559151600182015592516002840180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039092169190911790555160039092019190915561107d3382613824565b61270833838361394b565b5050565b6006546001600160a01b031633146127665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac4565b600d5460ff166127dd5760405162461bcd60e51b8152602060048201526024808201527f43727970746f50756e6b734d61726b65743a2020616c6c50756e6b734173736960448201527f676e6564000000000000000000000000000000000000000000000000000000006064820152608401610ac4565b61271081106128545760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b03838116911614612708576000818152600f60205260409020546001600160a01b0316156128a15761289c8282613a30565b6128b7565b600e80549060006128b183614540565b91905055505b6000818152600f602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915591518381527f8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba910160405180910390a25050565b61293b338361371c565b6129ad5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ac4565b611fb184848484613a4a565b600d5460ff16612a315760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000838152600f60205260409020546001600160a01b03163314612a975760405162461bcd60e51b815260206004820152601c60248201527f43727970746f50756e6b734d61726b65743a206e6f74206f776e6572000000006044820152606401610ac4565b6127108310612b0e5760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6040805160a0810182526001808252602080830187815233848601908152606085018881526001600160a01b038881166080880181815260008d8152601088528a9020985189547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690151517895594519688019690965591516002870180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811692851692909217905590516003870155915160049095018054909216941693909317909255915184815285917f3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb91015b60405180910390a3505050565b600d5460ff16612c875760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000828152600f60205260409020546001600160a01b03163314612ced5760405162461bcd60e51b815260206004820152601c60248201527f43727970746f50756e6b734d61726b65743a206e6f74206f776e6572000000006044820152606401610ac4565b6127108210612d645760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6040805160a0810182526001808252602080830186815233848601908152606085018781526000608087018181528a825260108652888220975188547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690151517885593519587019590955590516002860180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b0393841617909155915160038701559151600490950180549091169490911693909317909255915183815284917f3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb9101610f44565b600d5460ff16612ed15760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b600e54612f465760405162461bcd60e51b815260206004820152602f60248201527f43727970746f50756e6b734d61726b65743a20656d7074792070756e6b73526560448201527f6d61696e696e67546f41737369676e00000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b031615612fab5760405162461bcd60e51b815260206004820152601e60248201527f43727970746f50756e6b734d61726b65743a20616c726561647920676f7400006044820152606401610ac4565b61271081106130225760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b600361302d336118a3565b111561307b5760405162461bcd60e51b815260206004820152601960248201527f6f776e657220636f756e74206f7574206f6620626f756e6473000000000000006044820152606401610ac4565b6000818152600f6020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556130be9082613a30565b600e80549060006130ce83614540565b909155505060405181815233907f8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba9060200160405180910390a250565b606061271082111561315f5760405162461bcd60e51b815260206004820152601160248201527f4e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006044820152606401610ac4565b600861316a83613ad3565b60405160200161317b9291906143a4565b6040516020818303038152906040529050919050565b6006546001600160a01b031633146131eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac4565b6001600160a01b0381166132675760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610ac4565b611752816138e1565b600d5460ff166132e85760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b0316331461334e5760405162461bcd60e51b815260206004820152601c60248201527f43727970746f50756e6b734d61726b65743a206e6f74206f776e6572000000006044820152606401610ac4565b61271081106133c55760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6040805160a081018252600080825260208083018581523384860190815260608501848152608086018581528886526010909452868520955186547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690151517865591516001860155516002850180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b0393841617909155915160038601559151600490940180549091169390911692909217909155905182917fb0e0a660b4e50f26f0b7ce75c24655fc76cc66e3334a54ff410277229fa10bd491a250565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915581906134fe8261180b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b826001600160a01b031661354a8261180b565b6001600160a01b0316146135c65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6001600160a01b0382166136415760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610ac4565b61364c6000826134b1565b6001600160a01b03831660009081526003602052604081208054600192906136759084906144fd565b90915550506001600160a01b03821660009081526003602052604081208054600192906136a39084906144d1565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000818152600260205260408120546001600160a01b03166137a65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610ac4565b60006137b18361180b565b9050806001600160a01b0316846001600160a01b031614806137ec5750836001600160a01b03166137e184610a3e565b6001600160a01b0316145b8061381c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b604080516000808252602082019092526001600160a01b03841690839060405161384e9190614388565b60006040518083038185875af1925050503d806000811461388b576040519150601f19603f3d011682016040523d82523d6000602084013e613890565b606091505b505090508061107d5760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610ac4565b600680546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156139ad5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ac4565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101612c02565b612708828260405180602001604052806000815250613c05565b613a55848484613537565b613a6184848484613c8e565b611fb15760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac4565b606081613b1357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115613b3d5780613b27816145c9565b9150613b369050600a836144e9565b9150613b17565b60008167ffffffffffffffff811115613b5857613b586146a3565b6040519080825280601f01601f191660200182016040528015613b82576020820181803683370190505b5090505b841561381c57613b976001836144fd565b9150613ba4600a86614602565b613baf9060306144d1565b60f81b818381518110613bc457613bc4614674565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613bfe600a866144e9565b9450613b86565b613c0f8383613e59565b613c1c6000848484613c8e565b61107d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac4565b60006001600160a01b0384163b15613e4e576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290613ceb903390899088908890600401614482565b602060405180830381600087803b158015613d0557600080fd5b505af1925050508015613d53575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252613d5091810190614295565b60015b613e03573d808015613d81576040519150601f19603f3d011682016040523d82523d6000602084013e613d86565b606091505b508051613dfb5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac4565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061381c565b506001949350505050565b6001600160a01b038216613eaf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ac4565b6000818152600260205260409020546001600160a01b031615613f145760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ac4565b6001600160a01b0382166000908152600360205260408120805460019290613f3d9084906144d1565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b0381168114613fca57600080fd5b919050565b60008083601f840112613fe157600080fd5b50813567ffffffffffffffff811115613ff957600080fd5b6020830191508360208260051b850101111561401457600080fd5b9250929050565b60006020828403121561402d57600080fd5b61403682613fb3565b9392505050565b6000806040838503121561405057600080fd5b61405983613fb3565b915061406760208401613fb3565b90509250929050565b60008060006060848603121561408557600080fd5b61408e84613fb3565b925061409c60208501613fb3565b9150604084013590509250925092565b600080600080608085870312156140c257600080fd5b6140cb85613fb3565b93506140d960208601613fb3565b925060408501359150606085013567ffffffffffffffff808211156140fd57600080fd5b818701915087601f83011261411157600080fd5b813581811115614123576141236146a3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715614169576141696146a3565b816040528281528a602084870101111561418257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156141b957600080fd5b6141c283613fb3565b9150602083013580151581146141d757600080fd5b809150509250929050565b600080604083850312156141f557600080fd5b6141fe83613fb3565b946020939093013593505050565b6000806000806040858703121561422257600080fd5b843567ffffffffffffffff8082111561423a57600080fd5b61424688838901613fcf565b9096509450602087013591508082111561425f57600080fd5b5061426c87828801613fcf565b95989497509550505050565b60006020828403121561428a57600080fd5b8135614036816146d2565b6000602082840312156142a757600080fd5b8151614036816146d2565b6000602082840312156142c457600080fd5b5035919050565b600080604083850312156142de57600080fd5b50508035926020909101359150565b60008060006060848603121561430257600080fd5b833592506020840135915061431960408501613fb3565b90509250925092565b6000815180845261433a816020860160208601614514565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000815161437e818560208601614514565b9290920192915050565b6000825161439a818460208701614514565b9190910192915050565b600080845481600182811c9150808316806143c057607f831692505b60208084108214156143f9577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b81801561440d576001811461443c57614469565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650614469565b60008b81526020902060005b868110156144615781548b820152908501908301614448565b505084890196505b505050505050614479818561436c565b95945050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526144b46080830184614322565b9695505050505050565b6020815260006140366020830184614322565b600082198211156144e4576144e4614616565b500190565b6000826144f8576144f8614645565b500490565b60008282101561450f5761450f614616565b500390565b60005b8381101561452f578181015183820152602001614517565b83811115611fb15750506000910152565b60008161454f5761454f614616565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600181811c9082168061458957607f821691505b602082108114156145c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156145fb576145fb614616565b5060010190565b60008261461157614611614645565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461175257600080fdfea26469706673582212209ee01539a37626dbcc7969604ef155674e917a9095f43865786d1ccdf3908e1064736f6c6343000806003368747470733a2f2f7772617070656470756e6b732e636f6d3a333030302f6170692f70756e6b732f6d657461646174612f61633339616634373933313139656534366262666633353164386362366235663233646136303232323132366164643432363865323631313939613239323162",
  "deployedBytecode": "0x6080604052600436106102c65760003560e01c806370a0823111610179578063a75a9049116100d6578063c81d1d5b1161008a578063f2fde38b11610064578063f2fde38b1461085a578063f3f437031461087a578063f6eeff1e146108a757600080fd5b8063c81d1d5b146107d1578063c87b56dd146107f1578063e985e9c51461081157600080fd5b8063bf31196f116100bb578063bf31196f1461077b578063c0d6ce631461079b578063c44193c3146107b157600080fd5b8063a75a90491461073b578063b88d4fde1461075b57600080fd5b80638b72a2ec1161012d57806395d89b411161011257806395d89b41146106e6578063979bc638146106fb578063a22cb4651461071b57600080fd5b80638b72a2ec146106a85780638da5cb5b146106c857600080fd5b80637ecedac91161015e5780637ecedac9146106665780638126c38a1461067b5780638264fe981461069557600080fd5b806370a0823114610631578063715018a61461065157600080fd5b806339c5dde61161022757806358178168116101db5780636352211e116101c05780636352211e146105795780636c0360eb146105995780636e743fa9146105ae57600080fd5b8063581781681461052e5780635a3b7e421461056457600080fd5b806342842e0e1161020c57806342842e0e146104e357806351605d801461050357806352f29a251461051857600080fd5b806339c5dde6146104ae5780633ccfd60b146104ce57600080fd5b8063095ea7b31161027e57806323165b751161026357806323165b751461044257806323b872dd14610462578063313ce5671461048257600080fd5b8063095ea7b3146103fe57806318160ddd1461041e57600080fd5b8063081812fc116102af578063081812fc14610322578063088f11f31461035a578063091dbfd2146103e957600080fd5b806301ffc9a7146102cb57806306fdde0314610300575b600080fd5b3480156102d757600080fd5b506102eb6102e6366004614278565b6108c7565b60405190151581526020015b60405180910390f35b34801561030c57600080fd5b506103156109ac565b6040516102f791906144be565b34801561032e57600080fd5b5061034261033d3660046142b2565b610a3e565b6040516001600160a01b0390911681526020016102f7565b34801561036657600080fd5b506103b36103753660046142b2565b6010602052600090815260409020805460018201546002830154600384015460049094015460ff9093169391926001600160a01b0391821692911685565b60408051951515865260208601949094526001600160a01b0392831693850193909352606084015216608082015260a0016102f7565b6103fc6103f73660046142b2565b610ae9565b005b34801561040a57600080fd5b506103fc6104193660046141e2565b610f50565b34801561042a57600080fd5b50610434600b5481565b6040519081526020016102f7565b34801561044e57600080fd5b506103fc61045d3660046142cb565b611082565b34801561046e57600080fd5b506103fc61047d366004614070565b61156c565b34801561048e57600080fd5b50600a5461049c9060ff1681565b60405160ff90911681526020016102f7565b3480156104ba57600080fd5b506103fc6104c936600461420c565b6115f3565b3480156104da57600080fd5b506103fc6116bb565b3480156104ef57600080fd5b506103fc6104fe366004614070565b611755565b34801561050f57600080fd5b50610315611770565b34801561052457600080fd5b50610434600c5481565b34801561053a57600080fd5b506103426105493660046142b2565b600f602052600090815260409020546001600160a01b031681565b34801561057057600080fd5b506103156117fe565b34801561058557600080fd5b506103426105943660046142b2565b61180b565b3480156105a557600080fd5b50610315611896565b3480156105ba57600080fd5b506106006105c93660046142b2565b601160205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b039091169084565b6040516102f79493929190931515845260208401929092526001600160a01b03166040830152606082015260800190565b34801561063d57600080fd5b5061043461064c36600461401b565b6118a3565b34801561065d57600080fd5b506103fc61193d565b34801561067257600080fd5b506103fc6119a3565b34801561068757600080fd5b50600d546102eb9060ff1681565b6103fc6106a33660046142b2565b611a2a565b3480156106b457600080fd5b506103fc6106c33660046141e2565b611fb7565b3480156106d457600080fd5b506006546001600160a01b0316610342565b3480156106f257600080fd5b50610315612329565b34801561070757600080fd5b506103fc6107163660046142b2565b612338565b34801561072757600080fd5b506103fc6107363660046141a6565b6126fd565b34801561074757600080fd5b506103fc6107563660046141e2565b61270c565b34801561076757600080fd5b506103fc6107763660046140ac565b612931565b34801561078757600080fd5b506103fc6107963660046142ed565b6129b9565b3480156107a757600080fd5b50610434600e5481565b3480156107bd57600080fd5b506103fc6107cc3660046142cb565b612c0f565b3480156107dd57600080fd5b506103fc6107ec3660046142b2565b612e59565b3480156107fd57600080fd5b5061031561080c3660046142b2565b61310b565b34801561081d57600080fd5b506102eb61082c36600461403d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561086657600080fd5b506103fc61087536600461401b565b613191565b34801561088657600080fd5b5061043461089536600461401b565b60126020526000908152604090205481565b3480156108b357600080fd5b506103fc6108c23660046142b2565b613270565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061095a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109a657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546109bb90614575565b80601f01602080910402602001604051908101604052809291908181526020018280546109e790614575565b8015610a345780601f10610a0957610100808354040283529160200191610a34565b820191906000526020600020905b815481529060010190602001808311610a1757829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610acd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600d5460ff16610b615760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6127108110610bd85760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b0316331415610c655760405162461bcd60e51b815260206004820152602c60248201527f43727970746f50756e6b734d61726b65743a2063616e206e6f7420627579207960448201527f6f7572206f776e2070756e6b00000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b0316610cef5760405162461bcd60e51b815260206004820152602e60248201527f43727970746f50756e6b734d61726b65743a2063616e206e6f7420627579207560448201527f6e61737369676e65642070756e6b0000000000000000000000000000000000006064820152608401610ac4565b60003411610d655760405162461bcd60e51b815260206004820152602860248201527f43727970746f50756e6b734d61726b65743a2073686f756c642073656e64206560448201527f74682076616c75650000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152601160209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b031692820192909252600390910154606082018190523411610e2a5760405162461bcd60e51b815260206004820152602d60248201527f43727970746f50756e6b734d61726b65743a2073686f756c642073656e64206d60448201527f6f7265206574682076616c7565000000000000000000000000000000000000006064820152608401610ac4565b606081015115610e6b5760608101516040808301516001600160a01b0316600090815260126020529081208054909190610e659084906144d1565b90915550505b604080516080810182526001808252602080830186815233848601818152346060870181815260008b815260118752899020975188547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016901515178855935195870195909555516002860180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905590516003909401939093559251908152909184917f5b859394fabae0c1ba88baffe67e751ab5248d2e879028b8c8d6897b0519f56a91015b60405180910390a35050565b6000610f5b8261180b565b9050806001600160a01b0316836001600160a01b03161415610fe55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610ac4565b336001600160a01b03821614806110015750611001813361082c565b6110735760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ac4565b61107d83836134b1565b505050565b600d5460ff166110fa5760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000828152600f60205260409020546001600160a01b031633146111605760405162461bcd60e51b815260206004820152601c60248201527f43727970746f50756e6b734d61726b65743a206e6f74206f776e6572000000006044820152606401610ac4565b61271082106111d75760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000828152601160209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b031692820192909252600390910154606082018190523391908311156112a05760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a206269642076616c756520746f2060448201527f736d616c6c0000000000000000000000000000000000000000000000000000006064820152608401610ac4565b604081810180516000878152600f6020529290922080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390931692909217909155516112f890839086613537565b600181604001516001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46040518060a0016040528060001515815260200185815260200182604001516001600160a01b031681526020016000815260200160006001600160a01b03168152506010600086815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015560808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050600081606001519050604051806080016040528060001515815260200186815260200160006001600160a01b0316815260200160008152506011600087815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301559050508060126000856001600160a01b03166001600160a01b03168152602001908152602001600020600082825461150891906144d1565b9250508190555081604001516001600160a01b0316836001600160a01b0316867f58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e3856060015160405161155d91815260200190565b60405180910390a45050505050565b611576338261371c565b6115e85760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ac4565b61107d838383613537565b6006546001600160a01b0316331461164d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac4565b8260005b818110156116b3576116a186868381811061166e5761166e614674565b9050602002016020810190611683919061401b565b85858481811061169557611695614674565b9050602002013561270c565b806116ab816145c9565b915050611651565b505050505050565b600d5460ff166117335760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b3360008181526012602052604081208054919055906117529082613824565b50565b61107d83838360405180602001604052806000815250612931565b6007805461177d90614575565b80601f01602080910402602001604051908101604052809291908181526020018280546117a990614575565b80156117f65780601f106117cb576101008083540402835291602001916117f6565b820191906000526020600020905b8154815290600101906020018083116117d957829003601f168201915b505050505081565b6009805461177d90614575565b6000818152600260205260408120546001600160a01b0316806109a65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610ac4565b6008805461177d90614575565b60006001600160a01b0382166119215760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610ac4565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146119975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac4565b6119a160006138e1565b565b6006546001600160a01b031633146119fd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac4565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b600d5460ff16611aa25760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6127108110611b195760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b600081815260106020908152604091829020825160a081018452815460ff16151580825260018301549382019390935260028201546001600160a01b0390811694820194909452600382015460608201526004909101549092166080830152611bea5760405162461bcd60e51b815260206004820152602d60248201527f43727970746f50756e6b734d61726b65743a2070756e6b206e6f74206163747560448201527f616c6c7920666f722073616c65000000000000000000000000000000000000006064820152608401610ac4565b60808101516001600160a01b03161580611c10575060808101516001600160a01b031633145b611c825760405162461bcd60e51b815260206004820152603c60248201527f43727970746f50756e6b734d61726b65743a2070756e6b206e6f74207375707060448201527f6f73656420746f20626520736f6c6420746f20746869732075736572000000006064820152608401610ac4565b8060600151341015611cfc5760405162461bcd60e51b815260206004820152602960248201527f43727970746f50756e6b734d61726b65743a204469646e27742073656e64206560448201527f6e6f7567682045544800000000000000000000000000000000000000000000006064820152608401610ac4565b6000828152600f60205260409081902054908201516001600160a01b03908116911614611d915760405162461bcd60e51b815260206004820152603160248201527f43727970746f50756e6b734d61726b65743a2053656c6c6572206e6f206c6f6e60448201527f676572206f776e6572206f662070756e6b0000000000000000000000000000006064820152608401610ac4565b6040808201516000848152600f6020529190912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155611ddc90829085613537565b60405160019033906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4611e1e83613270565b6001600160a01b03811660009081526012602052604081208054349290611e469084906144d1565b909155505060405134815233906001600160a01b0383169085907f58e5d5a525e3b40bc15abaa38b5882678db1ee68befd2f60bafe3a7fd06db9e39060200160405180910390a46000838152601160209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b031692820183905260030154606082015290331415611fb15760608101513360009081526012602052604081208054909190611f059084906144d1565b90915550506040805160808101825260008082526020808301888152838501838152606085018481528a8552601190935294909220925183547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169015151783559051600183015591516002820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905590516003909101555b50505050565b600d5460ff1661202f5760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b031633146120955760405162461bcd60e51b815260206004820152601c60248201527f43727970746f50756e6b734d61726b65743a206e6f74206f776e6572000000006044820152606401610ac4565b612710811061210c5760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b60008181526010602052604090205460ff161561212c5761212c81613270565b6000818152600f6020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416179055612176338383613537565b6040516001906001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a46040518181526001600160a01b0383169033907f05af636b70da6819000c49f85b21fa82081c632069bb626f30932034099107d89060200160405180910390a36000818152601160209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b0390811693830184905260039091015460608301529091908416141561107d5760608101516001600160a01b038416600090815260126020526040812080549091906122779084906144d1565b9091555050604080516080810182526000808252602080830186815283850183815260608501848152978452601190925293909120915182547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169015151782559151600182015590516002820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905591516003909201919091555050565b6060600180546109bb90614575565b61271081106123af5760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b600d5460ff166124275760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b03166124b05760405162461bcd60e51b8152602060048201526024808201527f43727970746f50756e6b734d61726b65743a2070756e6b206e6f74206173736960448201527f676e6564000000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b031633141561253d5760405162461bcd60e51b815260206004820152602860248201527f43727970746f50756e6b734d61726b65743a2063616e206e6f7420776974686460448201527f7261772073656c660000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152601160209081526040918290208251608081018452815460ff161515815260018201549281019290925260028101546001600160a01b03169282018390526003015460608201529033146125fe5760405162461bcd60e51b815260206004820152602260248201527f43727970746f50756e6b734d616b726b65743a206e6f7420626964206269646460448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610ac4565b336001600160a01b0316827f6f30e1ee4d81dcc7a8a478577f65d2ed2edb120565960ac45fe7c50551c87932836060015160405161263e91815260200190565b60405180910390a36060818101516040805160808101825260008082526020808301888152838501838152968401838152898452601190925293909120915182547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169015151782559151600182015592516002840180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039092169190911790555160039092019190915561107d3382613824565b61270833838361394b565b5050565b6006546001600160a01b031633146127665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac4565b600d5460ff166127dd5760405162461bcd60e51b8152602060048201526024808201527f43727970746f50756e6b734d61726b65743a2020616c6c50756e6b734173736960448201527f676e6564000000000000000000000000000000000000000000000000000000006064820152608401610ac4565b61271081106128545760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b03838116911614612708576000818152600f60205260409020546001600160a01b0316156128a15761289c8282613a30565b6128b7565b600e80549060006128b183614540565b91905055505b6000818152600f602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915591518381527f8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba910160405180910390a25050565b61293b338361371c565b6129ad5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ac4565b611fb184848484613a4a565b600d5460ff16612a315760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000838152600f60205260409020546001600160a01b03163314612a975760405162461bcd60e51b815260206004820152601c60248201527f43727970746f50756e6b734d61726b65743a206e6f74206f776e6572000000006044820152606401610ac4565b6127108310612b0e5760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6040805160a0810182526001808252602080830187815233848601908152606085018881526001600160a01b038881166080880181815260008d8152601088528a9020985189547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690151517895594519688019690965591516002870180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811692851692909217905590516003870155915160049095018054909216941693909317909255915184815285917f3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb91015b60405180910390a3505050565b600d5460ff16612c875760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000828152600f60205260409020546001600160a01b03163314612ced5760405162461bcd60e51b815260206004820152601c60248201527f43727970746f50756e6b734d61726b65743a206e6f74206f776e6572000000006044820152606401610ac4565b6127108210612d645760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6040805160a0810182526001808252602080830186815233848601908152606085018781526000608087018181528a825260108652888220975188547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690151517885593519587019590955590516002860180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b0393841617909155915160038701559151600490950180549091169490911693909317909255915183815284917f3c7b682d5da98001a9b8cbda6c647d2c63d698a4184fd1d55e2ce7b66f5d21eb9101610f44565b600d5460ff16612ed15760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b600e54612f465760405162461bcd60e51b815260206004820152602f60248201527f43727970746f50756e6b734d61726b65743a20656d7074792070756e6b73526560448201527f6d61696e696e67546f41737369676e00000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b031615612fab5760405162461bcd60e51b815260206004820152601e60248201527f43727970746f50756e6b734d61726b65743a20616c726561647920676f7400006044820152606401610ac4565b61271081106130225760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b600361302d336118a3565b111561307b5760405162461bcd60e51b815260206004820152601960248201527f6f776e657220636f756e74206f7574206f6620626f756e6473000000000000006044820152606401610ac4565b6000818152600f6020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016339081179091556130be9082613a30565b600e80549060006130ce83614540565b909155505060405181815233907f8a0e37b73a0d9c82e205d4d1a3ff3d0b57ce5f4d7bccf6bac03336dc101cb7ba9060200160405180910390a250565b606061271082111561315f5760405162461bcd60e51b815260206004820152601160248201527f4e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006044820152606401610ac4565b600861316a83613ad3565b60405160200161317b9291906143a4565b6040516020818303038152906040529050919050565b6006546001600160a01b031633146131eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac4565b6001600160a01b0381166132675760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610ac4565b611752816138e1565b600d5460ff166132e85760405162461bcd60e51b815260206004820152602760248201527f43727970746f50756e6b734d61726b65743a206e6f7420616c6c50756e6b734160448201527f737369676e6564000000000000000000000000000000000000000000000000006064820152608401610ac4565b6000818152600f60205260409020546001600160a01b0316331461334e5760405162461bcd60e51b815260206004820152601c60248201527f43727970746f50756e6b734d61726b65743a206e6f74206f776e6572000000006044820152606401610ac4565b61271081106133c55760405162461bcd60e51b815260206004820152602560248201527f43727970746f50756e6b734d61726b65743a2070756e6b496e646578206f766560448201527f72666c6f770000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6040805160a081018252600080825260208083018581523384860190815260608501848152608086018581528886526010909452868520955186547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690151517865591516001860155516002850180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b0393841617909155915160038601559151600490940180549091169390911692909217909155905182917fb0e0a660b4e50f26f0b7ce75c24655fc76cc66e3334a54ff410277229fa10bd491a250565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915581906134fe8261180b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b826001600160a01b031661354a8261180b565b6001600160a01b0316146135c65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610ac4565b6001600160a01b0382166136415760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610ac4565b61364c6000826134b1565b6001600160a01b03831660009081526003602052604081208054600192906136759084906144fd565b90915550506001600160a01b03821660009081526003602052604081208054600192906136a39084906144d1565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000818152600260205260408120546001600160a01b03166137a65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610ac4565b60006137b18361180b565b9050806001600160a01b0316846001600160a01b031614806137ec5750836001600160a01b03166137e184610a3e565b6001600160a01b0316145b8061381c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b604080516000808252602082019092526001600160a01b03841690839060405161384e9190614388565b60006040518083038185875af1925050503d806000811461388b576040519150601f19603f3d011682016040523d82523d6000602084013e613890565b606091505b505090508061107d5760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610ac4565b600680546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156139ad5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ac4565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101612c02565b612708828260405180602001604052806000815250613c05565b613a55848484613537565b613a6184848484613c8e565b611fb15760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac4565b606081613b1357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115613b3d5780613b27816145c9565b9150613b369050600a836144e9565b9150613b17565b60008167ffffffffffffffff811115613b5857613b586146a3565b6040519080825280601f01601f191660200182016040528015613b82576020820181803683370190505b5090505b841561381c57613b976001836144fd565b9150613ba4600a86614602565b613baf9060306144d1565b60f81b818381518110613bc457613bc4614674565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613bfe600a866144e9565b9450613b86565b613c0f8383613e59565b613c1c6000848484613c8e565b61107d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac4565b60006001600160a01b0384163b15613e4e576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290613ceb903390899088908890600401614482565b602060405180830381600087803b158015613d0557600080fd5b505af1925050508015613d53575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252613d5091810190614295565b60015b613e03573d808015613d81576040519150601f19603f3d011682016040523d82523d6000602084013e613d86565b606091505b508051613dfb5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac4565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061381c565b506001949350505050565b6001600160a01b038216613eaf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ac4565b6000818152600260205260409020546001600160a01b031615613f145760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ac4565b6001600160a01b0382166000908152600360205260408120805460019290613f3d9084906144d1565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b0381168114613fca57600080fd5b919050565b60008083601f840112613fe157600080fd5b50813567ffffffffffffffff811115613ff957600080fd5b6020830191508360208260051b850101111561401457600080fd5b9250929050565b60006020828403121561402d57600080fd5b61403682613fb3565b9392505050565b6000806040838503121561405057600080fd5b61405983613fb3565b915061406760208401613fb3565b90509250929050565b60008060006060848603121561408557600080fd5b61408e84613fb3565b925061409c60208501613fb3565b9150604084013590509250925092565b600080600080608085870312156140c257600080fd5b6140cb85613fb3565b93506140d960208601613fb3565b925060408501359150606085013567ffffffffffffffff808211156140fd57600080fd5b818701915087601f83011261411157600080fd5b813581811115614123576141236146a3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715614169576141696146a3565b816040528281528a602084870101111561418257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156141b957600080fd5b6141c283613fb3565b9150602083013580151581146141d757600080fd5b809150509250929050565b600080604083850312156141f557600080fd5b6141fe83613fb3565b946020939093013593505050565b6000806000806040858703121561422257600080fd5b843567ffffffffffffffff8082111561423a57600080fd5b61424688838901613fcf565b9096509450602087013591508082111561425f57600080fd5b5061426c87828801613fcf565b95989497509550505050565b60006020828403121561428a57600080fd5b8135614036816146d2565b6000602082840312156142a757600080fd5b8151614036816146d2565b6000602082840312156142c457600080fd5b5035919050565b600080604083850312156142de57600080fd5b50508035926020909101359150565b60008060006060848603121561430257600080fd5b833592506020840135915061431960408501613fb3565b90509250925092565b6000815180845261433a816020860160208601614514565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000815161437e818560208601614514565b9290920192915050565b6000825161439a818460208701614514565b9190910192915050565b600080845481600182811c9150808316806143c057607f831692505b60208084108214156143f9577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b81801561440d576001811461443c57614469565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650614469565b60008b81526020902060005b868110156144615781548b820152908501908301614448565b505084890196505b505050505050614479818561436c565b95945050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526144b46080830184614322565b9695505050505050565b6020815260006140366020830184614322565b600082198211156144e4576144e4614616565b500190565b6000826144f8576144f8614645565b500490565b60008282101561450f5761450f614616565b500390565b60005b8381101561452f578181015183820152602001614517565b83811115611fb15750506000910152565b60008161454f5761454f614616565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600181811c9082168061458957607f821691505b602082108114156145c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156145fb576145fb614616565b5060010190565b60008261461157614611614645565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461175257600080fdfea26469706673582212209ee01539a37626dbcc7969604ef155674e917a9095f43865786d1ccdf3908e1064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3406,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3408,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3412,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3416,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3420,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3426,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 917,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 16457,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "imageHash",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 16460,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "baseURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 16463,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "standard",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 16465,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "decimals",
        "offset": 0,
        "slot": "10",
        "type": "t_uint8"
      },
      {
        "astId": 16467,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "totalSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 16470,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "nextPunkIndexToAssign",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 16473,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "allPunksAssigned",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 16476,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "punksRemainingToAssign",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 16480,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "punkIndexToAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16505,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "punksOfferedForSale",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(Offer)16491_storage)"
      },
      {
        "astId": 16510,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "punkBids",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(Bid)16500_storage)"
      },
      {
        "astId": 16514,
        "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
        "label": "pendingWithdrawals",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Bid)16500_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EthCryptoPunksMarket.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)16500_storage"
      },
      "t_mapping(t_uint256,t_struct(Offer)16491_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EthCryptoPunksMarket.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)16491_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)16500_storage": {
        "encoding": "inplace",
        "label": "struct EthCryptoPunksMarket.Bid",
        "members": [
          {
            "astId": 16493,
            "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
            "label": "hasBid",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16495,
            "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
            "label": "punkIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16497,
            "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
            "label": "bidder",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16499,
            "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
            "label": "value",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Offer)16491_storage": {
        "encoding": "inplace",
        "label": "struct EthCryptoPunksMarket.Offer",
        "members": [
          {
            "astId": 16482,
            "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
            "label": "isForSale",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16484,
            "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
            "label": "punkIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16486,
            "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16488,
            "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
            "label": "minValue",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16490,
            "contract": "contracts/tests/NFTs-ETH/EthCryptoPunksMarket.sol:EthCryptoPunksMarket",
            "label": "onlySellTo",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
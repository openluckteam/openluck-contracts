{"metadata":"{\"compiler\":{\"version\":\"0.8.6\"},\"sources\":{\"contracts/LucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// imports\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskExt, TaskStatus, Ticket, TaskInfo, UserState } from \\\"./interfaces/ILucksExecutor.sol\\\";\\r\\nimport {IProxyNFTStation, DepositNFT} from \\\"./interfaces/IProxyNFTStation.sol\\\";\\r\\nimport {IProxyTokenStation} from \\\"./interfaces/IProxyTokenStation.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./interfaces/ILucksHelper.sol\\\";\\r\\nimport {ILucksBridge, lzTxObj} from \\\"./interfaces/ILucksBridge.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksTrade.\\r\\n * @notice It is the core contract for crowd funds to buy NFTs result to one lucky winner\\r\\n * randomness provided externally.\\r\\n */\\r\\ncontract LucksExecutor is ILucksExecutor, ReentrancyGuardUpgradeable, OwnableUpgradeable {    \\r\\n    using SafeMath for uint256;\\r\\n    using Arrays for uint256[];\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private ids;\\r\\n\\r\\n    // ============ Openluck interfaces ============\\r\\n    ILucksHelper public HELPER;    \\r\\n    IProxyNFTStation public NFT;\\r\\n    IProxyTokenStation public TOKEN;\\r\\n    ILucksBridge public BRIDGE;\\r\\n    \\r\\n    uint16 public lzChainId;\\r\\n    bool public isAllowTask; // this network allow running task or not (ethereum & Rinkeby not allow)\\r\\n\\r\\n    // ============ Public Mutable Storage ============\\r\\n\\r\\n    // VARIABLES    \\r\\n    mapping(uint256 => TaskItem) public tasks; // store tasks info by taskId    \\r\\n    mapping(uint256 => TaskInfo) public infos; // store task updated info (taskId=>TaskInfo)\\r\\n    mapping(uint256 => mapping(uint256 => Ticket)) public tickets; // store tickets (taskId => ticketId => ticket)    \\r\\n    mapping(uint256 => uint256[]) public ticketIds; // store ticket ids (taskId => lastTicketIds)             \\r\\n    mapping(address => mapping(uint256 => UserState)) public userState; // Keep track of user ticket ids for a given taskId (user => taskId => userstate)        \\r\\n    \\r\\n    // ======== Constructor =========\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor / initialize\\r\\n     * @param _chainId layerZero chainId\\r\\n     * @param _allowTask allow running task\\r\\n     */\\r\\n    function initialize(uint16 _chainId, bool _allowTask) external initializer { \\r\\n        __ReentrancyGuard_init();\\r\\n        __Ownable_init();\\r\\n        lzChainId = _chainId;\\r\\n        isAllowTask = _allowTask;\\r\\n    }\\r\\n\\r\\n    //  ============ Modifiers  ============\\r\\n\\r\\n    // MODIFIERS\\r\\n    modifier isExists(uint256 taskId) {\\r\\n        require(exists(taskId), \\\"Task not exists\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Public functions ============\\r\\n\\r\\n    function count() public view override returns (uint256) {\\r\\n        return ids.current();\\r\\n    }\\r\\n\\r\\n    function exists(uint256 taskId) public view override returns (bool) {\\r\\n        return taskId > 0 && taskId <= ids.current();\\r\\n    }\\r\\n\\r\\n    function getTask(uint256 taskId) public view override returns (TaskItem memory) {\\r\\n        return tasks[taskId];\\r\\n    }\\r\\n\\r\\n    function getInfo(uint256 taskId) public view override returns (TaskInfo memory) {\\r\\n        return infos[taskId];\\r\\n    }\\r\\n    \\r\\n    function isFail(uint256 taskId) public view override returns(bool) {\\r\\n        return tasks[taskId].status == TaskStatus.Fail ||\\r\\n            (tasks[taskId].amountCollected < tasks[taskId].targetAmount && block.timestamp > tasks[taskId].endTime);\\r\\n    }\\r\\n\\r\\n    function getChainId() external view override returns (uint16) {\\r\\n        return lzChainId;\\r\\n    }\\r\\n    \\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable override nonReentrant {\\r\\n        \\r\\n        require(lzChainId == item.nftChainId, \\\"Invalid chainId\\\"); // action must start from NFTChain   \\r\\n        require(address(NFT) != address(0), \\\"ProxyNFT unset\\\");\\r\\n\\r\\n        // inputs validation\\r\\n        HELPER.checkNewTask(msg.sender, item);\\r\\n        HELPER.checkNewTaskExt(ext);        \\r\\n\\r\\n        // adapt to CryptoPunks\\r\\n        if (HELPER.isPunks(item.nftContract)) {\\r\\n\\r\\n            item.depositId = HELPER.getProxyPunks().deposit(msg.sender, item.nftContract, item.tokenIds, item.tokenAmounts, item.endTime);\\r\\n        }\\r\\n        else {\\r\\n\\r\\n            // Transfer nfts to proxy station (NFTChain) \\r\\n            // in case of dst chain transection fail, enable user redeem nft back, after endTime            \\r\\n            item.depositId = NFT.deposit(msg.sender, item.nftContract, item.tokenIds, item.tokenAmounts, item.endTime);\\r\\n        }\\r\\n             \\r\\n        // Create Task Item           \\r\\n        if (ext.chainId == item.nftChainId) { // same chain creation    \\r\\n            _createTask(item, ext);\\r\\n        }\\r\\n        else {\\r\\n            // cross chain creation\\r\\n            require(address(BRIDGE) != address(0), \\\"Bridge unset\\\");\\r\\n            BRIDGE.sendCreateTask{value: msg.value}(ext.chainId, payable(msg.sender), item, ext, _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateTaskNote(uint256 taskId, string memory note) external override isExists(taskId) {\\r\\n\\r\\n        require(tasks[taskId].seller == msg.sender, \\\"onlySeller\\\");\\r\\n        require(bytes(note).length >=0 && bytes(note).length <= 256, \\\"Invalid note len\\\");\\r\\n\\r\\n        emit UpdateTaskNote(taskId, note);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice buyer join a task\\r\\n    num: how many ticket\\r\\n    */\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable override isExists(taskId) nonReentrant \\r\\n    {\\r\\n        // check inputs and task\\r\\n        HELPER.checkJoinTask(msg.sender, taskId, num, note);\\r\\n\\r\\n        // Calculate number of TOKEN to this contract\\r\\n        uint256 amount = tasks[taskId].price.mul(num);\\r\\n\\r\\n        // deposit payment to token station.        \\r\\n        TOKEN.deposit{value: msg.value}(msg.sender, tasks[taskId].acceptToken, amount);\\r\\n\\r\\n        // create tickets\\r\\n        uint256 lastTID = _createTickets(taskId, num, msg.sender);\\r\\n\\r\\n        // update task item info\\r\\n        if (tasks[taskId].status == TaskStatus.Pending) {\\r\\n            tasks[taskId].status = TaskStatus.Open; \\r\\n        }\\r\\n        tasks[taskId].amountCollected = tasks[taskId].amountCollected.add(amount);\\r\\n\\r\\n        //if reach target amount, trigger to close task\\r\\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {\\r\\n            if (address(HELPER.getAutoClose()) != address(0)) {\\r\\n                HELPER.getAutoClose().addTask(taskId, tasks[taskId].endTime);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit JoinTask(taskId, msg.sender, amount, num, lastTID, note);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice seller cancel the task, only when task status equal to 'Pending' or no funds amount\\r\\n    */\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \\r\\n    {                                \\r\\n        require((tasks[taskId].status == TaskStatus.Pending || tasks[taskId].status == TaskStatus.Open) && infos[taskId].lastTID <= 0, \\\"Opening or canceled\\\");        \\r\\n        require(tasks[taskId].seller == msg.sender, \\\"Invalid auth\\\"); // only seller can cancel\\r\\n        \\r\\n        // update status\\r\\n        tasks[taskId].status = TaskStatus.Close;\\r\\n        \\r\\n        _withdrawNFTs(taskId, payable(tasks[taskId].seller), true, _param);\\r\\n\\r\\n        emit CancelTask(taskId, msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice finish a Task, \\r\\n    case 1: reach target crowd amount, status success, and start to pick a winner\\r\\n    case 2: time out and not reach the target amount, status close, and returns funds to claimable pool\\r\\n    */\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \\r\\n    {        \\r\\n        require(tasks[taskId].status == TaskStatus.Open, \\\"Not Open\\\");\\r\\n        require(tasks[taskId].amountCollected >= tasks[taskId].targetAmount || block.timestamp > tasks[taskId].endTime, \\\"Not reach target or not expired\\\");\\r\\n\\r\\n        // mark operation time\\r\\n        infos[taskId].closeTime = block.timestamp;\\r\\n\\r\\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {    \\r\\n            // Reached task target        \\r\\n            // update task, Task Close & start to draw\\r\\n            tasks[taskId].status = TaskStatus.Close; \\r\\n\\r\\n            // Request a random number from the generator based on a seed(max ticket number)\\r\\n            HELPER.getVRF().reqRandomNumber(taskId, infos[taskId].lastTID);\\r\\n\\r\\n            // add to auto draw Queue\\r\\n            if (address(HELPER.getAutoDraw()) != address(0)) {\\r\\n                HELPER.getAutoDraw().addTask(taskId, block.timestamp + HELPER.getDrawDelay());\\r\\n            }\\r\\n\\r\\n            // cancel the auto close queue if seller open directly\\r\\n             if (msg.sender == tasks[taskId].seller && address(HELPER.getAutoClose()) != address(0)) {\\r\\n                HELPER.getAutoClose().removeTask(taskId);\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            // Task Fail & Expired\\r\\n            // update task\\r\\n            tasks[taskId].status = TaskStatus.Fail; \\r\\n\\r\\n            // NFTs back to seller            \\r\\n            _withdrawNFTs(taskId, payable(tasks[taskId].seller), false, _param);                            \\r\\n        }\\r\\n\\r\\n        emit CloseTask(taskId, msg.sender, tasks[taskId].status);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice start to picker a winner via chainlink VRF\\r\\n    */\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant\\r\\n    {                \\r\\n        require(tasks[taskId].status == TaskStatus.Close, \\\"Not Close\\\");\\r\\n        // require(block.timestamp >= infos[taskId].closeTime + HELPER.getDrawDelay(), \\\"Delay limit\\\");\\r\\n         \\r\\n        // get drawn number from Chainlink VRF\\r\\n        uint32 finalNo = HELPER.getVRF().viewRandomResult(taskId);\\r\\n        require(finalNo > 0, \\\"Not Drawn\\\");\\r\\n        require(finalNo <= infos[taskId].lastTID, \\\"Invalid finalNo\\\");\\r\\n\\r\\n        // find winner by drawn number\\r\\n        Ticket memory ticket = _findWinnerTicket(taskId, finalNo);    \\r\\n        require(ticket.number > 0, \\\"Lost winner\\\");\\r\\n        \\r\\n        // update store item\\r\\n        tasks[taskId].status = TaskStatus.Success;    \\r\\n        infos[taskId].finalNo = ticket.number;          \\r\\n        \\r\\n        // withdraw NFTs to winner (maybe cross chain)         \\r\\n        _withdrawNFTs(taskId, payable(ticket.owner), true, _param);\\r\\n\\r\\n        // dispatch Payment\\r\\n        _transferPayment(taskId, ticket.owner);    \\r\\n        \\r\\n        emit PickWinner(taskId, ticket.owner, finalNo);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim tokens back \\r\\n    */\\r\\n    function claimTokens(uint256[] memory taskIds) override external nonReentrant\\r\\n    {\\r\\n        for (uint256 i = 0; i < taskIds.length; i++) {\\r\\n            _claimToken(taskIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim NFTs back (cross-chain case)\\r\\n    */\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) override external payable nonReentrant\\r\\n    {  \\r\\n        for (uint256 i = 0; i < taskIds.length; i++) {\\r\\n            _claimNFTs(taskIds[i], _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Remote(destination) functions ============\\r\\n    \\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) override external {\\r\\n        require(msg.sender == address(BRIDGE), \\\"Executor: onlyBridge\\\");\\r\\n        if (functionType == 1) { //TYPE_CREATE_TASK\\r\\n            (, TaskItem memory item, TaskExt memory ext) = abi.decode(_payload, (uint256, TaskItem, TaskExt));\\r\\n             _createTask(item, ext);\\r\\n                    \\r\\n        } else if (functionType == 2) { //TYPE_WITHDRAW_NFT\\r\\n            (, address user, address nftContract, uint256 depositId) = abi.decode(_payload, (uint8, address, address, uint256));                        \\r\\n            _doWithdrawNFTs(depositId, nftContract, user);\\r\\n        }\\r\\n    }    \\r\\n\\r\\n    // ============ Internal functions ============\\r\\n\\r\\n    /**\\r\\n    @notice seller create a crowdluck task\\r\\n    returns: new taskId\\r\\n     */\\r\\n    function _createTask(TaskItem memory item, TaskExt memory ext) internal \\r\\n    {        \\r\\n        require(isAllowTask, \\\"Not allow task\\\");\\r\\n        HELPER.checkNewTaskRemote(item);\\r\\n\\r\\n        //create TaskId\\r\\n        ids.increment();\\r\\n        uint256 taskId = ids.current();\\r\\n\\r\\n        // start now\\r\\n        if (item.status == TaskStatus.Open) {\\r\\n            item.startTime = item.startTime < block.timestamp ? item.startTime : block.timestamp;\\r\\n        } else {\\r\\n            require(block.timestamp <= item.startTime && item.startTime < item.endTime, \\\"Invalid time range\\\");\\r\\n            // start in future\\r\\n            item.status = TaskStatus.Pending;\\r\\n        }\\r\\n\\r\\n        //store taskItem\\r\\n        tasks[taskId] = item;\\r\\n\\r\\n        emit CreateTask(taskId, item, ext);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice join task succes. create tickets for buyer\\r\\n     * @param taskId task id\\r\\n     * @param num how many ticket\\r\\n     * @param buyer buery\\r\\n     */\\r\\n    function _createTickets(uint256 taskId, uint32 num, address buyer) internal returns (uint256) \\r\\n    {\\r\\n        uint256 start = infos[taskId].lastTID.add(1);\\r\\n        uint256 lastTID = start.add(num).sub(1);\\r\\n\\r\\n        tickets[taskId][lastTID] = Ticket(lastTID, num, buyer);\\r\\n        ticketIds[taskId].push(lastTID);\\r\\n\\r\\n        userState[buyer][taskId].num += num;\\r\\n        infos[taskId].lastTID = lastTID;\\r\\n\\r\\n        emit CreateTickets(taskId, buyer, num, start, lastTID);\\r\\n        return lastTID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice search a winner ticket by number\\r\\n     * @param taskId task id\\r\\n     * @param number final number\\r\\n     */\\r\\n    function _findWinnerTicket(uint256 taskId, uint32 number) internal view returns (Ticket memory)\\r\\n    {\\r\\n        // find by ticketId\\r\\n        Ticket memory ticket = tickets[taskId][number];\\r\\n\\r\\n        if (ticket.number == 0) {\\r\\n\\r\\n            uint256 idx = ticketIds[taskId].findUpperBound(number);\\r\\n            uint256 lastTID = ticketIds[taskId][idx];\\r\\n            ticket = tickets[taskId][lastTID];\\r\\n        }\\r\\n\\r\\n        return ticket;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim token back  \\r\\n    */\\r\\n    function _claimToken(uint256 taskId) internal isExists(taskId)\\r\\n    {\\r\\n        TaskItem memory item = tasks[taskId];\\r\\n        require(isFail(taskId), \\\"Not Fail\\\");\\r\\n        require(userState[msg.sender][taskId].claimed == false, \\\"Claimed\\\");\\r\\n\\r\\n        // Calculate the funds buyer payed\\r\\n        uint256 amount = item.price.mul(userState[msg.sender][taskId].num);\\r\\n        \\r\\n        // update claim info\\r\\n        userState[msg.sender][taskId].claimed = true;\\r\\n        \\r\\n        // Transfer\\r\\n        _transferOut(item.acceptToken, msg.sender, amount);\\r\\n\\r\\n        emit ClaimToken(taskId, msg.sender, amount, item.acceptToken);\\r\\n    }\\r\\n\\r\\n    function _claimNFTs(uint256 taskId, lzTxObj memory _param) internal isExists(taskId)\\r\\n    {\\r\\n        address seller = tasks[taskId].seller;\\r\\n        require(isFail(taskId), \\\"Not Fail\\\");\\r\\n        require(userState[seller][taskId].claimed == false, \\\"Claimed\\\");\\r\\n        \\r\\n        // update claim info\\r\\n        userState[seller][taskId].claimed = true;\\r\\n        \\r\\n        // withdraw NFTs to winner (maybe cross chain)     \\r\\n        _withdrawNFTs(taskId, payable(seller), true, _param);\\r\\n\\r\\n        emit ClaimNFT(taskId, seller, tasks[taskId].nftContract, tasks[taskId].tokenIds);\\r\\n    }\\r\\n\\r\\n    function _withdrawNFTs(uint256 taskId, address payable user, bool enableCrossChain, lzTxObj memory _param) internal\\r\\n    {\\r\\n        if (lzChainId == tasks[taskId].nftChainId) { // same chain    \\r\\n\\r\\n           _doWithdrawNFTs(tasks[taskId].depositId, tasks[taskId].nftContract, user);\\r\\n            \\r\\n        }\\r\\n        else if (enableCrossChain){ // cross chain            \\r\\n            BRIDGE.sendWithdrawNFTs{value: msg.value}(tasks[taskId].nftChainId, payable(msg.sender), user,tasks[taskId].nftContract, tasks[taskId].depositId, _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _doWithdrawNFTs(uint256 depositId, address nftContract, address user) internal {\\r\\n       \\r\\n        // adapt to CryptoPunks\\r\\n        if (HELPER.isPunks(nftContract)) {\\r\\n             HELPER.getProxyPunks().withdraw(depositId, user);\\r\\n        }\\r\\n        else {\\r\\n            NFT.withdraw(depositId, user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice transfer protocol fee and funds\\r\\n     * @param taskId taskId\\r\\n     * @param winner winner address\\r\\n     * paymentStrategy for winner share is up to 50% (500 = 5%, 5,000 = 50%)\\r\\n     */\\r\\n    function _transferPayment(uint256 taskId, address winner) internal\\r\\n    {\\r\\n        // inner variables\\r\\n        address acceptToken = tasks[taskId].acceptToken;\\r\\n\\r\\n        // Calculate amount to seller\\r\\n        uint256 collected = tasks[taskId].amountCollected;\\r\\n        uint256 sellerAmount = collected;\\r\\n\\r\\n        // 1. Calculate protocol fee\\r\\n        uint256 fee = (collected.mul(HELPER.getProtocolFee())).div(10000);\\r\\n        address feeRecipient = HELPER.getProtocolFeeRecipient();\\r\\n        require(fee >= 0, \\\"Invalid fee\\\");\\r\\n        sellerAmount = sellerAmount.sub(fee);\\r\\n\\r\\n        // 2. Calculate winner share amount with payment stragey (up to 50%)\\r\\n        uint256 winnerAmount = 0;\\r\\n        uint256 winnerShare = 0;\\r\\n        uint256[] memory splitShare;\\r\\n        address[] memory splitAddr;\\r\\n        if (tasks[taskId].paymentStrategy > 0) {\\r\\n            (winnerShare, splitShare, splitAddr) = HELPER.getSTRATEGY().viewPaymentShares(tasks[taskId].paymentStrategy, winner, taskId);\\r\\n            require(winnerShare >= 0 && winnerShare <= 5000, \\\"Invalid strategy\\\");\\r\\n            require(splitShare.length <= 10, \\\"Invalid splitShare\\\"); // up to 10 splitter\\r\\n            if (winnerShare > 0) {\\r\\n                winnerAmount = (collected.mul(winnerShare)).div(10000);\\r\\n                sellerAmount = sellerAmount.sub(winnerAmount);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // 3. transfer funds\\r\\n\\r\\n        // transfer protocol fee\\r\\n        _transferOut(acceptToken, feeRecipient, fee);\\r\\n        emit TransferFee(taskId, feeRecipient, acceptToken, fee);     \\r\\n\\r\\n        // transfer winner share\\r\\n        if (winnerAmount > 0) {\\r\\n            if (splitShare.length > 0 && splitShare.length == splitAddr.length) {  \\r\\n                // split winner share for strategy case\\r\\n                uint256 splited = 10000;                \\r\\n                for (uint i=0; i < splitShare.length; i++) {   \\r\\n                    // make sure spliter cannot overflow\\r\\n                    if ((splited.sub(splitShare[i])) >=0 && splitShare[i] > 0) { \\r\\n                        uint256 splitAmount = (winnerAmount.mul(splitShare[i]).div(10000));\\r\\n                        _transferOut(acceptToken, splitAddr[i], splitAmount);\\r\\n                        splited = splited.sub(splitShare[i]);\\r\\n\\r\\n                        emit TransferShareAmount(taskId, splitAddr[i], acceptToken, splitAmount); \\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (splited > 0) {\\r\\n                    // if there's a remainder of splitShare, give it to the seller\\r\\n                    sellerAmount = sellerAmount.add((winnerAmount.mul(splited).div(10000)));\\r\\n                }\\r\\n            }\\r\\n            else {                \\r\\n                _transferOut(acceptToken, winner, winnerAmount);\\r\\n\\r\\n                emit TransferShareAmount(taskId, winner, acceptToken, winnerAmount); \\r\\n            }\\r\\n        }    \\r\\n\\r\\n        // transfer funds to seller\\r\\n        _transferOut(acceptToken, tasks[taskId].seller, sellerAmount);  \\r\\n\\r\\n        emit TransferPayment(taskId, tasks[taskId].seller, acceptToken, sellerAmount);                    \\r\\n    }\\r\\n\\r\\n    function _transferOut(address token, address to, uint256 amount) internal {        \\r\\n        TOKEN.withdraw(to, token, amount);\\r\\n    }    \\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n\\r\\n    function setAllowTask(bool enable) external onlyOwner {\\r\\n        isAllowTask = enable;\\r\\n    }\\r\\n\\r\\n    function setLucksHelper(ILucksHelper addr) external onlyOwner {\\r\\n        HELPER = addr;\\r\\n    }\\r\\n\\r\\n    function setBridgeAndProxy(ILucksBridge _bridge, IProxyTokenStation _token, IProxyNFTStation _nft) external onlyOwner {\\r\\n\\r\\n        require(address(_bridge) != address(0x0), \\\"Invalid BRIDGE\\\");\\r\\n        if (isAllowTask) {\\r\\n            require(address(_token) != address(0x0), \\\"Invalid TOKEN\\\");\\r\\n        }\\r\\n        require(address(_nft) != address(0x0), \\\"Invalid NFT\\\");\\r\\n\\r\\n        BRIDGE = _bridge;\\r\\n        TOKEN = _token;\\r\\n        NFT = _nft;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"},\"contracts/interfaces/ILucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\nstruct TaskInfo {\\r\\n    uint256 lastTID;\\r\\n    uint256 closeTime;\\r\\n    uint256 finalNo;\\r\\n}\\r\\n \\r\\nstruct UserState {\\r\\n    uint256 num; // user buyed tickets count\\r\\n    bool claimed;  // user claimed\\r\\n}\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint256 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);    \\r\\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\\r\\n    event UpdateTaskNote(uint256 taskId, string note);\\r\\n\\r\\n    event TransferFee(uint256 taskId, address to, address token, uint256 amount); // for protocol\\r\\n    event TransferShareAmount(uint256 taskId, address to, address token, uint256 amount); // for winners\\r\\n    event TransferPayment(uint256 taskId, address to, address token, uint256 amount); // for seller\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\\r\\n    function isFail(uint256 taskId) external view returns(bool);\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function updateTaskNote(uint256, string memory note) external;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\"},\"contracts/interfaces/ILucksBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n    bytes zroPaymentAddr; //  the address of the ZRO token holder who would pay for the transaction\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n\\r\\n    // ============= Task functions ====================\\r\\n\\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _refundAddress,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _refundAddress,\\r\\n        address payable _user,\\r\\n        address nftContract,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,\\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateCreateTaskFee(\\r\\n        uint16 _dstChainId,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateWithdrawNFTsFee(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        address nftContract,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n}\\r\\n\"},\"contracts/interfaces/IProxyNFTStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct DepositNFT {\\r\\n    address user; // deposit user\\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] amounts; // support ERC1155\\r\\n    uint256 endTime; // Task end time\\r\\n}\\r\\n\\r\\ninterface IProxyNFTStation {\\r\\n\\r\\n    event Deposit(address indexed executor, uint256 depositId, address indexed user, address nft, uint256[] tokenIds, uint256[] amounts, uint256 endTime);\\r\\n    event Withdraw(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n    event Redeem(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n\\r\\n    // function getNFT(address executor, uint256 depositId) external view returns(DepositNFT memory);\\r\\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) external payable returns (uint256 depositId);    \\r\\n    function withdraw(uint256 depositId, address to) external;    \\r\\n    function redeem(address executor, uint256 depositId, address to) external;    \\r\\n}\"},\"contracts/interfaces/IProxyTokenStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IProxyTokenStation {\\r\\n\\r\\n    event Deposit(address indexed executor, address indexed user, address token, uint256 amount);\\r\\n    event Withdraw(address indexed executor, address indexed user, address token, uint256 amount);\\r\\n\\r\\n    function deposit(address user, address token, uint256 amount) external payable;\\r\\n    function withdraw(address user, address token, uint256 amount) external;\\r\\n}\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"contracts/interfaces/ILucksVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILucksVRF {\\r\\n\\r\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\r\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \\r\\n\\r\\n    /**\\r\\n     * Requests randomness from a user-provided max\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\r\\n\\r\\n    /**\\r\\n     * Views random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\r\\n}\"},\"contracts/interfaces/ILucksHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksVRF} from \\\"./ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"./ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"./ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"./ILucksAuto.sol\\\";\\r\\nimport {IPunks} from \\\"./IPunks.sol\\\";\\r\\nimport {IProxyNFTStation} from \\\"./IProxyNFTStation.sol\\\";\\r\\n\\r\\ninterface ILucksHelper {\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\r\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\r\\n    function checkNFTContract(address addr) external view returns (bool);\\r\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\r\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\r\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\r\\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\r\\n    function isPunks(address nftContract) external view returns(bool);\\r\\n\\r\\n    function getProtocolFeeRecipient() external view returns (address);\\r\\n    function getProtocolFee() external view returns (uint256);\\r\\n    function getMinTargetLimit(address token) external view returns (uint256);\\r\\n    function getDrawDelay() external view returns (uint32);\\r\\n\\r\\n    function getVRF() external view returns (ILucksVRF);\\r\\n    function getGROUPS() external view returns (ILucksGroup);\\r\\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\\r\\n    function getAutoClose() external view returns (ILucksAuto);\\r\\n    function getAutoDraw() external view returns (ILucksAuto);\\r\\n\\r\\n    function getPunks() external view returns (IPunks);\\r\\n    function getProxyPunks() external view returns (IProxyNFTStation);\\r\\n\\r\\n}\\r\\n\"},\"contracts/interfaces/ILucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksGroup {    \\r\\n\\r\\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\\r\\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\\r\\n   \\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\\r\\n    function createGroup(uint256 taskId, uint16 seat) external;\\r\\n}\"},\"contracts/interfaces/ILucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface ILucksPaymentStrategy {\\r\\n    \\r\\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\\r\\n}\"},\"contracts/interfaces/ILucksAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);    \\r\\n    \\r\\n    event RevertInvoke(uint256 taskId, string reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\"},\"contracts/interfaces/IPunks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface for a permittable ERC721 contract\\r\\n * See https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC72 allowance (see {IERC721-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC721-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IPunks {\\r\\n  \\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  function punkIndexToAddress(uint256 punkIndex) external view returns (address owner);\\r\\n\\r\\n  function buyPunk(uint256 punkIndex) external;\\r\\n\\r\\n  function transferPunk(address to, uint256 punkIndex) external;\\r\\n}\\r\\n\"}}}","address":"0xF2A09f37aA6FEd4018922Cc9f3ac8f77c8Fb1Cbd","bytecode":"0x608060405234801561001057600080fd5b50615f6180620000216000396000f3fe6080604052600436106101fe5760003560e01c80638da5cb5b1161011d578063d4ab5489116100b0578063ee9a31a21161007f578063f2fde38b11610064578063f2fde38b146107a0578063f3e687c0146107c0578063f551bf20146107e057600080fd5b8063ee9a31a21461076d578063ef2d23761461078d57600080fd5b8063d4ab5489146106fa578063e44cb8e41461071a578063e47af09a1461073a578063e65d530d1461074d57600080fd5b8063b09c9785116100ec578063b09c978514610650578063b6554a8d146106a7578063bcd4f920146106c7578063bd6516fe146106e757600080fd5b80638da5cb5b1461056b578063917c4156146105895780639b9e97b8146105bc578063a374e43f146105cf57600080fd5b80636c5186f91161019557806378df3a521161016457806378df3a52146104125780637c0b8de21461043257806382bfefc81461046a5780638d9776721461048a57600080fd5b80636c5186f9146103b7578063715018a6146103ca57806373ce3143146103df578063774be5b3146103f257600080fd5b80632b32177f116101d15780632b32177f146102f15780632d08265a146103355780633408e470146103575780634f558e791461039757600080fd5b806306661abd146102035780631a3cd59a1461022b5780631d65e77e1461026d57806328de3c9b1461029a575b600080fd5b34801561020f57600080fd5b50610218610800565b6040519081526020015b60405180910390f35b34801561023757600080fd5b5061024b610246366004615233565b610810565b6040805182518152602080840151908201529181015190820152606001610222565b34801561027957600080fd5b5061028d610288366004615233565b61086d565b6040516102229190615a0f565b3480156102a657600080fd5b506102d66102b5366004615233565b609d6020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610222565b3480156102fd57600080fd5b50609b5461032590760100000000000000000000000000000000000000000000900460ff1681565b6040519015158152602001610222565b34801561034157600080fd5b50610355610350366004614f41565b610a56565b005b34801561036357600080fd5b50609b5474010000000000000000000000000000000000000000900461ffff165b60405161ffff9091168152602001610222565b3480156103a357600080fd5b506103256103b2366004615233565b610afb565b6103556103c536600461505f565b610b14565b3480156103d657600080fd5b50610355611102565b6103556103ed366004615549565b611168565b3480156103fe57600080fd5b5061035561040d366004615014565b61165d565b34801561041e57600080fd5b5061021861042d366004615527565b611835565b34801561043e57600080fd5b50609954610452906001600160a01b031681565b6040516001600160a01b039091168152602001610222565b34801561047657600080fd5b50609a54610452906001600160a01b031681565b34801561049657600080fd5b506105526104a5366004615233565b609c60209081526000918252604091829020805460018201546004830154600584015460068501546007860154600887015460098801548a51808c01909b52600a8901546001600160a01b039081168c52600b8a01549a8c019a909a52600c890154600d909901548a89169b74010000000000000000000000000000000000000000998a900461ffff9081169c998a169b9989169a90980460ff169896979596949593949390921692908d565b6040516102229d9c9b9a99989796959493929190615924565b34801561057757600080fd5b506065546001600160a01b0316610452565b34801561059557600080fd5b50609b546103849074010000000000000000000000000000000000000000900461ffff1681565b6103556105ca3660046154ea565b611866565b3480156105db57600080fd5b506106276105ea366004615527565b609e6020908152600092835260408084209091529082529020805460019091015463ffffffff81169064010000000090046001600160a01b031683565b6040805193845263ffffffff90921660208401526001600160a01b031690820152606001610222565b34801561065c57600080fd5b5061069261066b366004614f15565b60a06020908152600092835260408084209091529082529020805460019091015460ff1682565b60408051928352901515602083015201610222565b3480156106b357600080fd5b506103256106c2366004615233565b611b0f565b3480156106d357600080fd5b506103556106e2366004614edb565b611b91565b6103556106f5366004614f76565b611c25565b34801561070657600080fd5b50610355610715366004614fda565b611cbe565b34801561072657600080fd5b50610355610735366004615608565b611d64565b6103556107483660046154ea565b611e35565b34801561075957600080fd5b506103556107683660046151fa565b612278565b34801561077957600080fd5b50609b54610452906001600160a01b031681565b61035561079b3660046154ea565b6123b6565b3480156107ac57600080fd5b506103556107bb366004614edb565b612bcc565b3480156107cc57600080fd5b506103556107db366004615338565b612cae565b3480156107ec57600080fd5b50609854610452906001600160a01b031681565b600061080b60975490565b905090565b61083460405180606001604052806000815260200160008152602001600081525090565b506000908152609d6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b610875614a20565b6000828152609c602090815260409182902082516101e08101845281546001600160a01b0380821683527401000000000000000000000000000000000000000090910461ffff168285015260018301541681850152600282018054855181860281018601909652808652919492936060860193929083018282801561091957602002820191906000526020600020905b815481526020019060010190808311610905575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561097157602002820191906000526020600020905b81548152602001906001019080831161095d575b505050918352505060048201546001600160a01b038116602083015260409091019074010000000000000000000000000000000000000000900460ff1660058111156109bf576109bf615e3d565b60058111156109d0576109d0615e3d565b8152600582015460208083019190915260068301546040808401919091526007840154606084015260088401546080840152600984015461ffff1660a08401528051808201909152600a8401546001600160a01b03168152600b8401549181019190915260c0820152600c82015460e0820152600d909101546101009091015292915050565b60026001541415610aae5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015560005b8151811015610af357610ae1828281518110610ad457610ad4615e6c565b6020026020010151612ded565b80610aeb81615dd5565b915050610ab6565b505060018055565b60008082118015610b0e57506097548211155b92915050565b60026001541415610b675760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b60026001556020830151609b5474010000000000000000000000000000000000000000900461ffff908116911614610be15760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420636861696e496400000000000000000000000000000000006044820152606401610aa5565b6099546001600160a01b0316610c395760405162461bcd60e51b815260206004820152600e60248201527f50726f78794e465420756e7365740000000000000000000000000000000000006044820152606401610aa5565b6098546040517f1750518c0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631750518c90610c849033908790600401615902565b60206040518083038186803b158015610c9c57600080fd5b505afa158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd49190614ff7565b506098546040517f0990a9820000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690630990a98290610d1e9085906004016159fc565b60206040518083038186803b158015610d3657600080fd5b505afa158015610d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6e9190614ff7565b5060985460408481015190517f9aeecea50000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152911690639aeecea59060240160206040518083038186803b158015610dd157600080fd5b505afa158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e099190614ff7565b15610f3557609860009054906101000a90046001600160a01b03166001600160a01b0316639571581c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5c57600080fd5b505afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e949190614ef8565b6001600160a01b031663443cf787338560400151866060015187608001518861010001516040518663ffffffff1660e01b8152600401610ed89594939291906158b1565b602060405180830381600087803b158015610ef257600080fd5b505af1158015610f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2a919061524c565b6101c0840152610ff3565b6099546040808501516060860151608087015161010088015193517f443cf7870000000000000000000000000000000000000000000000000000000081526001600160a01b039095169463443cf78794610f9a943394909390929091906004016158b1565b602060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec919061524c565b6101c08401525b826020015161ffff16826000015161ffff16141561101a5761101583836131c3565b6110f9565b609b546001600160a01b03166110725760405162461bcd60e51b815260206004820152600c60248201527f42726964676520756e73657400000000000000000000000000000000000000006044820152606401610aa5565b609b5482516040517f107f6e280000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163107f6e289134916110c691903390899089908990600401615a72565b6000604051808303818588803b1580156110df57600080fd5b505af11580156110f3573d6000803e3d6000fd5b50505050505b50506001805550565b6065546001600160a01b0316331461115c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa5565b61116660006135f8565b565b8261117281610afb565b6111be5760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b600260015414156112115760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b60026001556098546040517fe7e46def0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e7e46def906112659033908890889088906004016159be565b60206040518083038186803b15801561127d57600080fd5b505afa158015611291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b59190614ff7565b506000848152609c60205260408120600801546112db9063ffffffff8087169061366216565b609a546000878152609c60205260409081902060049081015491517f8340f54900000000000000000000000000000000000000000000000000000000815233918101919091526001600160a01b039182166024820152604481018490529293501690638340f5499034906064016000604051808303818588803b15801561136157600080fd5b505af1158015611375573d6000803e3d6000fd5b50505050506000611387868633613675565b9050600080878152609c602052604090206004015474010000000000000000000000000000000000000000900460ff1660058111156113c8576113c8615e3d565b141561141d576000868152609c6020526040902060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555b6000868152609c60205260409020600c0154611439908361386b565b6000878152609c60205260409020600c8101829055600701541161161057609854604080517f2396197500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916323961975916004808301926020929190829003018186803b1580156114b557600080fd5b505afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190614ef8565b6001600160a01b03161461161057609860009054906101000a90046001600160a01b03166001600160a01b031663239619756040518163ffffffff1660e01b815260040160206040518083038186803b15801561154957600080fd5b505afa15801561155d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115819190614ef8565b6000878152609c6020526040908190206006015490517eb34ebd0000000000000000000000000000000000000000000000000000000081526004810189905260248101919091526001600160a01b03919091169062b34ebd90604401600060405180830381600087803b1580156115f757600080fd5b505af115801561160b573d6000803e3d6000fd5b505050505b7f9373a88f901e30620a827b89bb774b9d50dedad527a9878c5261b450f67d419786338488858960405161164996959493929190615b55565b60405180910390a150506001805550505050565b6065546001600160a01b031633146116b75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa5565b6001600160a01b03831661170d5760405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964204252494447450000000000000000000000000000000000006044820152606401610aa5565b609b54760100000000000000000000000000000000000000000000900460ff1615611788576001600160a01b0382166117885760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420544f4b454e000000000000000000000000000000000000006044820152606401610aa5565b6001600160a01b0381166117de5760405162461bcd60e51b815260206004820152600b60248201527f496e76616c6964204e46540000000000000000000000000000000000000000006044820152606401610aa5565b609b80546001600160a01b039485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155609a80549385169382169390931790925560998054919093169116179055565b609f602052816000526040600020818154811061185157600080fd5b90600052602060002001600091509150505481565b8161187081610afb565b6118bc5760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b6002600154141561190f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b6002600155600080848152609c602052604090206004015474010000000000000000000000000000000000000000900460ff16600581111561195357611953615e3d565b148061199c575060016000848152609c602052604090206004015474010000000000000000000000000000000000000000900460ff16600581111561199a5761199a615e3d565b145b80156119b457506000838152609d6020526040902054155b611a005760405162461bcd60e51b815260206004820152601360248201527f4f70656e696e67206f722063616e63656c6564000000000000000000000000006044820152606401610aa5565b6000838152609c60205260409020546001600160a01b03163314611a665760405162461bcd60e51b815260206004820152600c60248201527f496e76616c6964206175746800000000000000000000000000000000000000006044820152606401610aa5565b6000838152609c602052604090206004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017905554611acd9084906001600160a01b0316600185613877565b604080518481523360208201527f9496d40f6a4059d9530f6361a578a4df0bfaeddcc0d913de433fd6caab89130391015b60405180910390a150506001805550565b600060046000838152609c602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611b5157611b51615e3d565b1480610b0e57506000828152609c602052604090206007810154600c90910154108015610b0e5750506000908152609c6020526040902060060154421190565b6065546001600160a01b03163314611beb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa5565b609880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60026001541415611c785760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b600260015560005b82518110156110f957611cac838281518110611c9e57611c9e615e6c565b6020026020010151836139b0565b80611cb681615dd5565b915050611c80565b6065546001600160a01b03163314611d185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa5565b609b8054911515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b609b546001600160a01b03163314611dbe5760405162461bcd60e51b815260206004820152601460248201527f4578656375746f723a206f6e6c794272696467650000000000000000000000006044820152606401610aa5565b8160ff1660011415611df65760008082806020019051810190611de19190615375565b9250925050611df082826131c3565b50505050565b8160ff1660021415611e3157600080600083806020019051810190611e1b91906155b5565b93509350935050611e2d818385613b9c565b5050505b5050565b81611e3f81610afb565b611e8b5760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b60026001541415611ede5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b600260018190556000848152609c602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611f2357611f23615e3d565b14611f705760405162461bcd60e51b815260206004820152600960248201527f4e6f7420436c6f736500000000000000000000000000000000000000000000006044820152606401610aa5565b609854604080517fedd3159d00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163edd3159d916004808301926020929190829003018186803b158015611fce57600080fd5b505afa158015611fe2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120069190614ef8565b6001600160a01b031663463fb8c6856040518263ffffffff1660e01b815260040161203391815260200190565b60206040518083038186803b15801561204b57600080fd5b505afa15801561205f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120839190615598565b905060008163ffffffff16116120db5760405162461bcd60e51b815260206004820152600960248201527f4e6f7420447261776e00000000000000000000000000000000000000000000006044820152606401610aa5565b6000848152609d602052604090205463ffffffff8216111561213f5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642066696e616c4e6f00000000000000000000000000000000006044820152606401610aa5565b600061214b8583613d8e565b805190915061219c5760405162461bcd60e51b815260206004820152600b60248201527f4c6f73742077696e6e65720000000000000000000000000000000000000000006044820152606401610aa5565b6000858152609c6020908152604080832060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740300000000000000000000000000000000000000001790558351609d909252918290206002015581015161220d908690600187613877565b61221b858260400151613eb4565b60408181015181518781526001600160a01b03909116602082015263ffffffff84168183015290517f3f3025585478f6771e5973f8ff9aa514d8592d3648a98da300f46bb7e1cc05169181900360600190a1505060018055505050565b60006122846001614566565b905080156122b957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6122c16146bd565b6122c9614742565b609b80547fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16177601000000000000000000000000000000000000000000008415150217905580156123b157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050565b816123c081610afb565b61240c5760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b6002600154141561245f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b600260019081556000848152609c602052604090206004015474010000000000000000000000000000000000000000900460ff1660058111156124a4576124a4615e3d565b146124f15760405162461bcd60e51b815260206004820152600860248201527f4e6f74204f70656e0000000000000000000000000000000000000000000000006044820152606401610aa5565b6000838152609c602052604090206007810154600c9091015410158061252757506000838152609c602052604090206006015442115b6125735760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420726561636820746172676574206f72206e6f742065787069726564006044820152606401610aa5565b6000838152609d6020908152604080832042600190910155609c90915290206007810154600c9091015410612b04576000838152609c6020908152604091829020600490810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017905560985483517fedd3159d00000000000000000000000000000000000000000000000000000000815293516001600160a01b039091169363edd3159d9381840193909291829003018186803b15801561264d57600080fd5b505afa158015612661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126859190614ef8565b6000848152609d6020526040908190205490517f19c019890000000000000000000000000000000000000000000000000000000081526004810186905260248101919091526001600160a01b0391909116906319c0198990604401600060405180830381600087803b1580156126fa57600080fd5b505af115801561270e573d6000803e3d6000fd5b5050609854604080517f3156a58d0000000000000000000000000000000000000000000000000000000081529051600094506001600160a01b039092169250633156a58d916004808301926020929190829003018186803b15801561277257600080fd5b505afa158015612786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127aa9190614ef8565b6001600160a01b03161461295157609860009054906101000a90046001600160a01b03166001600160a01b0316633156a58d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561280657600080fd5b505afa15801561281a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283e9190614ef8565b6001600160a01b031662b34ebd84609860009054906101000a90046001600160a01b03166001600160a01b03166319af32536040518163ffffffff1660e01b815260040160206040518083038186803b15801561289a57600080fd5b505afa1580156128ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d29190615598565b6128e29063ffffffff1642615d02565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561293857600080fd5b505af115801561294c573d6000803e3d6000fd5b505050505b6000838152609c60205260409020546001600160a01b031633148015612a145750609854604080517f2396197500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916323961975916004808301926020929190829003018186803b1580156129d057600080fd5b505afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a089190614ef8565b6001600160a01b031614155b15612aff57609860009054906101000a90046001600160a01b03166001600160a01b031663239619756040518163ffffffff1660e01b815260040160206040518083038186803b158015612a6757600080fd5b505afa158015612a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9f9190614ef8565b6001600160a01b031663c3084117846040518263ffffffff1660e01b8152600401612acc91815260200190565b600060405180830381600087803b158015612ae657600080fd5b505af1158015612afa573d6000803e3d6000fd5b505050505b612b6a565b6000838152609c602052604081206004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167404000000000000000000000000000000000000000017905554612b6a9185916001600160a01b03169085613877565b6000838152609c6020526040908190206004015490517f8bd3be2963318bc29de9701e2edec7b2546ea1b285e0d51596a7bc9e6aa7fe3091611afe91869133917401000000000000000000000000000000000000000090910460ff1690615b32565b6065546001600160a01b03163314612c265760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa5565b6001600160a01b038116612ca25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610aa5565b612cab816135f8565b50565b81612cb881610afb565b612d045760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b6000838152609c60205260409020546001600160a01b03163314612d6a5760405162461bcd60e51b815260206004820152600a60248201527f6f6e6c7953656c6c6572000000000000000000000000000000000000000000006044820152606401610aa5565b61010082511115612dbd5760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964206e6f7465206c656e000000000000000000000000000000006044820152606401610aa5565b7e9dd9efb560a7c39b5c7455b4abbedee97f113fc547bffaa75f0bf316f13cf183836040516123a8929190615b95565b80612df781610afb565b612e435760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b6000828152609c6020908152604080832081516101e08101835281546001600160a01b0380821683527401000000000000000000000000000000000000000090910461ffff168286015260018301541681840152600282018054845181870281018701909552808552919492936060860193909290830182828015612ee757602002820191906000526020600020905b815481526020019060010190808311612ed3575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015612f3f57602002820191906000526020600020905b815481526020019060010190808311612f2b575b505050918352505060048201546001600160a01b038116602083015260409091019074010000000000000000000000000000000000000000900460ff166005811115612f8d57612f8d615e3d565b6005811115612f9e57612f9e615e3d565b8152600582015460208083019190915260068301546040808401919091526007840154606084015260088401546080840152600984015461ffff1660a08401528051808201909152600a8401546001600160a01b03168152600b8401549181019190915260c0820152600c82015460e0820152600d9091015461010090910152905061302983611b0f565b6130755760405162461bcd60e51b815260206004820152600860248201527f4e6f74204661696c0000000000000000000000000000000000000000000000006044820152606401610aa5565b33600090815260a06020908152604080832086845290915290206001015460ff16156130e35760405162461bcd60e51b815260206004820152600760248201527f436c61696d6564000000000000000000000000000000000000000000000000006044820152606401610aa5565b33600090815260a06020908152604080832086845290915281205461014083015161310d91613662565b33600081815260a0602081815260408084208a8552909152909120600190810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790558401519192506131679190836147c7565b60a0820151604080518681523360208201529081018390526001600160a01b0390911660608201527f8519296219951e1d116256cc20f1ea8c0aa35633f684a8b3bc42e4b6ffa17a5b906080015b60405180910390a150505050565b609b54760100000000000000000000000000000000000000000000900460ff1661322f5760405162461bcd60e51b815260206004820152600e60248201527f4e6f7420616c6c6f77207461736b0000000000000000000000000000000000006044820152606401610aa5565b6098546040517fc735fd740000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c735fd7490613278908590600401615a0f565b60206040518083038186803b15801561329057600080fd5b505afa1580156132a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c89190614ff7565b506132d7609780546001019055565b60006132e260975490565b905060018360c0015160058111156132fc576132fc615e3d565b141561332357428360e00151106133135742613319565b8260e001515b60e0840152613393565b8260e00151421115801561333f57508261010001518360e00151105b61338b5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642074696d652072616e676500000000000000000000000000006044820152606401610aa5565b600060c08401525b6000818152609c6020908152604091829020855181548388015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff000000000000000000000000000000000000000000009091166001600160a01b039283161717825592860151600182018054919094167fffffffffffffffffffffffff000000000000000000000000000000000000000091909116179092556060850151805186939261344d926002850192910190614abd565b5060808201518051613469916003840191602090910190614abd565b5060a08201516004820180546001600160a01b039092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560c0850151927fffffffffffffffffffffff0000000000000000000000000000000000000000001617740100000000000000000000000000000000000000008360058111156134f8576134f8615e3d565b021790555060e082015160058201556101008201516006820155610120820151600782015561014082015160088201556101608201516009820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff9092169190911790556101808201518051600a830180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905560200151600b8201556101a0820151600c8201556101c090910151600d909101556040517f0c51dc45078ee7d51611387251b9b023fb2b4c14ab4bdac08bca2820f8a101ea906123a890839086908690615bae565b606580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061366e8284615d55565b9392505050565b6000838152609d6020526040812054819061369190600161386b565b905060006136b360016136ad8463ffffffff808a169061386b16565b90614821565b905060405180606001604052808281526020018663ffffffff168152602001856001600160a01b0316815250609e600088815260200190815260200160002060008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160046101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050609f60008781526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150558463ffffffff1660a06000866001600160a01b03166001600160a01b03168152602001908152602001600020600088815260200190815260200160002060000160008282546137ed9190615d02565b90915550506000868152609d602090815260409182902083905581518881526001600160a01b0387169181019190915263ffffffff871681830152606081018490526080810183905290517fae00b050d09a294dbf7d73b4f1087967802e04b95ba34f770bb22cc1fca4e7429181900360a00190a195945050505050565b600061366e8284615d02565b6000848152609c6020526040902054609b54740100000000000000000000000000000000000000009182900461ffff908116929091041614156138e6576000848152609c60205260409020600d8101546001909101546138e191906001600160a01b031685613b9c565b611df0565b8115611df057609b546000858152609c60205260409081902080546001820154600d9092015492517f8305de610000000000000000000000000000000000000000000000000000000081526001600160a01b0394851694638305de619434946139789474010000000000000000000000000000000000000000900461ffff169333938c93921691908a90600401615a22565b6000604051808303818588803b15801561399157600080fd5b505af11580156139a5573d6000803e3d6000fd5b505050505050505050565b816139ba81610afb565b613a065760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b6000838152609c60205260409020546001600160a01b0316613a2784611b0f565b613a735760405162461bcd60e51b815260206004820152600860248201527f4e6f74204661696c0000000000000000000000000000000000000000000000006044820152606401610aa5565b6001600160a01b038116600090815260a06020908152604080832087845290915290206001015460ff1615613aea5760405162461bcd60e51b815260206004820152600760248201527f436c61696d6564000000000000000000000000000000000000000000000000006044820152606401610aa5565b6001600160a01b038116600090815260a0602090815260408083208784529091529020600190810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682179055613b48908590839086613877565b6000848152609c602052604090819020600181015491517f3090bc03795e5c190b39b7112509502697a7212984f74dabf6842a2b48ee1e77926131b592889286926001600160a01b03169160020190615ac4565b6098546040517f9aeecea50000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015290911690639aeecea59060240160206040518083038186803b158015613bfa57600080fd5b505afa158015613c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c329190614ff7565b15613d3e57609860009054906101000a90046001600160a01b03166001600160a01b0316639571581c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c8557600080fd5b505afa158015613c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbd9190614ef8565b6040517ef714ce000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b038381166024830152919091169062f714ce906044015b600060405180830381600087803b158015613d2157600080fd5b505af1158015613d35573d6000803e3d6000fd5b50505050505050565b6099546040517ef714ce000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0383811660248301529091169062f714ce90604401613d07565b60408051606081018252600080825260208201819052918101919091526000838152609e6020908152604080832063ffffffff86811685529083529281902081516060810183528154808252600190920154948516938101939093526401000000009093046001600160a01b0316908201529061366e576000848152609f60205260408120613e269063ffffffff8087169061482d16565b6000868152609f602052604081208054929350909183908110613e4b57613e4b615e6c565b600091825260208083209190910154888352609e825260408084209184529082529182902082516060810184528154815260019091015463ffffffff8116928201929092526401000000009091046001600160a01b031691810191909152925050509392505050565b6000828152609c60209081526040808320600480820154600c9092015460985484517fa5a4103100000000000000000000000000000000000000000000000000000000815294516001600160a01b0394851697929687969395613f839561271095613f7d959092169363a5a410319383830193909290829003018186803b158015613f3e57600080fd5b505afa158015613f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f76919061524c565b8690613662565b906148f0565b90506000609860009054906101000a90046001600160a01b03166001600160a01b03166372c8fc0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613fd557600080fd5b505afa158015613fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400d9190614ef8565b90506140198383614821565b6000888152609c6020526040812060090154919450908190606090819061ffff161561427057609860009054906101000a90046001600160a01b03166001600160a01b03166393f1c9116040518163ffffffff1660e01b815260040160206040518083038186803b15801561408d57600080fd5b505afa1580156140a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c59190614ef8565b60008c8152609c6020526040908190206009015490517f74a0a25100000000000000000000000000000000000000000000000000000000815261ffff90911660048201526001600160a01b038c81166024830152604482018e905291909116906374a0a2519060640160006040518083038186803b15801561414657600080fd5b505afa15801561415a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526141a09190810190615265565b919450925090506113888311156141f95760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964207374726174656779000000000000000000000000000000006044820152606401610aa5565b600a8251111561424b5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073706c6974536861726500000000000000000000000000006044820152606401610aa5565b821561427057614261612710613f7d8a86613662565b935061426d8785614821565b96505b61427b8986886147c7565b604080518c81526001600160a01b0387811660208301528b16818301526060810188905290517f12904628fc3f4d088dc43c89ce57d125affd9814ed762f3463aafbdd6695cdb49181900360800190a183156144d257600082511180156142e3575080518251145b156144765761271060005b835181101561444c57600061432585838151811061430e5761430e615e6c565b60200260200101518461482190919063ffffffff16565b1015801561434c5750600084828151811061434257614342615e6c565b6020026020010151115b1561443a576000614385612710613f7d87858151811061436e5761436e615e6c565b60200260200101518a61366290919063ffffffff16565b90506143ab8c85848151811061439d5761439d615e6c565b6020026020010151836147c7565b6143c085838151811061430e5761430e615e6c565b92507ff19eb0aac803899ad79b0cb5b824183d99a0b555de9c57ef33a9c6d7cb677bbb8e8584815181106143f6576143f6615e6c565b60200260200101518e8460405161443094939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a1505b8061444481615dd5565b9150506142ee565b5080156144705761446d614466612710613f7d8885613662565b899061386b565b97505b506144d2565b614481898b866147c7565b604080518c81526001600160a01b038c811660208301528b16818301526060810186905290517ff19eb0aac803899ad79b0cb5b824183d99a0b555de9c57ef33a9c6d7cb677bbb9181900360800190a15b60008b8152609c60205260409020546144f6908a906001600160a01b0316896147c7565b60008b8152609c60209081526040918290205482518e81526001600160a01b03918216928101929092528b16818301526060810189905290517ffa4054066d213019ba303aa80eb69385480b4c77c8591269524b9f9861936ef49181900360800190a15050505050505050505050565b60008054610100900460ff1615614603578160ff1660011480156145895750303b155b6145fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610aa5565b506000919050565b60005460ff8084169116106146805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610aa5565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b600054610100900460ff1661473a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610aa5565b6111666148fc565b600054610100900460ff166147bf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610aa5565b61116661497f565b609a546040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528581166024830152604482018490529091169063d9caed1290606401613d07565b600061366e8284615d92565b815460009061483e57506000610b0e565b82546000905b8082101561489a5760006148588383614a05565b90508486828154811061486d5761486d615e6c565b9060005260206000200154111561488657809150614894565b614891816001615d02565b92505b50614844565b6000821180156148cf575083856148b2600185615d92565b815481106148c2576148c2615e6c565b9060005260206000200154145b156148e8576148df600183615d92565b92505050610b0e565b509050610b0e565b600061366e8284615d1a565b600054610100900460ff166149795760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610aa5565b60018055565b600054610100900460ff166149fc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610aa5565b611166336135f8565b6000614a146002848418615d1a565b61366e90848416615d02565b604080516101e0810182526000808252602082018190529181018290526060808201819052608082015260a081018290529060c0820190815260200160008152602001600081526020016000815260200160008152602001600061ffff168152602001614aa9604051806040016040528060006001600160a01b03168152602001600081525090565b815260200160008152602001600081525090565b828054828255906000526020600020908101928215614af8579160200282015b82811115614af8578251825591602001919060010190614add565b50614b04929150614b08565b5090565b5b80821115614b045760008155600101614b09565b80356146b881615eca565b80516146b881615eca565b600082601f830112614b4457600080fd5b81356020614b59614b5483615c98565b615c49565b80838252828201915082860187848660051b8901011115614b7957600080fd5b60005b85811015614b9857813584529284019290840190600101614b7c565b5090979650505050505050565b600082601f830112614bb657600080fd5b81516020614bc6614b5483615c98565b80838252828201915082860187848660051b8901011115614be657600080fd5b60005b85811015614b9857815184529284019290840190600101614be9565b600082601f830112614c1657600080fd5b8135614c24614b5482615cbc565b818152846020838601011115614c3957600080fd5b816020850160208301376000918101602001919091529392505050565b80356146b881615eed565b80516146b881615eed565b600082601f830112614c7d57600080fd5b8151614c8b614b5482615cbc565b818152846020838601011115614ca057600080fd5b614cb1826020830160208701615da9565b949350505050565b600060408284031215614ccb57600080fd5b614cd3615bd9565b90508135614ce081615eca565b808252506020820135602082015292915050565b600060408284031215614d0657600080fd5b614d0e615bd9565b90508151614d1b81615eca565b808252506020820151602082015292915050565b600060608284031215614d4157600080fd5b614d49615c02565b90508135614d5681615efa565b8152602082013567ffffffffffffffff80821115614d7357600080fd5b614d7f85838601614c05565b60208401526040840135915080821115614d9857600080fd5b50614da584828501614c05565b60408301525092915050565b600060608284031215614dc357600080fd5b614dcb615c02565b90508151614dd881615efa565b8152602082015167ffffffffffffffff80821115614df557600080fd5b614e0185838601614c6c565b60208401526040840151915080821115614e1a57600080fd5b50614da584828501614c6c565b600060808284031215614e3957600080fd5b6040516080810167ffffffffffffffff8282108183111715614e5d57614e5d615e9b565b8160405282935084358352602085013560208401526040850135915080821115614e8657600080fd5b614e9286838701614c05565b60408401526060850135915080821115614eab57600080fd5b50614eb885828601614c05565b6060830152505092915050565b80356146b881615efa565b80516146b881615efa565b600060208284031215614eed57600080fd5b813561366e81615eca565b600060208284031215614f0a57600080fd5b815161366e81615eca565b60008060408385031215614f2857600080fd5b8235614f3381615eca565b946020939093013593505050565b600060208284031215614f5357600080fd5b813567ffffffffffffffff811115614f6a57600080fd5b614cb184828501614b33565b60008060408385031215614f8957600080fd5b823567ffffffffffffffff80821115614fa157600080fd5b614fad86838701614b33565b93506020850135915080821115614fc357600080fd5b50614fd085828601614e27565b9150509250929050565b600060208284031215614fec57600080fd5b813561366e81615edf565b60006020828403121561500957600080fd5b815161366e81615edf565b60008060006060848603121561502957600080fd5b833561503481615eca565b9250602084013561504481615eca565b9150604084013561505481615eca565b809150509250925092565b60008060006060848603121561507457600080fd5b833567ffffffffffffffff8082111561508c57600080fd5b9085019061020082880312156150a157600080fd5b6150a9615c25565b6150b283614b1d565b81526150c060208401614ec5565b60208201526150d160408401614b1d565b60408201526060830135828111156150e857600080fd5b6150f489828601614b33565b60608301525060808301358281111561510c57600080fd5b61511889828601614b33565b60808301525061512a60a08401614b1d565b60a082015261513b60c08401614c56565b60c082015260e08381013590820152610100808401359082015261012080840135908201526101408084013590820152610160615179818501614ec5565b9082015261018061518c89858301614cb9565b81830152506101c0808401356101a08301526101e084013581830152508095505060208601359150808211156151c157600080fd5b6151cd87838801614d2f565b935060408601359150808211156151e357600080fd5b506151f086828701614e27565b9150509250925092565b6000806040838503121561520d57600080fd5b823561521881615efa565b9150602083013561522881615edf565b809150509250929050565b60006020828403121561524557600080fd5b5035919050565b60006020828403121561525e57600080fd5b5051919050565b60008060006060848603121561527a57600080fd5b8351925060208085015167ffffffffffffffff8082111561529a57600080fd5b6152a688838901614ba5565b945060408701519150808211156152bc57600080fd5b508501601f810187136152ce57600080fd5b80516152dc614b5482615c98565b8082825284820191508484018a868560051b87010111156152fc57600080fd5b600094505b8385101561532857805161531481615eca565b835260019490940193918501918501615301565b5080955050505050509250925092565b6000806040838503121561534b57600080fd5b82359150602083013567ffffffffffffffff81111561536957600080fd5b614fd085828601614c05565b60008060006060848603121561538a57600080fd5b83519250602084015167ffffffffffffffff808211156153a957600080fd5b9085019061020082880312156153be57600080fd5b6153c6615c25565b6153cf83614b28565b81526153dd60208401614ed0565b60208201526153ee60408401614b28565b604082015260608301518281111561540557600080fd5b61541189828601614ba5565b60608301525060808301518281111561542957600080fd5b61543589828601614ba5565b60808301525061544760a08401614b28565b60a082015261545860c08401614c61565b60c082015260e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160615496818501614ed0565b908201526101806154a989858301614cf4565b908201526101c0838101516101a08301526101e090930151928101929092526040860151919350808211156154dd57600080fd5b506151f086828701614db1565b600080604083850312156154fd57600080fd5b82359150602083013567ffffffffffffffff81111561551b57600080fd5b614fd085828601614e27565b6000806040838503121561553a57600080fd5b50508035926020909101359150565b60008060006060848603121561555e57600080fd5b83359250602084013561557081615f0a565b9150604084013567ffffffffffffffff81111561558c57600080fd5b6151f086828701614c05565b6000602082840312156155aa57600080fd5b815161366e81615f0a565b600080600080608085870312156155cb57600080fd5b84516155d681615f1c565b60208601519094506155e781615eca565b60408601519093506155f881615eca565b6060959095015193969295505050565b6000806040838503121561561b57600080fd5b823561562681615f1c565b9150602083013567ffffffffffffffff81111561536957600080fd5b600081518084526020808501945080840160005b8381101561567257815187529582019590820190600101615656565b509495945050505050565b60008151808452615695816020860160208601615da9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600681106156fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b61ffff81511682526000602082015160606020850152615725606085018261567d565b90506040830151848203604086015261573e828261567d565b95945050505050565b80516001600160a01b031682526000610200602083015161576e602086018261ffff169052565b50604083015161578960408601826001600160a01b03169052565b5060608301518160608601526157a182860182615642565b915050608083015184820360808601526157bb8282615642565b91505060a08301516157d860a08601826001600160a01b03169052565b5060c08301516157eb60c08601826156c7565b5060e083810151908501526101008084015190850152610120808401519085015261014080840151908501526101608084015161ffff81168287015250506101808381015180516001600160a01b03168683015260208101516101a087015250506101a08301516101c085810191909152909201516101e090930192909252919050565b80518252602081015160208301526000604082015160806040850152615898608085018261567d565b90506060830151848203606086015261573e828261567d565b60006001600160a01b03808816835280871660208401525060a060408301526158dd60a0830186615642565b82810360608401526158ef8186615642565b9150508260808301529695505050505050565b6001600160a01b0383168152604060208201526000614cb16040830184615747565b6001600160a01b038e8116825261ffff8e1660208301528c811660408301528b1660608201526101c0810161595c608083018c6156c7565b8960a08301528860c08301528760e08301528661010083015261ffff86166101208301526159a161014083018680516001600160a01b03168252602090810151910152565b6101808201939093526101a001529b9a5050505050505050505050565b6001600160a01b038516815283602082015263ffffffff831660408201526080606082015260006159f2608083018461567d565b9695505050505050565b60208152600061366e6020830184615702565b60208152600061366e6020830184615747565b61ffff8716815260006001600160a01b038088166020840152808716604084015280861660608401525083608083015260c060a0830152615a6660c083018461586f565b98975050505050505050565b61ffff861681526001600160a01b038516602082015260a060408201526000615a9e60a0830186615747565b8281036060840152615ab08186615702565b90508281036080840152615a66818561586f565b60006080820186835260206001600160a01b03808816828601528087166040860152506080606085015281855480845260a0860191508660005282600020935060005b81811015615b2357845483526001948501949284019201615b07565b50909998505050505050505050565b8381526001600160a01b038316602082015260608101614cb160408301846156c7565b8681526001600160a01b038616602082015284604082015263ffffffff8416606082015282608082015260c060a08201526000615a6660c083018461567d565b828152604060208201526000614cb1604083018461567d565b838152606060208201526000615bc76060830185615747565b82810360408401526159f28185615702565b6040805190810167ffffffffffffffff81118282101715615bfc57615bfc615e9b565b60405290565b6040516060810167ffffffffffffffff81118282101715615bfc57615bfc615e9b565b6040516101e0810167ffffffffffffffff81118282101715615bfc57615bfc615e9b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715615c9057615c90615e9b565b604052919050565b600067ffffffffffffffff821115615cb257615cb2615e9b565b5060051b60200190565b600067ffffffffffffffff821115615cd657615cd6615e9b565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008219821115615d1557615d15615e0e565b500190565b600082615d50577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615d8d57615d8d615e0e565b500290565b600082821015615da457615da4615e0e565b500390565b60005b83811015615dc4578181015183820152602001615dac565b83811115611df05750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615e0757615e07615e0e565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114612cab57600080fd5b8015158114612cab57600080fd5b60068110612cab57600080fd5b61ffff81168114612cab57600080fd5b63ffffffff81168114612cab57600080fd5b60ff81168114612cab57600080fdfea26469706673582212204bdb54ae59f1663e3e66fbbf09c0332f2dbf048a7a7fdfdd3e3b5ef7ef776dd764736f6c63430008060033","deployedBytecode":"0x6080604052600436106101fe5760003560e01c80638da5cb5b1161011d578063d4ab5489116100b0578063ee9a31a21161007f578063f2fde38b11610064578063f2fde38b146107a0578063f3e687c0146107c0578063f551bf20146107e057600080fd5b8063ee9a31a21461076d578063ef2d23761461078d57600080fd5b8063d4ab5489146106fa578063e44cb8e41461071a578063e47af09a1461073a578063e65d530d1461074d57600080fd5b8063b09c9785116100ec578063b09c978514610650578063b6554a8d146106a7578063bcd4f920146106c7578063bd6516fe146106e757600080fd5b80638da5cb5b1461056b578063917c4156146105895780639b9e97b8146105bc578063a374e43f146105cf57600080fd5b80636c5186f91161019557806378df3a521161016457806378df3a52146104125780637c0b8de21461043257806382bfefc81461046a5780638d9776721461048a57600080fd5b80636c5186f9146103b7578063715018a6146103ca57806373ce3143146103df578063774be5b3146103f257600080fd5b80632b32177f116101d15780632b32177f146102f15780632d08265a146103355780633408e470146103575780634f558e791461039757600080fd5b806306661abd146102035780631a3cd59a1461022b5780631d65e77e1461026d57806328de3c9b1461029a575b600080fd5b34801561020f57600080fd5b50610218610800565b6040519081526020015b60405180910390f35b34801561023757600080fd5b5061024b610246366004615233565b610810565b6040805182518152602080840151908201529181015190820152606001610222565b34801561027957600080fd5b5061028d610288366004615233565b61086d565b6040516102229190615a0f565b3480156102a657600080fd5b506102d66102b5366004615233565b609d6020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610222565b3480156102fd57600080fd5b50609b5461032590760100000000000000000000000000000000000000000000900460ff1681565b6040519015158152602001610222565b34801561034157600080fd5b50610355610350366004614f41565b610a56565b005b34801561036357600080fd5b50609b5474010000000000000000000000000000000000000000900461ffff165b60405161ffff9091168152602001610222565b3480156103a357600080fd5b506103256103b2366004615233565b610afb565b6103556103c536600461505f565b610b14565b3480156103d657600080fd5b50610355611102565b6103556103ed366004615549565b611168565b3480156103fe57600080fd5b5061035561040d366004615014565b61165d565b34801561041e57600080fd5b5061021861042d366004615527565b611835565b34801561043e57600080fd5b50609954610452906001600160a01b031681565b6040516001600160a01b039091168152602001610222565b34801561047657600080fd5b50609a54610452906001600160a01b031681565b34801561049657600080fd5b506105526104a5366004615233565b609c60209081526000918252604091829020805460018201546004830154600584015460068501546007860154600887015460098801548a51808c01909b52600a8901546001600160a01b039081168c52600b8a01549a8c019a909a52600c890154600d909901548a89169b74010000000000000000000000000000000000000000998a900461ffff9081169c998a169b9989169a90980460ff169896979596949593949390921692908d565b6040516102229d9c9b9a99989796959493929190615924565b34801561057757600080fd5b506065546001600160a01b0316610452565b34801561059557600080fd5b50609b546103849074010000000000000000000000000000000000000000900461ffff1681565b6103556105ca3660046154ea565b611866565b3480156105db57600080fd5b506106276105ea366004615527565b609e6020908152600092835260408084209091529082529020805460019091015463ffffffff81169064010000000090046001600160a01b031683565b6040805193845263ffffffff90921660208401526001600160a01b031690820152606001610222565b34801561065c57600080fd5b5061069261066b366004614f15565b60a06020908152600092835260408084209091529082529020805460019091015460ff1682565b60408051928352901515602083015201610222565b3480156106b357600080fd5b506103256106c2366004615233565b611b0f565b3480156106d357600080fd5b506103556106e2366004614edb565b611b91565b6103556106f5366004614f76565b611c25565b34801561070657600080fd5b50610355610715366004614fda565b611cbe565b34801561072657600080fd5b50610355610735366004615608565b611d64565b6103556107483660046154ea565b611e35565b34801561075957600080fd5b506103556107683660046151fa565b612278565b34801561077957600080fd5b50609b54610452906001600160a01b031681565b61035561079b3660046154ea565b6123b6565b3480156107ac57600080fd5b506103556107bb366004614edb565b612bcc565b3480156107cc57600080fd5b506103556107db366004615338565b612cae565b3480156107ec57600080fd5b50609854610452906001600160a01b031681565b600061080b60975490565b905090565b61083460405180606001604052806000815260200160008152602001600081525090565b506000908152609d6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b610875614a20565b6000828152609c602090815260409182902082516101e08101845281546001600160a01b0380821683527401000000000000000000000000000000000000000090910461ffff168285015260018301541681850152600282018054855181860281018601909652808652919492936060860193929083018282801561091957602002820191906000526020600020905b815481526020019060010190808311610905575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561097157602002820191906000526020600020905b81548152602001906001019080831161095d575b505050918352505060048201546001600160a01b038116602083015260409091019074010000000000000000000000000000000000000000900460ff1660058111156109bf576109bf615e3d565b60058111156109d0576109d0615e3d565b8152600582015460208083019190915260068301546040808401919091526007840154606084015260088401546080840152600984015461ffff1660a08401528051808201909152600a8401546001600160a01b03168152600b8401549181019190915260c0820152600c82015460e0820152600d909101546101009091015292915050565b60026001541415610aae5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015560005b8151811015610af357610ae1828281518110610ad457610ad4615e6c565b6020026020010151612ded565b80610aeb81615dd5565b915050610ab6565b505060018055565b60008082118015610b0e57506097548211155b92915050565b60026001541415610b675760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b60026001556020830151609b5474010000000000000000000000000000000000000000900461ffff908116911614610be15760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420636861696e496400000000000000000000000000000000006044820152606401610aa5565b6099546001600160a01b0316610c395760405162461bcd60e51b815260206004820152600e60248201527f50726f78794e465420756e7365740000000000000000000000000000000000006044820152606401610aa5565b6098546040517f1750518c0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631750518c90610c849033908790600401615902565b60206040518083038186803b158015610c9c57600080fd5b505afa158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd49190614ff7565b506098546040517f0990a9820000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690630990a98290610d1e9085906004016159fc565b60206040518083038186803b158015610d3657600080fd5b505afa158015610d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6e9190614ff7565b5060985460408481015190517f9aeecea50000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152911690639aeecea59060240160206040518083038186803b158015610dd157600080fd5b505afa158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e099190614ff7565b15610f3557609860009054906101000a90046001600160a01b03166001600160a01b0316639571581c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5c57600080fd5b505afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e949190614ef8565b6001600160a01b031663443cf787338560400151866060015187608001518861010001516040518663ffffffff1660e01b8152600401610ed89594939291906158b1565b602060405180830381600087803b158015610ef257600080fd5b505af1158015610f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2a919061524c565b6101c0840152610ff3565b6099546040808501516060860151608087015161010088015193517f443cf7870000000000000000000000000000000000000000000000000000000081526001600160a01b039095169463443cf78794610f9a943394909390929091906004016158b1565b602060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec919061524c565b6101c08401525b826020015161ffff16826000015161ffff16141561101a5761101583836131c3565b6110f9565b609b546001600160a01b03166110725760405162461bcd60e51b815260206004820152600c60248201527f42726964676520756e73657400000000000000000000000000000000000000006044820152606401610aa5565b609b5482516040517f107f6e280000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163107f6e289134916110c691903390899089908990600401615a72565b6000604051808303818588803b1580156110df57600080fd5b505af11580156110f3573d6000803e3d6000fd5b50505050505b50506001805550565b6065546001600160a01b0316331461115c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa5565b61116660006135f8565b565b8261117281610afb565b6111be5760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b600260015414156112115760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b60026001556098546040517fe7e46def0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e7e46def906112659033908890889088906004016159be565b60206040518083038186803b15801561127d57600080fd5b505afa158015611291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b59190614ff7565b506000848152609c60205260408120600801546112db9063ffffffff8087169061366216565b609a546000878152609c60205260409081902060049081015491517f8340f54900000000000000000000000000000000000000000000000000000000815233918101919091526001600160a01b039182166024820152604481018490529293501690638340f5499034906064016000604051808303818588803b15801561136157600080fd5b505af1158015611375573d6000803e3d6000fd5b50505050506000611387868633613675565b9050600080878152609c602052604090206004015474010000000000000000000000000000000000000000900460ff1660058111156113c8576113c8615e3d565b141561141d576000868152609c6020526040902060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555b6000868152609c60205260409020600c0154611439908361386b565b6000878152609c60205260409020600c8101829055600701541161161057609854604080517f2396197500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916323961975916004808301926020929190829003018186803b1580156114b557600080fd5b505afa1580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190614ef8565b6001600160a01b03161461161057609860009054906101000a90046001600160a01b03166001600160a01b031663239619756040518163ffffffff1660e01b815260040160206040518083038186803b15801561154957600080fd5b505afa15801561155d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115819190614ef8565b6000878152609c6020526040908190206006015490517eb34ebd0000000000000000000000000000000000000000000000000000000081526004810189905260248101919091526001600160a01b03919091169062b34ebd90604401600060405180830381600087803b1580156115f757600080fd5b505af115801561160b573d6000803e3d6000fd5b505050505b7f9373a88f901e30620a827b89bb774b9d50dedad527a9878c5261b450f67d419786338488858960405161164996959493929190615b55565b60405180910390a150506001805550505050565b6065546001600160a01b031633146116b75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa5565b6001600160a01b03831661170d5760405162461bcd60e51b815260206004820152600e60248201527f496e76616c6964204252494447450000000000000000000000000000000000006044820152606401610aa5565b609b54760100000000000000000000000000000000000000000000900460ff1615611788576001600160a01b0382166117885760405162461bcd60e51b815260206004820152600d60248201527f496e76616c696420544f4b454e000000000000000000000000000000000000006044820152606401610aa5565b6001600160a01b0381166117de5760405162461bcd60e51b815260206004820152600b60248201527f496e76616c6964204e46540000000000000000000000000000000000000000006044820152606401610aa5565b609b80546001600160a01b039485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155609a80549385169382169390931790925560998054919093169116179055565b609f602052816000526040600020818154811061185157600080fd5b90600052602060002001600091509150505481565b8161187081610afb565b6118bc5760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b6002600154141561190f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b6002600155600080848152609c602052604090206004015474010000000000000000000000000000000000000000900460ff16600581111561195357611953615e3d565b148061199c575060016000848152609c602052604090206004015474010000000000000000000000000000000000000000900460ff16600581111561199a5761199a615e3d565b145b80156119b457506000838152609d6020526040902054155b611a005760405162461bcd60e51b815260206004820152601360248201527f4f70656e696e67206f722063616e63656c6564000000000000000000000000006044820152606401610aa5565b6000838152609c60205260409020546001600160a01b03163314611a665760405162461bcd60e51b815260206004820152600c60248201527f496e76616c6964206175746800000000000000000000000000000000000000006044820152606401610aa5565b6000838152609c602052604090206004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017905554611acd9084906001600160a01b0316600185613877565b604080518481523360208201527f9496d40f6a4059d9530f6361a578a4df0bfaeddcc0d913de433fd6caab89130391015b60405180910390a150506001805550565b600060046000838152609c602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611b5157611b51615e3d565b1480610b0e57506000828152609c602052604090206007810154600c90910154108015610b0e5750506000908152609c6020526040902060060154421190565b6065546001600160a01b03163314611beb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa5565b609880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60026001541415611c785760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b600260015560005b82518110156110f957611cac838281518110611c9e57611c9e615e6c565b6020026020010151836139b0565b80611cb681615dd5565b915050611c80565b6065546001600160a01b03163314611d185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa5565b609b8054911515760100000000000000000000000000000000000000000000027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b609b546001600160a01b03163314611dbe5760405162461bcd60e51b815260206004820152601460248201527f4578656375746f723a206f6e6c794272696467650000000000000000000000006044820152606401610aa5565b8160ff1660011415611df65760008082806020019051810190611de19190615375565b9250925050611df082826131c3565b50505050565b8160ff1660021415611e3157600080600083806020019051810190611e1b91906155b5565b93509350935050611e2d818385613b9c565b5050505b5050565b81611e3f81610afb565b611e8b5760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b60026001541415611ede5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b600260018190556000848152609c602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611f2357611f23615e3d565b14611f705760405162461bcd60e51b815260206004820152600960248201527f4e6f7420436c6f736500000000000000000000000000000000000000000000006044820152606401610aa5565b609854604080517fedd3159d00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163edd3159d916004808301926020929190829003018186803b158015611fce57600080fd5b505afa158015611fe2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120069190614ef8565b6001600160a01b031663463fb8c6856040518263ffffffff1660e01b815260040161203391815260200190565b60206040518083038186803b15801561204b57600080fd5b505afa15801561205f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120839190615598565b905060008163ffffffff16116120db5760405162461bcd60e51b815260206004820152600960248201527f4e6f7420447261776e00000000000000000000000000000000000000000000006044820152606401610aa5565b6000848152609d602052604090205463ffffffff8216111561213f5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642066696e616c4e6f00000000000000000000000000000000006044820152606401610aa5565b600061214b8583613d8e565b805190915061219c5760405162461bcd60e51b815260206004820152600b60248201527f4c6f73742077696e6e65720000000000000000000000000000000000000000006044820152606401610aa5565b6000858152609c6020908152604080832060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740300000000000000000000000000000000000000001790558351609d909252918290206002015581015161220d908690600187613877565b61221b858260400151613eb4565b60408181015181518781526001600160a01b03909116602082015263ffffffff84168183015290517f3f3025585478f6771e5973f8ff9aa514d8592d3648a98da300f46bb7e1cc05169181900360600190a1505060018055505050565b60006122846001614566565b905080156122b957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6122c16146bd565b6122c9614742565b609b80547fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8616027fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16177601000000000000000000000000000000000000000000008415150217905580156123b157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b505050565b816123c081610afb565b61240c5760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b6002600154141561245f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aa5565b600260019081556000848152609c602052604090206004015474010000000000000000000000000000000000000000900460ff1660058111156124a4576124a4615e3d565b146124f15760405162461bcd60e51b815260206004820152600860248201527f4e6f74204f70656e0000000000000000000000000000000000000000000000006044820152606401610aa5565b6000838152609c602052604090206007810154600c9091015410158061252757506000838152609c602052604090206006015442115b6125735760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420726561636820746172676574206f72206e6f742065787069726564006044820152606401610aa5565b6000838152609d6020908152604080832042600190910155609c90915290206007810154600c9091015410612b04576000838152609c6020908152604091829020600490810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017905560985483517fedd3159d00000000000000000000000000000000000000000000000000000000815293516001600160a01b039091169363edd3159d9381840193909291829003018186803b15801561264d57600080fd5b505afa158015612661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126859190614ef8565b6000848152609d6020526040908190205490517f19c019890000000000000000000000000000000000000000000000000000000081526004810186905260248101919091526001600160a01b0391909116906319c0198990604401600060405180830381600087803b1580156126fa57600080fd5b505af115801561270e573d6000803e3d6000fd5b5050609854604080517f3156a58d0000000000000000000000000000000000000000000000000000000081529051600094506001600160a01b039092169250633156a58d916004808301926020929190829003018186803b15801561277257600080fd5b505afa158015612786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127aa9190614ef8565b6001600160a01b03161461295157609860009054906101000a90046001600160a01b03166001600160a01b0316633156a58d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561280657600080fd5b505afa15801561281a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283e9190614ef8565b6001600160a01b031662b34ebd84609860009054906101000a90046001600160a01b03166001600160a01b03166319af32536040518163ffffffff1660e01b815260040160206040518083038186803b15801561289a57600080fd5b505afa1580156128ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d29190615598565b6128e29063ffffffff1642615d02565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561293857600080fd5b505af115801561294c573d6000803e3d6000fd5b505050505b6000838152609c60205260409020546001600160a01b031633148015612a145750609854604080517f2396197500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916323961975916004808301926020929190829003018186803b1580156129d057600080fd5b505afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a089190614ef8565b6001600160a01b031614155b15612aff57609860009054906101000a90046001600160a01b03166001600160a01b031663239619756040518163ffffffff1660e01b815260040160206040518083038186803b158015612a6757600080fd5b505afa158015612a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9f9190614ef8565b6001600160a01b031663c3084117846040518263ffffffff1660e01b8152600401612acc91815260200190565b600060405180830381600087803b158015612ae657600080fd5b505af1158015612afa573d6000803e3d6000fd5b505050505b612b6a565b6000838152609c602052604081206004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167404000000000000000000000000000000000000000017905554612b6a9185916001600160a01b03169085613877565b6000838152609c6020526040908190206004015490517f8bd3be2963318bc29de9701e2edec7b2546ea1b285e0d51596a7bc9e6aa7fe3091611afe91869133917401000000000000000000000000000000000000000090910460ff1690615b32565b6065546001600160a01b03163314612c265760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aa5565b6001600160a01b038116612ca25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610aa5565b612cab816135f8565b50565b81612cb881610afb565b612d045760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b6000838152609c60205260409020546001600160a01b03163314612d6a5760405162461bcd60e51b815260206004820152600a60248201527f6f6e6c7953656c6c6572000000000000000000000000000000000000000000006044820152606401610aa5565b61010082511115612dbd5760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964206e6f7465206c656e000000000000000000000000000000006044820152606401610aa5565b7e9dd9efb560a7c39b5c7455b4abbedee97f113fc547bffaa75f0bf316f13cf183836040516123a8929190615b95565b80612df781610afb565b612e435760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b6000828152609c6020908152604080832081516101e08101835281546001600160a01b0380821683527401000000000000000000000000000000000000000090910461ffff168286015260018301541681840152600282018054845181870281018701909552808552919492936060860193909290830182828015612ee757602002820191906000526020600020905b815481526020019060010190808311612ed3575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015612f3f57602002820191906000526020600020905b815481526020019060010190808311612f2b575b505050918352505060048201546001600160a01b038116602083015260409091019074010000000000000000000000000000000000000000900460ff166005811115612f8d57612f8d615e3d565b6005811115612f9e57612f9e615e3d565b8152600582015460208083019190915260068301546040808401919091526007840154606084015260088401546080840152600984015461ffff1660a08401528051808201909152600a8401546001600160a01b03168152600b8401549181019190915260c0820152600c82015460e0820152600d9091015461010090910152905061302983611b0f565b6130755760405162461bcd60e51b815260206004820152600860248201527f4e6f74204661696c0000000000000000000000000000000000000000000000006044820152606401610aa5565b33600090815260a06020908152604080832086845290915290206001015460ff16156130e35760405162461bcd60e51b815260206004820152600760248201527f436c61696d6564000000000000000000000000000000000000000000000000006044820152606401610aa5565b33600090815260a06020908152604080832086845290915281205461014083015161310d91613662565b33600081815260a0602081815260408084208a8552909152909120600190810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790558401519192506131679190836147c7565b60a0820151604080518681523360208201529081018390526001600160a01b0390911660608201527f8519296219951e1d116256cc20f1ea8c0aa35633f684a8b3bc42e4b6ffa17a5b906080015b60405180910390a150505050565b609b54760100000000000000000000000000000000000000000000900460ff1661322f5760405162461bcd60e51b815260206004820152600e60248201527f4e6f7420616c6c6f77207461736b0000000000000000000000000000000000006044820152606401610aa5565b6098546040517fc735fd740000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c735fd7490613278908590600401615a0f565b60206040518083038186803b15801561329057600080fd5b505afa1580156132a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c89190614ff7565b506132d7609780546001019055565b60006132e260975490565b905060018360c0015160058111156132fc576132fc615e3d565b141561332357428360e00151106133135742613319565b8260e001515b60e0840152613393565b8260e00151421115801561333f57508261010001518360e00151105b61338b5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642074696d652072616e676500000000000000000000000000006044820152606401610aa5565b600060c08401525b6000818152609c6020908152604091829020855181548388015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff000000000000000000000000000000000000000000009091166001600160a01b039283161717825592860151600182018054919094167fffffffffffffffffffffffff000000000000000000000000000000000000000091909116179092556060850151805186939261344d926002850192910190614abd565b5060808201518051613469916003840191602090910190614abd565b5060a08201516004820180546001600160a01b039092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560c0850151927fffffffffffffffffffffff0000000000000000000000000000000000000000001617740100000000000000000000000000000000000000008360058111156134f8576134f8615e3d565b021790555060e082015160058201556101008201516006820155610120820151600782015561014082015160088201556101608201516009820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff9092169190911790556101808201518051600a830180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905560200151600b8201556101a0820151600c8201556101c090910151600d909101556040517f0c51dc45078ee7d51611387251b9b023fb2b4c14ab4bdac08bca2820f8a101ea906123a890839086908690615bae565b606580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061366e8284615d55565b9392505050565b6000838152609d6020526040812054819061369190600161386b565b905060006136b360016136ad8463ffffffff808a169061386b16565b90614821565b905060405180606001604052808281526020018663ffffffff168152602001856001600160a01b0316815250609e600088815260200190815260200160002060008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160046101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050609f60008781526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150558463ffffffff1660a06000866001600160a01b03166001600160a01b03168152602001908152602001600020600088815260200190815260200160002060000160008282546137ed9190615d02565b90915550506000868152609d602090815260409182902083905581518881526001600160a01b0387169181019190915263ffffffff871681830152606081018490526080810183905290517fae00b050d09a294dbf7d73b4f1087967802e04b95ba34f770bb22cc1fca4e7429181900360a00190a195945050505050565b600061366e8284615d02565b6000848152609c6020526040902054609b54740100000000000000000000000000000000000000009182900461ffff908116929091041614156138e6576000848152609c60205260409020600d8101546001909101546138e191906001600160a01b031685613b9c565b611df0565b8115611df057609b546000858152609c60205260409081902080546001820154600d9092015492517f8305de610000000000000000000000000000000000000000000000000000000081526001600160a01b0394851694638305de619434946139789474010000000000000000000000000000000000000000900461ffff169333938c93921691908a90600401615a22565b6000604051808303818588803b15801561399157600080fd5b505af11580156139a5573d6000803e3d6000fd5b505050505050505050565b816139ba81610afb565b613a065760405162461bcd60e51b815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610aa5565b6000838152609c60205260409020546001600160a01b0316613a2784611b0f565b613a735760405162461bcd60e51b815260206004820152600860248201527f4e6f74204661696c0000000000000000000000000000000000000000000000006044820152606401610aa5565b6001600160a01b038116600090815260a06020908152604080832087845290915290206001015460ff1615613aea5760405162461bcd60e51b815260206004820152600760248201527f436c61696d6564000000000000000000000000000000000000000000000000006044820152606401610aa5565b6001600160a01b038116600090815260a0602090815260408083208784529091529020600190810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682179055613b48908590839086613877565b6000848152609c602052604090819020600181015491517f3090bc03795e5c190b39b7112509502697a7212984f74dabf6842a2b48ee1e77926131b592889286926001600160a01b03169160020190615ac4565b6098546040517f9aeecea50000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015290911690639aeecea59060240160206040518083038186803b158015613bfa57600080fd5b505afa158015613c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c329190614ff7565b15613d3e57609860009054906101000a90046001600160a01b03166001600160a01b0316639571581c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c8557600080fd5b505afa158015613c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbd9190614ef8565b6040517ef714ce000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b038381166024830152919091169062f714ce906044015b600060405180830381600087803b158015613d2157600080fd5b505af1158015613d35573d6000803e3d6000fd5b50505050505050565b6099546040517ef714ce000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0383811660248301529091169062f714ce90604401613d07565b60408051606081018252600080825260208201819052918101919091526000838152609e6020908152604080832063ffffffff86811685529083529281902081516060810183528154808252600190920154948516938101939093526401000000009093046001600160a01b0316908201529061366e576000848152609f60205260408120613e269063ffffffff8087169061482d16565b6000868152609f602052604081208054929350909183908110613e4b57613e4b615e6c565b600091825260208083209190910154888352609e825260408084209184529082529182902082516060810184528154815260019091015463ffffffff8116928201929092526401000000009091046001600160a01b031691810191909152925050509392505050565b6000828152609c60209081526040808320600480820154600c9092015460985484517fa5a4103100000000000000000000000000000000000000000000000000000000815294516001600160a01b0394851697929687969395613f839561271095613f7d959092169363a5a410319383830193909290829003018186803b158015613f3e57600080fd5b505afa158015613f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f76919061524c565b8690613662565b906148f0565b90506000609860009054906101000a90046001600160a01b03166001600160a01b03166372c8fc0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613fd557600080fd5b505afa158015613fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400d9190614ef8565b90506140198383614821565b6000888152609c6020526040812060090154919450908190606090819061ffff161561427057609860009054906101000a90046001600160a01b03166001600160a01b03166393f1c9116040518163ffffffff1660e01b815260040160206040518083038186803b15801561408d57600080fd5b505afa1580156140a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c59190614ef8565b60008c8152609c6020526040908190206009015490517f74a0a25100000000000000000000000000000000000000000000000000000000815261ffff90911660048201526001600160a01b038c81166024830152604482018e905291909116906374a0a2519060640160006040518083038186803b15801561414657600080fd5b505afa15801561415a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526141a09190810190615265565b919450925090506113888311156141f95760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964207374726174656779000000000000000000000000000000006044820152606401610aa5565b600a8251111561424b5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642073706c6974536861726500000000000000000000000000006044820152606401610aa5565b821561427057614261612710613f7d8a86613662565b935061426d8785614821565b96505b61427b8986886147c7565b604080518c81526001600160a01b0387811660208301528b16818301526060810188905290517f12904628fc3f4d088dc43c89ce57d125affd9814ed762f3463aafbdd6695cdb49181900360800190a183156144d257600082511180156142e3575080518251145b156144765761271060005b835181101561444c57600061432585838151811061430e5761430e615e6c565b60200260200101518461482190919063ffffffff16565b1015801561434c5750600084828151811061434257614342615e6c565b6020026020010151115b1561443a576000614385612710613f7d87858151811061436e5761436e615e6c565b60200260200101518a61366290919063ffffffff16565b90506143ab8c85848151811061439d5761439d615e6c565b6020026020010151836147c7565b6143c085838151811061430e5761430e615e6c565b92507ff19eb0aac803899ad79b0cb5b824183d99a0b555de9c57ef33a9c6d7cb677bbb8e8584815181106143f6576143f6615e6c565b60200260200101518e8460405161443094939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a1505b8061444481615dd5565b9150506142ee565b5080156144705761446d614466612710613f7d8885613662565b899061386b565b97505b506144d2565b614481898b866147c7565b604080518c81526001600160a01b038c811660208301528b16818301526060810186905290517ff19eb0aac803899ad79b0cb5b824183d99a0b555de9c57ef33a9c6d7cb677bbb9181900360800190a15b60008b8152609c60205260409020546144f6908a906001600160a01b0316896147c7565b60008b8152609c60209081526040918290205482518e81526001600160a01b03918216928101929092528b16818301526060810189905290517ffa4054066d213019ba303aa80eb69385480b4c77c8591269524b9f9861936ef49181900360800190a15050505050505050505050565b60008054610100900460ff1615614603578160ff1660011480156145895750303b155b6145fb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610aa5565b506000919050565b60005460ff8084169116106146805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610aa5565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b600054610100900460ff1661473a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610aa5565b6111666148fc565b600054610100900460ff166147bf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610aa5565b61116661497f565b609a546040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528581166024830152604482018490529091169063d9caed1290606401613d07565b600061366e8284615d92565b815460009061483e57506000610b0e565b82546000905b8082101561489a5760006148588383614a05565b90508486828154811061486d5761486d615e6c565b9060005260206000200154111561488657809150614894565b614891816001615d02565b92505b50614844565b6000821180156148cf575083856148b2600185615d92565b815481106148c2576148c2615e6c565b9060005260206000200154145b156148e8576148df600183615d92565b92505050610b0e565b509050610b0e565b600061366e8284615d1a565b600054610100900460ff166149795760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610aa5565b60018055565b600054610100900460ff166149fc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610aa5565b611166336135f8565b6000614a146002848418615d1a565b61366e90848416615d02565b604080516101e0810182526000808252602082018190529181018290526060808201819052608082015260a081018290529060c0820190815260200160008152602001600081526020016000815260200160008152602001600061ffff168152602001614aa9604051806040016040528060006001600160a01b03168152602001600081525090565b815260200160008152602001600081525090565b828054828255906000526020600020908101928215614af8579160200282015b82811115614af8578251825591602001919060010190614add565b50614b04929150614b08565b5090565b5b80821115614b045760008155600101614b09565b80356146b881615eca565b80516146b881615eca565b600082601f830112614b4457600080fd5b81356020614b59614b5483615c98565b615c49565b80838252828201915082860187848660051b8901011115614b7957600080fd5b60005b85811015614b9857813584529284019290840190600101614b7c565b5090979650505050505050565b600082601f830112614bb657600080fd5b81516020614bc6614b5483615c98565b80838252828201915082860187848660051b8901011115614be657600080fd5b60005b85811015614b9857815184529284019290840190600101614be9565b600082601f830112614c1657600080fd5b8135614c24614b5482615cbc565b818152846020838601011115614c3957600080fd5b816020850160208301376000918101602001919091529392505050565b80356146b881615eed565b80516146b881615eed565b600082601f830112614c7d57600080fd5b8151614c8b614b5482615cbc565b818152846020838601011115614ca057600080fd5b614cb1826020830160208701615da9565b949350505050565b600060408284031215614ccb57600080fd5b614cd3615bd9565b90508135614ce081615eca565b808252506020820135602082015292915050565b600060408284031215614d0657600080fd5b614d0e615bd9565b90508151614d1b81615eca565b808252506020820151602082015292915050565b600060608284031215614d4157600080fd5b614d49615c02565b90508135614d5681615efa565b8152602082013567ffffffffffffffff80821115614d7357600080fd5b614d7f85838601614c05565b60208401526040840135915080821115614d9857600080fd5b50614da584828501614c05565b60408301525092915050565b600060608284031215614dc357600080fd5b614dcb615c02565b90508151614dd881615efa565b8152602082015167ffffffffffffffff80821115614df557600080fd5b614e0185838601614c6c565b60208401526040840151915080821115614e1a57600080fd5b50614da584828501614c6c565b600060808284031215614e3957600080fd5b6040516080810167ffffffffffffffff8282108183111715614e5d57614e5d615e9b565b8160405282935084358352602085013560208401526040850135915080821115614e8657600080fd5b614e9286838701614c05565b60408401526060850135915080821115614eab57600080fd5b50614eb885828601614c05565b6060830152505092915050565b80356146b881615efa565b80516146b881615efa565b600060208284031215614eed57600080fd5b813561366e81615eca565b600060208284031215614f0a57600080fd5b815161366e81615eca565b60008060408385031215614f2857600080fd5b8235614f3381615eca565b946020939093013593505050565b600060208284031215614f5357600080fd5b813567ffffffffffffffff811115614f6a57600080fd5b614cb184828501614b33565b60008060408385031215614f8957600080fd5b823567ffffffffffffffff80821115614fa157600080fd5b614fad86838701614b33565b93506020850135915080821115614fc357600080fd5b50614fd085828601614e27565b9150509250929050565b600060208284031215614fec57600080fd5b813561366e81615edf565b60006020828403121561500957600080fd5b815161366e81615edf565b60008060006060848603121561502957600080fd5b833561503481615eca565b9250602084013561504481615eca565b9150604084013561505481615eca565b809150509250925092565b60008060006060848603121561507457600080fd5b833567ffffffffffffffff8082111561508c57600080fd5b9085019061020082880312156150a157600080fd5b6150a9615c25565b6150b283614b1d565b81526150c060208401614ec5565b60208201526150d160408401614b1d565b60408201526060830135828111156150e857600080fd5b6150f489828601614b33565b60608301525060808301358281111561510c57600080fd5b61511889828601614b33565b60808301525061512a60a08401614b1d565b60a082015261513b60c08401614c56565b60c082015260e08381013590820152610100808401359082015261012080840135908201526101408084013590820152610160615179818501614ec5565b9082015261018061518c89858301614cb9565b81830152506101c0808401356101a08301526101e084013581830152508095505060208601359150808211156151c157600080fd5b6151cd87838801614d2f565b935060408601359150808211156151e357600080fd5b506151f086828701614e27565b9150509250925092565b6000806040838503121561520d57600080fd5b823561521881615efa565b9150602083013561522881615edf565b809150509250929050565b60006020828403121561524557600080fd5b5035919050565b60006020828403121561525e57600080fd5b5051919050565b60008060006060848603121561527a57600080fd5b8351925060208085015167ffffffffffffffff8082111561529a57600080fd5b6152a688838901614ba5565b945060408701519150808211156152bc57600080fd5b508501601f810187136152ce57600080fd5b80516152dc614b5482615c98565b8082825284820191508484018a868560051b87010111156152fc57600080fd5b600094505b8385101561532857805161531481615eca565b835260019490940193918501918501615301565b5080955050505050509250925092565b6000806040838503121561534b57600080fd5b82359150602083013567ffffffffffffffff81111561536957600080fd5b614fd085828601614c05565b60008060006060848603121561538a57600080fd5b83519250602084015167ffffffffffffffff808211156153a957600080fd5b9085019061020082880312156153be57600080fd5b6153c6615c25565b6153cf83614b28565b81526153dd60208401614ed0565b60208201526153ee60408401614b28565b604082015260608301518281111561540557600080fd5b61541189828601614ba5565b60608301525060808301518281111561542957600080fd5b61543589828601614ba5565b60808301525061544760a08401614b28565b60a082015261545860c08401614c61565b60c082015260e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160615496818501614ed0565b908201526101806154a989858301614cf4565b908201526101c0838101516101a08301526101e090930151928101929092526040860151919350808211156154dd57600080fd5b506151f086828701614db1565b600080604083850312156154fd57600080fd5b82359150602083013567ffffffffffffffff81111561551b57600080fd5b614fd085828601614e27565b6000806040838503121561553a57600080fd5b50508035926020909101359150565b60008060006060848603121561555e57600080fd5b83359250602084013561557081615f0a565b9150604084013567ffffffffffffffff81111561558c57600080fd5b6151f086828701614c05565b6000602082840312156155aa57600080fd5b815161366e81615f0a565b600080600080608085870312156155cb57600080fd5b84516155d681615f1c565b60208601519094506155e781615eca565b60408601519093506155f881615eca565b6060959095015193969295505050565b6000806040838503121561561b57600080fd5b823561562681615f1c565b9150602083013567ffffffffffffffff81111561536957600080fd5b600081518084526020808501945080840160005b8381101561567257815187529582019590820190600101615656565b509495945050505050565b60008151808452615695816020860160208601615da9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600681106156fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b61ffff81511682526000602082015160606020850152615725606085018261567d565b90506040830151848203604086015261573e828261567d565b95945050505050565b80516001600160a01b031682526000610200602083015161576e602086018261ffff169052565b50604083015161578960408601826001600160a01b03169052565b5060608301518160608601526157a182860182615642565b915050608083015184820360808601526157bb8282615642565b91505060a08301516157d860a08601826001600160a01b03169052565b5060c08301516157eb60c08601826156c7565b5060e083810151908501526101008084015190850152610120808401519085015261014080840151908501526101608084015161ffff81168287015250506101808381015180516001600160a01b03168683015260208101516101a087015250506101a08301516101c085810191909152909201516101e090930192909252919050565b80518252602081015160208301526000604082015160806040850152615898608085018261567d565b90506060830151848203606086015261573e828261567d565b60006001600160a01b03808816835280871660208401525060a060408301526158dd60a0830186615642565b82810360608401526158ef8186615642565b9150508260808301529695505050505050565b6001600160a01b0383168152604060208201526000614cb16040830184615747565b6001600160a01b038e8116825261ffff8e1660208301528c811660408301528b1660608201526101c0810161595c608083018c6156c7565b8960a08301528860c08301528760e08301528661010083015261ffff86166101208301526159a161014083018680516001600160a01b03168252602090810151910152565b6101808201939093526101a001529b9a5050505050505050505050565b6001600160a01b038516815283602082015263ffffffff831660408201526080606082015260006159f2608083018461567d565b9695505050505050565b60208152600061366e6020830184615702565b60208152600061366e6020830184615747565b61ffff8716815260006001600160a01b038088166020840152808716604084015280861660608401525083608083015260c060a0830152615a6660c083018461586f565b98975050505050505050565b61ffff861681526001600160a01b038516602082015260a060408201526000615a9e60a0830186615747565b8281036060840152615ab08186615702565b90508281036080840152615a66818561586f565b60006080820186835260206001600160a01b03808816828601528087166040860152506080606085015281855480845260a0860191508660005282600020935060005b81811015615b2357845483526001948501949284019201615b07565b50909998505050505050505050565b8381526001600160a01b038316602082015260608101614cb160408301846156c7565b8681526001600160a01b038616602082015284604082015263ffffffff8416606082015282608082015260c060a08201526000615a6660c083018461567d565b828152604060208201526000614cb1604083018461567d565b838152606060208201526000615bc76060830185615747565b82810360408401526159f28185615702565b6040805190810167ffffffffffffffff81118282101715615bfc57615bfc615e9b565b60405290565b6040516060810167ffffffffffffffff81118282101715615bfc57615bfc615e9b565b6040516101e0810167ffffffffffffffff81118282101715615bfc57615bfc615e9b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715615c9057615c90615e9b565b604052919050565b600067ffffffffffffffff821115615cb257615cb2615e9b565b5060051b60200190565b600067ffffffffffffffff821115615cd657615cd6615e9b565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008219821115615d1557615d15615e0e565b500190565b600082615d50577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615d8d57615d8d615e0e565b500290565b600082821015615da457615da4615e0e565b500390565b60005b83811015615dc4578181015183820152602001615dac565b83811115611df05750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615e0757615e07615e0e565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b0381168114612cab57600080fd5b8015158114612cab57600080fd5b60068110612cab57600080fd5b61ffff81168114612cab57600080fd5b63ffffffff81168114612cab57600080fd5b60ff81168114612cab57600080fdfea26469706673582212204bdb54ae59f1663e3e66fbbf09c0332f2dbf048a7a7fdfdd3e3b5ef7ef776dd764736f6c63430008060033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"address","name":"seller","type":"address"}],"name":"CancelTask","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"address","name":"seller","type":"address"},{"indexed":false,"internalType":"address","name":"nftContract","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"ClaimNFT","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"address","name":"caller","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"acceptToken","type":"address"}],"name":"ClaimToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"address","name":"caller","type":"address"},{"indexed":false,"internalType":"enum TaskStatus","name":"status","type":"uint8"}],"name":"CloseTask","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint16","name":"nftChainId","type":"uint16"},{"internalType":"address","name":"nftContract","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenAmounts","type":"uint256[]"},{"internalType":"address","name":"acceptToken","type":"address"},{"internalType":"enum TaskStatus","name":"status","type":"uint8"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"targetAmount","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint16","name":"paymentStrategy","type":"uint16"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ExclusiveToken","name":"exclusiveToken","type":"tuple"},{"internalType":"uint256","name":"amountCollected","type":"uint256"},{"internalType":"uint256","name":"depositId","type":"uint256"}],"indexed":false,"internalType":"struct TaskItem","name":"item","type":"tuple"},{"components":[{"internalType":"uint16","name":"chainId","type":"uint16"},{"internalType":"string","name":"title","type":"string"},{"internalType":"string","name":"note","type":"string"}],"indexed":false,"internalType":"struct TaskExt","name":"ext","type":"tuple"}],"name":"CreateTask","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"address","name":"buyer","type":"address"},{"indexed":false,"internalType":"uint256","name":"num","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"start","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"end","type":"uint256"}],"name":"CreateTickets","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"address","name":"buyer","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"count","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"number","type":"uint256"},{"indexed":false,"internalType":"string","name":"note","type":"string"}],"name":"JoinTask","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"address","name":"winner","type":"address"},{"indexed":false,"internalType":"uint256","name":"number","type":"uint256"}],"name":"PickWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferPayment","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferShareAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"taskId","type":"uint256"},{"indexed":false,"internalType":"string","name":"note","type":"string"}],"name":"UpdateTaskNote","type":"event"},{"inputs":[],"name":"BRIDGE","outputs":[{"internalType":"contract ILucksBridge","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"HELPER","outputs":[{"internalType":"contract ILucksHelper","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NFT","outputs":[{"internalType":"contract IProxyNFTStation","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN","outputs":[{"internalType":"contract IProxyTokenStation","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"},{"components":[{"internalType":"uint256","name":"dstGasForCall","type":"uint256"},{"internalType":"uint256","name":"dstNativeAmount","type":"uint256"},{"internalType":"bytes","name":"dstNativeAddr","type":"bytes"},{"internalType":"bytes","name":"zroPaymentAddr","type":"bytes"}],"internalType":"struct lzTxObj","name":"_param","type":"tuple"}],"name":"cancelTask","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"taskIds","type":"uint256[]"},{"components":[{"internalType":"uint256","name":"dstGasForCall","type":"uint256"},{"internalType":"uint256","name":"dstNativeAmount","type":"uint256"},{"internalType":"bytes","name":"dstNativeAddr","type":"bytes"},{"internalType":"bytes","name":"zroPaymentAddr","type":"bytes"}],"internalType":"struct lzTxObj","name":"_param","type":"tuple"}],"name":"claimNFTs","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"taskIds","type":"uint256[]"}],"name":"claimTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"},{"components":[{"internalType":"uint256","name":"dstGasForCall","type":"uint256"},{"internalType":"uint256","name":"dstNativeAmount","type":"uint256"},{"internalType":"bytes","name":"dstNativeAddr","type":"bytes"},{"internalType":"bytes","name":"zroPaymentAddr","type":"bytes"}],"internalType":"struct lzTxObj","name":"_param","type":"tuple"}],"name":"closeTask","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint16","name":"nftChainId","type":"uint16"},{"internalType":"address","name":"nftContract","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenAmounts","type":"uint256[]"},{"internalType":"address","name":"acceptToken","type":"address"},{"internalType":"enum TaskStatus","name":"status","type":"uint8"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"targetAmount","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint16","name":"paymentStrategy","type":"uint16"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ExclusiveToken","name":"exclusiveToken","type":"tuple"},{"internalType":"uint256","name":"amountCollected","type":"uint256"},{"internalType":"uint256","name":"depositId","type":"uint256"}],"internalType":"struct TaskItem","name":"item","type":"tuple"},{"components":[{"internalType":"uint16","name":"chainId","type":"uint16"},{"internalType":"string","name":"title","type":"string"},{"internalType":"string","name":"note","type":"string"}],"internalType":"struct TaskExt","name":"ext","type":"tuple"},{"components":[{"internalType":"uint256","name":"dstGasForCall","type":"uint256"},{"internalType":"uint256","name":"dstNativeAmount","type":"uint256"},{"internalType":"bytes","name":"dstNativeAddr","type":"bytes"},{"internalType":"bytes","name":"zroPaymentAddr","type":"bytes"}],"internalType":"struct lzTxObj","name":"_param","type":"tuple"}],"name":"createTask","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"getInfo","outputs":[{"components":[{"internalType":"uint256","name":"lastTID","type":"uint256"},{"internalType":"uint256","name":"closeTime","type":"uint256"},{"internalType":"uint256","name":"finalNo","type":"uint256"}],"internalType":"struct TaskInfo","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"getTask","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint16","name":"nftChainId","type":"uint16"},{"internalType":"address","name":"nftContract","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenAmounts","type":"uint256[]"},{"internalType":"address","name":"acceptToken","type":"address"},{"internalType":"enum TaskStatus","name":"status","type":"uint8"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"targetAmount","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint16","name":"paymentStrategy","type":"uint16"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ExclusiveToken","name":"exclusiveToken","type":"tuple"},{"internalType":"uint256","name":"amountCollected","type":"uint256"},{"internalType":"uint256","name":"depositId","type":"uint256"}],"internalType":"struct TaskItem","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"infos","outputs":[{"internalType":"uint256","name":"lastTID","type":"uint256"},{"internalType":"uint256","name":"closeTime","type":"uint256"},{"internalType":"uint256","name":"finalNo","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"_chainId","type":"uint16"},{"internalType":"bool","name":"_allowTask","type":"bool"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAllowTask","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"}],"name":"isFail","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"},{"internalType":"uint32","name":"num","type":"uint32"},{"internalType":"string","name":"note","type":"string"}],"name":"joinTask","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"lzChainId","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"functionType","type":"uint8"},{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"onLzReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"},{"components":[{"internalType":"uint256","name":"dstGasForCall","type":"uint256"},{"internalType":"uint256","name":"dstNativeAmount","type":"uint256"},{"internalType":"bytes","name":"dstNativeAddr","type":"bytes"},{"internalType":"bytes","name":"zroPaymentAddr","type":"bytes"}],"internalType":"struct lzTxObj","name":"_param","type":"tuple"}],"name":"pickWinner","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"enable","type":"bool"}],"name":"setAllowTask","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract ILucksBridge","name":"_bridge","type":"address"},{"internalType":"contract IProxyTokenStation","name":"_token","type":"address"},{"internalType":"contract IProxyNFTStation","name":"_nft","type":"address"}],"name":"setBridgeAndProxy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract ILucksHelper","name":"addr","type":"address"}],"name":"setLucksHelper","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tasks","outputs":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint16","name":"nftChainId","type":"uint16"},{"internalType":"address","name":"nftContract","type":"address"},{"internalType":"address","name":"acceptToken","type":"address"},{"internalType":"enum TaskStatus","name":"status","type":"uint8"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"targetAmount","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint16","name":"paymentStrategy","type":"uint16"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct ExclusiveToken","name":"exclusiveToken","type":"tuple"},{"internalType":"uint256","name":"amountCollected","type":"uint256"},{"internalType":"uint256","name":"depositId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"ticketIds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"tickets","outputs":[{"internalType":"uint256","name":"number","type":"uint256"},{"internalType":"uint32","name":"count","type":"uint32"},{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"taskId","type":"uint256"},{"internalType":"string","name":"note","type":"string"}],"name":"updateTaskNote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userState","outputs":[{"internalType":"uint256","name":"num","type":"uint256"},{"internalType":"bool","name":"claimed","type":"bool"}],"stateMutability":"view","type":"function"}]}
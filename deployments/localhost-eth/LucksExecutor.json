{
  "address": "0x4f785fae3C549963340113a1b3670c1fd553e122",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILucksHelper",
          "name": "_helper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_prevId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_allowTask",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "CancelTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "acceptToken",
          "type": "address"
        }
      ],
      "name": "ClaimToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum TaskStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "CloseTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TaskItem",
          "name": "item",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "note",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct TaskExt",
          "name": "ext",
          "type": "tuple"
        }
      ],
      "name": "CreateTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "CreateTickets",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "JoinTask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "PickWinner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BRIDGE",
      "outputs": [
        {
          "internalType": "contract ILucksBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HELPER",
      "outputs": [
        {
          "internalType": "contract ILucksHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_NFT",
      "outputs": [
        {
          "internalType": "contract IProxyNFTStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_TOKEN",
      "outputs": [
        {
          "internalType": "contract IProxyTokenStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "zroPaymentAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "cancelTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "taskIds",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "zroPaymentAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "claimNFTs",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "taskIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "zroPaymentAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "closeTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskItem",
          "name": "item",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "note",
              "type": "string"
            }
          ],
          "internalType": "struct TaskExt",
          "name": "ext",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "zroPaymentAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "createTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "getInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lastTID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "nftChainId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "acceptToken",
              "type": "address"
            },
            {
              "internalType": "enum TaskStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "paymentStrategy",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExclusiveToken",
              "name": "exclusiveToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amountCollected",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TaskItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAllowTask",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "isFail",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "joinTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "functionType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "onLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "zroPaymentAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct lzTxObj",
          "name": "_param",
          "type": "tuple"
        }
      ],
      "name": "pickWinner",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prevId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setAllowTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksBridge",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "contract IProxyTokenStation",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IProxyNFTStation",
          "name": "_nft",
          "type": "address"
        }
      ],
      "name": "setBridgeAndProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILucksHelper",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setLucksHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tasks",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "nftChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acceptToken",
          "type": "address"
        },
        {
          "internalType": "enum TaskStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "paymentStrategy",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExclusiveToken",
          "name": "exclusiveToken",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amountCollected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ticketIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "count",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userClaimeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf25f74011e2b9761663321279a83fab798aa0eb865087014795eb45dff16a78a",
  "receipt": {
    "to": null,
    "from": "0x8c623589Ce38936A138a70cCE554553473BbC0f4",
    "contractAddress": "0x4f785fae3C549963340113a1b3670c1fd553e122",
    "transactionIndex": 0,
    "gasUsed": "5319616",
    "logsBloom": "0x
    "blockHash": "0xbb48bc448ab5317beab1418c4c255093d1018187e0bde6484153952370ef0947",
    "transactionHash": "0xf25f74011e2b9761663321279a83fab798aa0eb865087014795eb45dff16a78a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18141,
        "transactionHash": "0xf25f74011e2b9761663321279a83fab798aa0eb865087014795eb45dff16a78a",
        "address": "0x4f785fae3C549963340113a1b3670c1fd553e122",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c623589ce38936a138a70cce554553473bbc0f4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbb48bc448ab5317beab1418c4c255093d1018187e0bde6484153952370ef0947"
      }
    ],
    "blockNumber": 18141,
    "cumulativeGasUsed": "5319616",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    0,
    1,
    false
  ],
  "numDeployments": 1,
  "solcInputHash": "70231f361b17e0bcfd950564ac90e3b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILucksHelper\",\"name\":\"_helper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_prevId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_allowTask\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"CancelTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ClaimNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"CloseTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TaskItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct TaskExt\",\"name\":\"ext\",\"type\":\"tuple\"}],\"name\":\"CreateTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"CreateTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"JoinTask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"PickWinner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"contract ILucksBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HELPER\",\"outputs\":[{\"internalType\":\"contract ILucksHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_NFT\",\"outputs\":[{\"internalType\":\"contract IProxyNFTStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_TOKEN\",\"outputs\":[{\"internalType\":\"contract IProxyTokenStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"zroPaymentAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"cancelTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"taskIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"zroPaymentAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"claimNFTs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"taskIds\",\"type\":\"uint256[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"zroPaymentAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"closeTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"internalType\":\"struct TaskExt\",\"name\":\"ext\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"zroPaymentAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"getInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastTID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"internalType\":\"struct TaskItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllowTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"isFail\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"joinTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"functionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"zroPaymentAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct lzTxObj\",\"name\":\"_param\",\"type\":\"tuple\"}],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setAllowTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksBridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"contract IProxyTokenStation\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IProxyNFTStation\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setBridgeAndProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILucksHelper\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLucksHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"nftChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptToken\",\"type\":\"address\"},{\"internalType\":\"enum TaskStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"paymentStrategy\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExclusiveToken\",\"name\":\"exclusiveToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"count\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_allowTask\":\"allow running task\",\"_chainId\":\"layerZero chainId\",\"_helper\":\"protocol helper address\",\"_prevId\":\"previous taskId\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Openluck LucksTrade.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelTask(uint256,(uint256,uint256,bytes,bytes))\":{\"notice\":\"seller cancel the task, only when task status equal to 'Pending' or no funds amount\"},\"claimNFTs(uint256[],(uint256,uint256,bytes,bytes))\":{\"notice\":\"when taskItem Fail, user can claim NFTs back (cross-chain case)\"},\"claimTokens(uint256[])\":{\"notice\":\"when taskItem Fail, user can claim tokens back \"},\"closeTask(uint256,(uint256,uint256,bytes,bytes))\":{\"notice\":\"finish a Task,  case 1: reach target crowd amount, status success, and start to pick a winner case 2: time out and not reach the target amount, status close, and returns funds to claimable pool\"},\"constructor\":{\"notice\":\"Constructor\"},\"joinTask(uint256,uint32,string)\":{\"notice\":\"buyer join a task num: how many ticket\"},\"pickWinner(uint256,(uint256,uint256,bytes,bytes))\":{\"notice\":\"start to picker a winner via chainlink VRF\"}},\"notice\":\"It is the core contract for crowd funds to buy NFTs result to one lucky winner randomness provided externally.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LucksExecutor.sol\":\"LucksExecutor\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7bc891be2bc5948340a8fb14ad36c8846230c9086269e37f3febf0dc239c9f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/LucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// imports\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskExt, TaskStatus, Ticket, TaskInfo} from \\\"./interfaces/ILucksExecutor.sol\\\";\\r\\nimport {IProxyNFTStation} from \\\"./interfaces/IProxyNFTStation.sol\\\";\\r\\nimport {IProxyTokenStation} from \\\"./interfaces/IProxyTokenStation.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./interfaces/ILucksHelper.sol\\\";\\r\\nimport {ILucksBridge, lzTxObj} from \\\"./interfaces/ILucksBridge.sol\\\";\\r\\n\\r\\n\\r\\n/** @title Openluck LucksTrade.\\r\\n * @notice It is the core contract for crowd funds to buy NFTs result to one lucky winner\\r\\n * randomness provided externally.\\r\\n */\\r\\ncontract LucksExecutor is ILucksExecutor, ReentrancyGuard, Ownable {    \\r\\n    using SafeMath for uint256;\\r\\n    using Arrays for uint256[];\\r\\n\\r\\n    uint256 public prevId;\\r\\n    uint256 public currentId;\\r\\n\\r\\n    // ============ Openluck interfaces ============\\r\\n    \\r\\n    ILucksHelper public HELPER;    \\r\\n    IProxyNFTStation public PROXY_NFT;\\r\\n    IProxyTokenStation public PROXY_TOKEN;\\r\\n    ILucksBridge public BRIDGE;\\r\\n    \\r\\n    uint16 public immutable lzChainId;\\r\\n    bool public isAllowTask; // this network allow running task or not (ethereum & Rinkeby not allow)\\r\\n\\r\\n    // ============ Public Mutable Storage ============\\r\\n\\r\\n    // VARIABLES    \\r\\n    mapping(uint256 => TaskItem) public tasks; // store tasks info by taskId    \\r\\n    mapping(uint256 => mapping(uint256 => Ticket)) public tickets; // store tickets (taskId => ticketId => ticket)    \\r\\n    mapping(uint256 => uint256[]) public ticketIds; // store ticket ids (taskId => lastTicketIds)         \\r\\n    mapping(uint256 => TaskInfo) private infos; // store task updated info (taskId=>TaskInfo)\\r\\n    mapping(address => mapping(uint256 => uint256)) public userTickets; // Keep track of user ticket ids for a given taskId (user => taskId => ticket count)    \\r\\n    mapping(address => mapping(uint256 => uint256)) public userClaimeds; // store user claimable token amount (user=>taskId=>amount)\\r\\n\\r\\n    // ======== Constructor =========\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     * @param _helper protocol helper address\\r\\n     * @param _prevId previous taskId\\r\\n     * @param _chainId layerZero chainId\\r\\n     * @param _allowTask allow running task\\r\\n     */\\r\\n    constructor(ILucksHelper _helper, uint256 _prevId, uint16 _chainId, bool _allowTask) {\\r\\n        HELPER = _helper;        \\r\\n        lzChainId = _chainId;\\r\\n        isAllowTask = _allowTask;\\r\\n        prevId = _prevId;\\r\\n        currentId = _prevId;\\r\\n    }\\r\\n\\r\\n    //  ============ Modifiers  ============\\r\\n\\r\\n    // MODIFIERS\\r\\n    modifier onlyBridge() {\\r\\n        require(msg.sender == address(BRIDGE), \\\"onlyBridge\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isExists(uint256 taskId) {\\r\\n        require(exists(taskId), \\\"Task not exists\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ============ Public functions ============\\r\\n\\r\\n    function count() public view override returns (uint256) {\\r\\n        return currentId - prevId;\\r\\n    }\\r\\n\\r\\n    function exists(uint256 taskId) public view override returns (bool) {\\r\\n        return taskId > prevId && taskId <= currentId;\\r\\n    }\\r\\n\\r\\n    function getTask(uint256 taskId) public view override returns (TaskItem memory) {\\r\\n        return tasks[taskId];\\r\\n    }\\r\\n\\r\\n    function getInfo(uint256 taskId) public view override returns (TaskInfo memory) {\\r\\n        return infos[taskId];\\r\\n    }\\r\\n    \\r\\n    function isFail(uint256 taskId) public view override returns(bool) {\\r\\n        return tasks[taskId].status == TaskStatus.Fail ||\\r\\n            (tasks[taskId].amountCollected < tasks[taskId].targetAmount && block.timestamp > tasks[taskId].endTime);\\r\\n    }\\r\\n\\r\\n    function getChainId() external view override returns (uint16) {\\r\\n        return lzChainId;\\r\\n    }\\r\\n    \\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable override nonReentrant {\\r\\n        \\r\\n        require(lzChainId == item.nftChainId, \\\"Invalid chainId\\\"); // action must start from NFTChain   \\r\\n        require(address(PROXY_NFT) != address(0), \\\"ProxyNFT unset\\\");\\r\\n\\r\\n        // inputs validation\\r\\n        HELPER.checkNewTask(msg.sender, item);\\r\\n        HELPER.checkNewTaskExt(ext);\\r\\n\\r\\n        // Transfer nfts to proxy station (NFTChain) \\r\\n        // in case of dst chain transection fail, enable user redeem nft back, after endTime\\r\\n        uint256 depositId = PROXY_NFT.deposit(msg.sender, item.nftContract, item.tokenIds, item.tokenAmounts, item.endTime);\\r\\n        item.depositId = depositId;\\r\\n             \\r\\n        // Create Task Item           \\r\\n        if (ext.chainId == item.nftChainId) { // same chain creation    \\r\\n            _createTask(item, ext);\\r\\n        }\\r\\n        else {\\r\\n            // cross chain creation\\r\\n            require(address(BRIDGE) != address(0), \\\"Bridge unset\\\");\\r\\n            BRIDGE.sendCreateTask{value: msg.value}(ext.chainId, payable(msg.sender), item, ext, _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice buyer join a task\\r\\n    num: how many ticket\\r\\n    */\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable override isExists(taskId) nonReentrant \\r\\n    {\\r\\n        // check inputs and task\\r\\n        HELPER.checkJoinTask(msg.sender, taskId, num, note);\\r\\n\\r\\n        // Calculate number of TOKEN to this contract\\r\\n        uint256 amount = tasks[taskId].price.mul(num);\\r\\n\\r\\n        // deposit payment to token station.        \\r\\n        PROXY_TOKEN.deposit{value: msg.value}(msg.sender, tasks[taskId].acceptToken, amount);\\r\\n\\r\\n        // create tickets\\r\\n        uint256 lastTKID = _createTickets(taskId, num, msg.sender);\\r\\n\\r\\n        // update task item info\\r\\n        if (tasks[taskId].status == TaskStatus.Pending) {\\r\\n            tasks[taskId].status = TaskStatus.Open; \\r\\n        }\\r\\n        tasks[taskId].amountCollected = tasks[taskId].amountCollected.add(amount);\\r\\n\\r\\n        //if reach target amount, trigger to close task\\r\\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {\\r\\n            if (address(HELPER.getAutoClose()) != address(0)) {\\r\\n                HELPER.getAutoClose().addTask(taskId, tasks[taskId].endTime);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit JoinTask(taskId, msg.sender, amount, num, lastTKID, note);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice seller cancel the task, only when task status equal to 'Pending' or no funds amount\\r\\n    */\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \\r\\n    {                                \\r\\n        require((tasks[taskId].status == TaskStatus.Pending || tasks[taskId].status == TaskStatus.Open) && infos[taskId].lastTID <= 0, \\\"Opening or canceled\\\");        \\r\\n        require(tasks[taskId].seller == msg.sender, \\\"Invalid auth\\\"); // only seller can cancel\\r\\n        \\r\\n        // update status\\r\\n        tasks[taskId].status = TaskStatus.Close;\\r\\n        \\r\\n        _withdrawNFTs(taskId, payable(tasks[taskId].seller), true, _param);\\r\\n\\r\\n        emit CancelTask(taskId, msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice finish a Task, \\r\\n    case 1: reach target crowd amount, status success, and start to pick a winner\\r\\n    case 2: time out and not reach the target amount, status close, and returns funds to claimable pool\\r\\n    */\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant \\r\\n    {        \\r\\n        require(tasks[taskId].status == TaskStatus.Open, \\\"Not Open\\\");\\r\\n        require(tasks[taskId].amountCollected >= tasks[taskId].targetAmount || block.timestamp > tasks[taskId].endTime, \\\"Not reach target or not expired\\\");\\r\\n\\r\\n        // mark operation time\\r\\n        infos[taskId].closeTime = block.timestamp;\\r\\n\\r\\n        if (tasks[taskId].amountCollected >= tasks[taskId].targetAmount) {    \\r\\n            // Reached task target        \\r\\n            // update task, Task Close & start to draw\\r\\n            tasks[taskId].status = TaskStatus.Close; \\r\\n\\r\\n            // Request a random number from the generator based on a seed(max ticket number)\\r\\n            HELPER.getVRF().reqRandomNumber(taskId, infos[taskId].lastTID);\\r\\n\\r\\n            // add to auto draw Queue\\r\\n            if (address(HELPER.getAutoDraw()) != address(0)) {\\r\\n                HELPER.getAutoDraw().addTask(taskId, block.timestamp + HELPER.getDrawDelay());\\r\\n            }\\r\\n\\r\\n            // cancel the auto close queue if seller open directly\\r\\n             if (msg.sender == tasks[taskId].seller && address(HELPER.getAutoClose()) != address(0)) {\\r\\n                HELPER.getAutoClose().removeTask(taskId);\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            // Task Fail & Expired\\r\\n            // update task\\r\\n            tasks[taskId].status = TaskStatus.Fail; \\r\\n\\r\\n            // NFTs back to seller            \\r\\n            _withdrawNFTs(taskId, payable(tasks[taskId].seller), false, _param);                            \\r\\n        }\\r\\n\\r\\n        emit CloseTask(taskId, msg.sender, tasks[taskId].status);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice start to picker a winner via chainlink VRF\\r\\n    */\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable override isExists(taskId) nonReentrant\\r\\n    {                \\r\\n        require(tasks[taskId].status == TaskStatus.Close, \\\"Not Close\\\");\\r\\n        require(block.timestamp >= infos[taskId].closeTime + HELPER.getDrawDelay(), \\\"Delay limit\\\");\\r\\n         \\r\\n        uint32 finalNumber = HELPER.getVRF().viewRandomResult(taskId);\\r\\n        require(finalNumber > 0, \\\"Not Drawn\\\");\\r\\n        require(finalNumber <= infos[taskId].lastTID, \\\"Invalid finalNumber\\\");\\r\\n        \\r\\n        Ticket memory ticket = _findWinnerTicket(taskId, finalNumber);    \\r\\n        require(ticket.number > 0, \\\"Can't find winner\\\");\\r\\n        \\r\\n        // update store item\\r\\n        tasks[taskId].status = TaskStatus.Success;    \\r\\n        infos[taskId].finalNumber = ticket.number;          \\r\\n        \\r\\n        // withdraw NFTs to winner (maybe cross chain)         \\r\\n        _withdrawNFTs(taskId, payable(ticket.owner), true, _param);\\r\\n\\r\\n        // dispatch Payment\\r\\n        _transferPayment(taskId, ticket.owner);    \\r\\n        \\r\\n        emit PickWinner(taskId, ticket.owner, finalNumber);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim tokens back \\r\\n    */\\r\\n    function claimTokens(uint256[] memory taskIds) override external nonReentrant\\r\\n    {\\r\\n        for (uint256 i = 0; i < taskIds.length; i++) {\\r\\n            _claimToken(taskIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim NFTs back (cross-chain case)\\r\\n    */\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) override external payable nonReentrant\\r\\n    {  \\r\\n        for (uint256 i = 0; i < taskIds.length; i++) {\\r\\n            _claimNFTs(taskIds[i], _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Remote(destination) functions ============\\r\\n    \\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) override external onlyBridge {\\r\\n\\r\\n        if (functionType == 1) { //TYPE_CREATE_TASK\\r\\n            (\\r\\n                ,\\r\\n                TaskItem memory item,\\r\\n                TaskExt memory ext\\r\\n            ) = abi.decode(_payload, (uint256, TaskItem, TaskExt));\\r\\n\\r\\n             _createTask(item, ext);\\r\\n                    \\r\\n        } else if (functionType == 2) { //TYPE_WITHDRAW_NFT\\r\\n\\r\\n            (, address user, uint256 depositId) = abi.decode(_payload, (uint8, address, uint256));            \\r\\n            \\r\\n            PROXY_NFT.withdraw(depositId, user); \\r\\n        }\\r\\n    }    \\r\\n\\r\\n    // ============ Internal functions ============\\r\\n\\r\\n    /**\\r\\n    @notice seller create a crowdluck task\\r\\n    returns: new taskId\\r\\n     */\\r\\n    function _createTask(TaskItem memory item, TaskExt memory ext) internal \\r\\n    {        \\r\\n        require(isAllowTask, \\\"Chain not allow task\\\");\\r\\n        HELPER.checkNewTaskRemote(item);\\r\\n\\r\\n        //create TaskId\\r\\n        currentId ++;\\r\\n        uint256 taskId = currentId;        \\r\\n\\r\\n        // start now\\r\\n        if (item.status == TaskStatus.Open) {\\r\\n            item.startTime = item.startTime < block.timestamp ? item.startTime : block.timestamp;\\r\\n        } else {\\r\\n            require(block.timestamp <= item.startTime && item.startTime < item.endTime, \\\"Invalid time range\\\");\\r\\n            // start in future\\r\\n            item.status = TaskStatus.Pending;\\r\\n        }\\r\\n\\r\\n        //store taskItem\\r\\n        tasks[taskId] = item;\\r\\n\\r\\n        emit CreateTask(taskId, item, ext);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice join task succes. create tickets for buyer\\r\\n     * @param taskId task id\\r\\n     * @param num how many ticket\\r\\n     * @param buyer buery\\r\\n     */\\r\\n    function _createTickets(uint256 taskId, uint32 num, address buyer) internal returns (uint256) \\r\\n    {\\r\\n        uint256 start = infos[taskId].lastTID.add(1);\\r\\n        uint256 lastTKID = start.add(num).sub(1);\\r\\n\\r\\n        tickets[taskId][lastTKID] = Ticket(lastTKID, num, buyer);\\r\\n        ticketIds[taskId].push(lastTKID);\\r\\n\\r\\n        userTickets[buyer][taskId] += num;\\r\\n        infos[taskId].lastTID = lastTKID;\\r\\n\\r\\n        emit CreateTickets(taskId, buyer, num, start, lastTKID);\\r\\n        return lastTKID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice search a winner ticket by number\\r\\n     * @param taskId task id\\r\\n     * @param number final number\\r\\n     */\\r\\n    function _findWinnerTicket(uint256 taskId, uint32 number) internal view returns (Ticket memory)\\r\\n    {\\r\\n        // find by ticketId\\r\\n        Ticket memory ticket = tickets[taskId][number];\\r\\n\\r\\n        if (ticket.number == 0) {\\r\\n\\r\\n            uint256 idx = ticketIds[taskId].findUpperBound(number);\\r\\n            uint256 lastTID = ticketIds[taskId][idx];\\r\\n            ticket = tickets[taskId][lastTID];\\r\\n        }\\r\\n\\r\\n        return ticket;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice when taskItem Fail, user can claim token back  \\r\\n    */\\r\\n    function _claimToken(uint256 taskId) internal isExists(taskId)\\r\\n    {\\r\\n        TaskItem memory item = tasks[taskId];\\r\\n        require(isFail(taskId), \\\"Not Fail\\\");\\r\\n        require(userClaimeds[msg.sender][taskId] == 0, \\\"Claimed\\\");\\r\\n\\r\\n        // Calculate the funds buyer payed\\r\\n        uint256 amount = item.price.mul(userTickets[msg.sender][taskId]);\\r\\n        \\r\\n        // update claim info\\r\\n        userClaimeds[msg.sender][taskId] = amount;\\r\\n        \\r\\n        // Transfer\\r\\n        _transferOut(item.acceptToken, msg.sender, amount);\\r\\n\\r\\n        emit ClaimToken(taskId, msg.sender, amount, item.acceptToken);\\r\\n    }\\r\\n\\r\\n    function _claimNFTs(uint256 taskId, lzTxObj memory _param) internal isExists(taskId)\\r\\n    {\\r\\n        address seller = tasks[taskId].seller;\\r\\n        require(isFail(taskId), \\\"Not Fail\\\");\\r\\n        require(userClaimeds[seller][taskId] == 0, \\\"Claimed\\\");\\r\\n        \\r\\n        // update claim info\\r\\n        userClaimeds[seller][taskId] = 1;\\r\\n        \\r\\n        // withdraw NFTs to winner (maybe cross chain)     \\r\\n        _withdrawNFTs(taskId, payable(seller), true, _param);\\r\\n\\r\\n        emit ClaimNFT(taskId, seller, tasks[taskId].nftContract, tasks[taskId].tokenIds);\\r\\n    }\\r\\n\\r\\n    function _withdrawNFTs(uint256 taskId, address payable user, bool enableCrossChain, lzTxObj memory _param) internal\\r\\n    {\\r\\n        if (lzChainId == tasks[taskId].nftChainId) { // same chain\\r\\n            PROXY_NFT.withdraw(tasks[taskId].depositId, user);\\r\\n        }\\r\\n        else if (enableCrossChain){ // cross chain            \\r\\n            BRIDGE.sendWithdrawNFTs{value: msg.value}(tasks[taskId].nftChainId, user, tasks[taskId].depositId, _param);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice transfer protocol fee and funds\\r\\n     * @param taskId taskId\\r\\n     * @param winner winner address\\r\\n     * paymentStrategy for winner share is up to 50% (500 = 5%, 5,000 = 50%)\\r\\n     */\\r\\n    function _transferPayment(uint256 taskId, address winner) internal\\r\\n    {\\r\\n        // inner variables\\r\\n        address acceptToken = tasks[taskId].acceptToken;\\r\\n\\r\\n        // Calculate amount to seller\\r\\n        uint256 collected = tasks[taskId].amountCollected;\\r\\n        uint256 sellerAmount = collected;\\r\\n\\r\\n        // 1. Calculate protocol fee\\r\\n        uint256 fee = (collected.mul(HELPER.getProtocolFee())).div(10000);\\r\\n        address feeRecipient = HELPER.getProtocolFeeRecipient();\\r\\n        require(fee >= 0, \\\"Invalid fee\\\");\\r\\n        sellerAmount = sellerAmount.sub(fee);\\r\\n\\r\\n        // 2. Calculate winner share amount with payment stragey (up to 50%)\\r\\n        uint256 winnerAmount = 0;\\r\\n        uint256 winnerShare = 0;\\r\\n        uint256[] memory splitShare;\\r\\n        address[] memory splitAddr;\\r\\n        if (tasks[taskId].paymentStrategy > 0) {\\r\\n            (winnerShare, splitShare, splitAddr) = HELPER.getSTRATEGY().viewPaymentShares(tasks[taskId].paymentStrategy, winner, taskId);\\r\\n            require(winnerShare >= 0 && winnerShare <= 5000, \\\"Invalid strategy\\\");\\r\\n            require(splitShare.length <= 10, \\\"Invalid splitShare\\\"); // up to 10 splitter\\r\\n            if (winnerShare > 0) {\\r\\n                winnerAmount = (collected.mul(winnerShare)).div(10000);\\r\\n                sellerAmount = sellerAmount.sub(winnerAmount);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // 3. transfer funds\\r\\n\\r\\n        // transfer funds to seller\\r\\n        _transferOut(acceptToken, tasks[taskId].seller, sellerAmount);\\r\\n\\r\\n        // transfer protocol fee\\r\\n        _transferOut(acceptToken, feeRecipient, fee);\\r\\n\\r\\n        // transfer winner share\\r\\n        if (winnerAmount > 0) {\\r\\n            if (splitShare.length > 0 && splitShare.length == splitAddr.length) {  \\r\\n                // split winner share for strategy case\\r\\n                uint256 splited = 10000;                \\r\\n                for (uint i=0; i < splitShare.length; i++) {   \\r\\n                    // make sure spliter cannot overflow\\r\\n                    if ((splited.sub(splitShare[i])) >=0 && splitShare[i] > 0) { \\r\\n                        _transferOut(acceptToken, splitAddr[i], (winnerAmount.mul(splitShare[i]).div(10000)));\\r\\n                        splited = splited.div(splitShare[i]);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            else {                \\r\\n                _transferOut(acceptToken, winner, winnerAmount);\\r\\n            }\\r\\n        }                         \\r\\n    }\\r\\n\\r\\n    function _transferOut(address token, address to, uint256 amount) internal {        \\r\\n        PROXY_TOKEN.withdraw(to, token, amount);\\r\\n    }\\r\\n\\r\\n    //  ============ onlyOwner  functions  ============\\r\\n\\r\\n    function setAllowTask(bool enable) external onlyOwner {\\r\\n        isAllowTask = enable;\\r\\n    }\\r\\n\\r\\n    function setLucksHelper(ILucksHelper addr) external onlyOwner {\\r\\n        HELPER = addr;\\r\\n    }\\r\\n\\r\\n    function setBridgeAndProxy(ILucksBridge _bridge, IProxyTokenStation _token, IProxyNFTStation _nft) external onlyOwner {\\r\\n\\r\\n        require(address(_bridge) != address(0x0), \\\"Invalid bridge\\\");\\r\\n        if (isAllowTask) {\\r\\n            require(address(_token) != address(0x0), \\\"Invalid token\\\");\\r\\n        }\\r\\n        require(address(_nft) != address(0x0), \\\"Invalid nft\\\");\\r\\n\\r\\n        BRIDGE = _bridge;\\r\\n        PROXY_TOKEN = _token;\\r\\n        PROXY_NFT = _nft;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6a2cfcfe65c39b8f56ff951d415aee8bdfeb7b936e69d78b526a7e101e87fdbd\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksAuto.sol\":{\"content\":\"  // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct Task {\\r\\n    uint256 endTime;\\r\\n    uint256 lastTimestamp;\\r\\n}\\r\\n\\r\\ninterface ILucksAuto {\\r\\n\\r\\n    event FundsAdded(uint256 amountAdded, uint256 newBalance, address sender);\\r\\n    event FundsWithdrawn(uint256 amountWithdrawn, address payee);\\r\\n\\r\\n    event KeeperRegistryAddressUpdated(address oldAddress, address newAddress);\\r\\n    event MinWaitPeriodUpdated(uint256 oldMinWaitPeriod, uint256 newMinWaitPeriod);\\r\\n\\r\\n    event RevertInvoke(uint256 taskId, bytes reason);\\r\\n\\r\\n    function addTask(uint256 taskId, uint endTime) external;\\r\\n    function removeTask(uint256 taskId) external;\\r\\n    function getQueueTasks() external view returns (uint256[] memory);\\r\\n\\r\\n}\",\"keccak256\":\"0xac2ced661bf25c3c6f56c924fe63ff2b342aa08d1f077e6e8873df73596a855e\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenLuck\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\n\\r\\nstruct lzTxObj {\\r\\n    uint256 dstGasForCall;\\r\\n    uint256 dstNativeAmount;\\r\\n    bytes dstNativeAddr;\\r\\n    bytes zroPaymentAddr; //  the address of the ZRO token holder who would pay for the transaction\\r\\n}\\r\\n\\r\\ninterface ILucksBridge {\\r\\n    // ============= events ====================\\r\\n    event SendMsg(uint8 msgType, uint64 nonce);\\r\\n\\r\\n    // ============= Task functions ====================\\r\\n\\r\\n    function sendCreateTask(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    function sendWithdrawNFTs(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external payable;\\r\\n\\r\\n    // ============= Assets functions ====================\\r\\n\\r\\n    function quoteLayerZeroFee(\\r\\n        uint16 _dstChainId,\\r\\n        uint8 _functionType,\\r\\n        string memory _note,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateCreateTaskFee(\\r\\n        uint16 _dstChainId,\\r\\n        TaskItem memory item,\\r\\n        TaskExt memory ext,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    function estimateWithdrawNFTsFee(\\r\\n        uint16 _dstChainId,\\r\\n        address payable _user,\\r\\n        uint256 depositId,\\r\\n        lzTxObj memory _lzTxParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n}\\r\\n\",\"keccak256\":\"0xeba9f5dfb8e3e81f546689fae3b00e24cee2fc65c8c341a16f4ddac1f47c147e\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { lzTxObj } from \\\"./ILucksBridge.sol\\\";\\r\\n\\r\\n/** \\r\\n    TaskStatus\\r\\n    0) Pending: task created but not reach starttime\\r\\n    1) Open: task opening\\r\\n    2) Close: task close, waiting for draw\\r\\n    3) Success: task reach target, drawed winner\\r\\n    4) Fail: task Fail and expired\\r\\n    5) Cancel: task user cancel\\r\\n */\\r\\nenum TaskStatus {\\r\\n    Pending,\\r\\n    Open,\\r\\n    Close,\\r\\n    Success,\\r\\n    Fail,\\r\\n    Cancel\\r\\n}\\r\\n\\r\\nstruct ExclusiveToken {\\r\\n    address token; // exclusive token contract address    \\r\\n    uint256 amount; // exclusive token holding amount required\\r\\n}\\r\\n\\r\\nstruct TaskItem {\\r\\n\\r\\n    address seller; // Owner of the NFTs\\r\\n    uint16 nftChainId; // NFT source ChainId    \\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] tokenAmounts; // support ERC1155\\r\\n    \\r\\n    address acceptToken; // acceptToken    \\r\\n    TaskStatus status; // Task status    \\r\\n\\r\\n    uint256 startTime; // Task start time    \\r\\n    uint256 endTime; // Task end time\\r\\n    \\r\\n    uint256 targetAmount; // Task target crowd amount (in wei) for the published item    \\r\\n    uint256 price; // Per ticket price  (in wei)    \\r\\n    \\r\\n    uint16 paymentStrategy; // payment strategy;\\r\\n    ExclusiveToken exclusiveToken; // exclusive token contract address    \\r\\n    \\r\\n    // editable fields\\r\\n    uint256 amountCollected; // The amount (in wei) collected of this task\\r\\n    uint256 depositId; // NFTs depositId (system set)\\r\\n}\\r\\n\\r\\nstruct TaskExt {\\r\\n    uint16 chainId; // Task Running ChainId   \\r\\n    string title; // title (for searching keywords)  \\r\\n    string note;   // memo\\r\\n}\\r\\n\\r\\nstruct Ticket {\\r\\n    uint256 number;  // the ticket's id, equal to the end number (last ticket id)\\r\\n    uint32 count;   // how many QTY the ticket joins, (number-count+1) equal to the start number of this ticket.\\r\\n    address owner;  // ticket owner\\r\\n}\\r\\n\\r\\nstruct TaskInfo {\\r\\n    uint256 lastTID;\\r\\n    uint256 closeTime;\\r\\n    uint256 finalNumber;\\r\\n}\\r\\n\\r\\ninterface ILucksExecutor {\\r\\n\\r\\n    // ============= events ====================\\r\\n\\r\\n    event CreateTask(uint256 taskId, TaskItem item, TaskExt ext);\\r\\n    event CancelTask(uint256 taskId, address seller);\\r\\n    event CloseTask(uint256 taskId, address caller, TaskStatus status);\\r\\n    event JoinTask(uint256 taskId, address buyer, uint256 amount, uint256 count, uint256 number,string note);\\r\\n    event PickWinner(uint256 taskId, address winner, uint256 number);\\r\\n    event ClaimToken(uint256 taskId, address caller, uint256 amount, address acceptToken);\\r\\n    event ClaimNFT(uint256 taskId, address seller, address nftContract, uint256[] tokenIds);\\r\\n    \\r\\n    event CreateTickets(uint256 taskId, address buyer, uint256 num, uint256 start, uint256 end);\\r\\n\\r\\n    // ============= functions ====================\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n    function exists(uint256 taskId) external view returns (bool);\\r\\n    function getTask(uint256 taskId) external view returns (TaskItem memory);\\r\\n    function getInfo(uint256 taskId) external view returns (TaskInfo memory);\\r\\n    function isFail(uint256 taskId) external view returns(bool);\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    function createTask(TaskItem memory item, TaskExt memory ext, lzTxObj memory _param) external payable;\\r\\n    function joinTask(uint256 taskId, uint32 num, string memory note) external payable;\\r\\n    function cancelTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function closeTask(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n    function pickWinner(uint256 taskId, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function claimTokens(uint256[] memory taskIds) external;\\r\\n    function claimNFTs(uint256[] memory taskIds, lzTxObj memory _param) external payable;\\r\\n\\r\\n    function onLzReceive(uint8 functionType, bytes memory _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdb4e6904f733c5522fcda944a841924e1ac748c1a49809d5455d72636c35438c\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksGroup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {ILucksExecutor, TaskItem, TaskStatus, Ticket} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksHelper} from \\\"./ILucksHelper.sol\\\";\\r\\n\\r\\ninterface ILucksGroup {    \\r\\n\\r\\n    event JoinGroup(address user, uint256 taskId, uint256 groupId);\\r\\n    event CreateGroup(address user, uint256 taskId, uint256 groupId, uint16 seat);     \\r\\n\\r\\n    function getGroupUsers(uint256 taskId, address winner) view external returns (address[] memory);\\r\\n   \\r\\n    function joinGroup(uint256 taskId, uint256 groupId, uint16 seat) external;\\r\\n    function createGroup(uint256 taskId, uint16 seat) external;\\r\\n}\",\"keccak256\":\"0x0f80c646005b1eb282e864517e9effd2f2a54411aec731e73fbd539808d6c38f\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n// Openluck interfaces\\r\\nimport {TaskItem, TaskExt} from \\\"./ILucksExecutor.sol\\\";\\r\\nimport {ILucksVRF} from \\\"./ILucksVRF.sol\\\";\\r\\nimport {ILucksGroup} from \\\"./ILucksGroup.sol\\\";\\r\\nimport {ILucksPaymentStrategy} from \\\"./ILucksPaymentStrategy.sol\\\";\\r\\nimport {ILucksAuto} from \\\"./ILucksAuto.sol\\\";\\r\\n\\r\\ninterface ILucksHelper {\\r\\n\\r\\n    function checkPerJoinLimit(uint32 num) external view returns (bool);\\r\\n    function checkAcceptToken(address acceptToken) external view returns (bool);\\r\\n    function checkNFTContract(address addr) external view returns (bool);\\r\\n    function checkNewTask(address user, TaskItem memory item) external view returns (bool);\\r\\n    function checkNewTaskExt(TaskExt memory ext) external pure returns (bool);\\r\\n    function checkNewTaskRemote(TaskItem memory item) external view returns (bool);\\r\\n    function checkJoinTask(address user, uint256 taskId, uint32 num, string memory note) external view returns (bool);\\r\\n    function checkTokenListing(address addr, address seller, uint256[] memory tokenIds, uint256[] memory amounts) external view returns (bool,string memory);    \\r\\n    function checkExclusive(address account, address token, uint256 amount) external view returns (bool);\\r\\n\\r\\n    function getProtocolFeeRecipient() external view returns (address);\\r\\n    function getProtocolFee() external view returns (uint256);\\r\\n    function getMinTargetLimit(address token) external view returns (uint256);\\r\\n    function getDrawDelay() external view returns (uint32);\\r\\n\\r\\n    function getVRF() external view returns (ILucksVRF);\\r\\n    function getGROUPS() external view returns (ILucksGroup);\\r\\n    // function getREWARDS() external view returns (ILucksRewards);\\r\\n    function getSTRATEGY() external view returns (ILucksPaymentStrategy);\\r\\n    function getAutoClose() external view returns (ILucksAuto);\\r\\n    function getAutoDraw() external view returns (ILucksAuto);\\r\\n}\\r\\n\",\"keccak256\":\"0x63a0408bc27abb14b326faf40dd9156c855c71a954d950de1a707efeebc51c31\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksPaymentStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface ILucksPaymentStrategy {\\r\\n    \\r\\n    function getShareRate(uint16 strategyId) external pure returns (uint32);\\r\\n    function viewPaymentShares(uint16 strategyId, address winner,uint256 taskId) external view returns (uint256, uint256[] memory, address[] memory);\\r\\n}\",\"keccak256\":\"0xfb95b42ebb7f656c8373266c15d91659333f1ef508bba71429ea0932fe1dcdad\",\"license\":\"MIT\"},\"contracts/interfaces/ILucksVRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILucksVRF {\\r\\n\\r\\n    event ReqRandomNumber(uint256 taskId, uint256 max, uint256 requestId);\\r\\n    event RspRandomNumber(uint256 taskId, uint256 requestId, uint256 randomness, uint32 number);    \\r\\n\\r\\n    /**\\r\\n     * Requests randomness from a user-provided max\\r\\n     */\\r\\n    function reqRandomNumber(uint256 taskId, uint256 max) external;\\r\\n\\r\\n    /**\\r\\n     * Views random result\\r\\n     */\\r\\n    function viewRandomResult(uint256 taskId) external view returns (uint32);\\r\\n}\",\"keccak256\":\"0x8039f261810e00db42828632a5deba8a11613357d9c63b33c5d342abb6d6da0e\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyNFTStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct DepositNFT {\\r\\n    address user; // deposit user\\r\\n    address nftContract; // NFT registry address    \\r\\n    uint256[] tokenIds; // Allow mulit nfts for sell    \\r\\n    uint256[] amounts; // support ERC1155\\r\\n    uint256 endTime; // Task end time\\r\\n}\\r\\n\\r\\ninterface IProxyNFTStation {\\r\\n\\r\\n    event Deposit(address indexed executor, uint256 depositId, address indexed user, address nft, uint256[] tokenIds, uint256[] amounts, uint256 endTime);\\r\\n    event Withdraw(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n    event Redeem(address indexed executor, uint256 depositId, address indexed to, address nft, uint256[] tokenIds, uint256[] amounts);\\r\\n\\r\\n    function deposit(address user, address nft, uint256[] memory tokenIds, uint256[] memory amounts, uint256 endTime) external payable returns (uint256 depositId);    \\r\\n    function withdraw(uint256 depositId, address to) external;    \\r\\n    function redeem(address executor, uint256 depositId, address to) external;    \\r\\n}\",\"keccak256\":\"0xf53f10b95aa5695c4cffb04a683b9bff3d8ab75a932ea5fefaa10e1d058df338\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyTokenStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IProxyTokenStation {\\r\\n\\r\\n    event Deposit(address indexed executor, address indexed user, address token, uint256 amount);\\r\\n    event Withdraw(address indexed executor, address indexed user, address token, uint256 amount);\\r\\n\\r\\n    function deposit(address user, address token, uint256 amount) external payable;\\r\\n    function withdraw(address user, address token, uint256 amount) external;\\r\\n}\",\"keccak256\":\"0x8ca2d99bb6397fa134b01980e69239fb7560b9d6e9dcfbcfa8b29e3d45016b32\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101fe5760003560e01c80638da5cb5b1161011d578063d4ab5489116100b0578063ee9a31a21161007f578063f2fde38b11610064578063f2fde38b146107a8578063f551bf20146107c8578063f72e7d5a146107f557600080fd5b8063ee9a31a214610768578063ef2d23761461079557600080fd5b8063d4ab5489146106ff578063e00dd1611461071f578063e44cb8e414610735578063e47af09a1461075557600080fd5b8063b6554a8d116100ec578063b6554a8d14610674578063bcd4f92014610694578063bd6516fe146106b4578063cf260baf146106c757600080fd5b80638da5cb5b14610567578063917c4156146105925780639b9e97b8146105c6578063a374e43f146105d957600080fd5b806365690f211161019557806373ce31431161016457806373ce314314610428578063774be5b31461043b57806378df3a521461045b5780638d9776721461047b57600080fd5b806365690f21146103765780636a695360146103ae5780636c5186f914610400578063715018a61461041357600080fd5b80632b32177f116101d15780632b32177f146102b05780632d08265a146102f25780633408e470146103145780634f558e791461035657600080fd5b806306661abd146102035780630708cfdd1461022b5780631a3cd59a146102415780631d65e77e14610283575b600080fd5b34801561020f57600080fd5b50610218610822565b6040519081526020015b60405180910390f35b34801561023757600080fd5b5061021860025481565b34801561024d57600080fd5b5061026161025c36600461517c565b610839565b6040805182518152602080840151908201529181015190820152606001610222565b34801561028f57600080fd5b506102a361029e36600461517c565b610896565b604051610222919061598c565b3480156102bc57600080fd5b506007546102e29074010000000000000000000000000000000000000000900460ff1681565b6040519015158152602001610222565b3480156102fe57600080fd5b5061031261030d366004614ec3565b610aa6565b005b34801561032057600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b60405161ffff9091168152602001610222565b34801561036257600080fd5b506102e261037136600461517c565b610b66565b34801561038257600080fd5b50610218610391366004614e97565b600d60209081526000928352604080842090915290825290205481565b3480156103ba57600080fd5b506005546103db9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610222565b61031261040e366004614fe1565b610b81565b34801561041f57600080fd5b50610312611065565b610312610436366004615455565b6110f2565b34801561044757600080fd5b50610312610456366004614f96565b611677565b34801561046757600080fd5b50610218610476366004615433565b6118f6565b34801561048757600080fd5b5061054e61049636600461517c565b6008602081815260009283526040928390208054600182015460048301546005840154600685015460078601549786015460098701548a51808c01909b52600a88015473ffffffffffffffffffffffffffffffffffffffff9081168c52600b890154998c0199909952600c880154600d909801548988169b740100000000000000000000000000000000000000009889900461ffff9081169c988c169b88169a9990970460ff1698959794969495939490921692908d565b6040516102229d9c9b9a9998979695949392919061587a565b34801561057357600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166103db565b34801561059e57600080fd5b506103437f000000000000000000000000000000000000000000000000000000000000000081565b6103126105d43660046153f6565b611927565b3480156105e557600080fd5b5061063e6105f4366004615433565b60096020908152600092835260408084209091529082529020805460019091015463ffffffff811690640100000000900473ffffffffffffffffffffffffffffffffffffffff1683565b6040805193845263ffffffff909216602084015273ffffffffffffffffffffffffffffffffffffffff1690820152606001610222565b34801561068057600080fd5b506102e261068f36600461517c565b611c54565b3480156106a057600080fd5b506103126106af366004614e5d565b611cd6565b6103126106c2366004614ef8565b611d9e565b3480156106d357600080fd5b506102186106e2366004614e97565b600c60209081526000928352604080842090915290825290205481565b34801561070b57600080fd5b5061031261071a366004614f5c565b611e5b565b34801561072b57600080fd5b5061021860035481565b34801561074157600080fd5b50610312610750366004615504565b611f26565b6103126107633660046153f6565b61209b565b34801561077457600080fd5b506007546103db9073ffffffffffffffffffffffffffffffffffffffff1681565b6103126107a33660046153f6565b6126cc565b3480156107b457600080fd5b506103126107c3366004614e5d565b613033565b3480156107d457600080fd5b506004546103db9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561080157600080fd5b506006546103db9073ffffffffffffffffffffffffffffffffffffffff1681565b60006002546003546108349190615d25565b905090565b61085d60405180606001604052806000815260200160008152602001600081525090565b506000908152600b6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b61089e614990565b60008281526008602090815260409182902082516101e081018452815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910461ffff168285015260018301541681850152600282018054855181860281018601909652808652919492936060860193929083018282801561094f57602002820191906000526020600020905b81548152602001906001019080831161093b575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156109a757602002820191906000526020600020905b815481526020019060010190808311610993575b5050509183525050600482015473ffffffffffffffffffffffffffffffffffffffff8116602083015260409091019074010000000000000000000000000000000000000000900460ff166005811115610a0257610a02615dd0565b6005811115610a1357610a13615dd0565b8152600582015460208083019190915260068301546040808401919091526007840154606084015260088401546080840152600984015461ffff1660a08401528051808201909152600a84015473ffffffffffffffffffffffffffffffffffffffff168152600b8401549181019190915260c0820152600c82015460e0820152600d909101546101009091015292915050565b60026000541415610b18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260009081555b8151811015610b5d57610b4b828281518110610b3e57610b3e615dff565b6020026020010151613163565b80610b5581615d68565b915050610b20565b50506001600055565b600060025482118015610b7b57506003548211155b92915050565b60026000541415610bee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b0f565b600260005560208301517f000000000000000000000000000000000000000000000000000000000000000061ffff908116911614610c88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c696420636861696e496400000000000000000000000000000000006044820152606401610b0f565b60055473ffffffffffffffffffffffffffffffffffffffff16610d07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f50726f78794e465420756e7365740000000000000000000000000000000000006044820152606401610b0f565b600480546040517f1750518c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911691631750518c91610d5e91339188910161584b565b60206040518083038186803b158015610d7657600080fd5b505afa158015610d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dae9190614f79565b50600480546040517f0990a98200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911691630990a98291610e0491869101615979565b60206040518083038186803b158015610e1c57600080fd5b505afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e549190614f79565b506005546040808501516060860151608087015161010088015193517f443cf78700000000000000000000000000000000000000000000000000000000815260009573ffffffffffffffffffffffffffffffffffffffff169463443cf78794610ec694339491939092906004016157ed565b602060405180830381600087803b158015610ee057600080fd5b505af1158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f189190615195565b6101c085018190526020850151845191925061ffff91821691161415610f4757610f42848461358b565b61105a565b60075473ffffffffffffffffffffffffffffffffffffffff16610fc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f42726964676520756e73657400000000000000000000000000000000000000006044820152606401610b0f565b60075483516040517f107f6e2800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163107f6e28913491611027919033908a908a908a9060040161599f565b6000604051808303818588803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b50505050505b505060016000555050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b0f565b6110f06000613a2f565b565b826110fc81610b66565b611162576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610b0f565b600260005414156111cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b0f565b6002600055600480546040517fe7e46def00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169163e7e46def9161122f9133918991899189910161592e565b60206040518083038186803b15801561124757600080fd5b505afa15801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127f9190614f79565b506000848152600860208190526040822001546112a59063ffffffff80871690613aa616565b6006546000878152600860205260409081902060049081015491517f8340f549000000000000000000000000000000000000000000000000000000008152339181019190915273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481018490529293501690638340f5499034906064016000604051808303818588803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b5050505050600061135e868633613ab9565b90506000808781526008602052604090206004015474010000000000000000000000000000000000000000900460ff16600581111561139f5761139f615dd0565b14156113f457600086815260086020526040902060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555b6000868152600860205260409020600c01546114109083613cfa565b6000878152600860205260409020600c810182905560070154116116295760048054604080517f23961975000000000000000000000000000000000000000000000000000000008152905160009373ffffffffffffffffffffffffffffffffffffffff90931692632396197592808201926020929091829003018186803b15801561149a57600080fd5b505afa1580156114ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d29190614e7a565b73ffffffffffffffffffffffffffffffffffffffff16146116295760048054604080517f23961975000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926323961975928282019260209290829003018186803b15801561155557600080fd5b505afa158015611569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158d9190614e7a565b600087815260086020526040908190206006015490517eb34ebd00000000000000000000000000000000000000000000000000000000815260048101899052602481019190915273ffffffffffffffffffffffffffffffffffffffff919091169062b34ebd90604401600060405180830381600087803b15801561161057600080fd5b505af1158015611624573d6000803e3d6000fd5b505050505b7f9373a88f901e30620a827b89bb774b9d50dedad527a9878c5261b450f67d419786338488858960405161166296959493929190615af4565b60405180910390a15050600160005550505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146116f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b0f565b73ffffffffffffffffffffffffffffffffffffffff8316611775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206272696467650000000000000000000000000000000000006044820152606401610b0f565b60075474010000000000000000000000000000000000000000900460ff16156118155773ffffffffffffffffffffffffffffffffffffffff8216611815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420746f6b656e000000000000000000000000000000000000006044820152606401610b0f565b73ffffffffffffffffffffffffffffffffffffffff8116611892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c6964206e66740000000000000000000000000000000000000000006044820152606401610b0f565b6007805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600680549385169382169390931790925560058054919093169116179055565b600a602052816000526040600020818154811061191257600080fd5b90600052602060002001600091509150505481565b8161193181610b66565b611997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610b0f565b60026000541415611a04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b0f565b6002600090815560008481526008602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611a4957611a49615dd0565b1480611a925750600160008481526008602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611a9057611a90615dd0565b145b8015611aaa57506000838152600b6020526040902054155b611b10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f70656e696e67206f722063616e63656c6564000000000000000000000000006044820152606401610b0f565b60008381526008602052604090205473ffffffffffffffffffffffffffffffffffffffff163314611b9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c6964206175746800000000000000000000000000000000000000006044820152606401610b0f565b60008381526008602052604090206004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017905554611c1190849073ffffffffffffffffffffffffffffffffffffffff16600185613d06565b604080518481523360208201527f9496d40f6a4059d9530f6361a578a4df0bfaeddcc0d913de433fd6caab89130391015b60405180910390a15050600160005550565b6000600460008381526008602052604090206004015474010000000000000000000000000000000000000000900460ff166005811115611c9657611c96615dd0565b1480610b7b575060008281526008602052604090206007810154600c90910154108015610b7b575050600090815260086020526040902060060154421190565b60015473ffffffffffffffffffffffffffffffffffffffff163314611d57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b0f565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60026000541415611e0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b0f565b600260009081555b8251811015611e5157611e3f838281518110611e3157611e31615dff565b602002602001015183613ecc565b80611e4981615d68565b915050611e13565b5050600160005550565b60015473ffffffffffffffffffffffffffffffffffffffff163314611edc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b0f565b6007805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60075473ffffffffffffffffffffffffffffffffffffffff163314611fa7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79427269646765000000000000000000000000000000000000000000006044820152606401610b0f565b8160ff1660011415611fdf5760008082806020019051810190611fca9190615281565b9250925050611fd9828261358b565b50505050565b8160ff1660021415612097576000808280602001905181019061200291906154c1565b6005546040517ef714ce0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff808516602483015293965091945091909116915062f714ce90604401600060405180830381600087803b15801561207c57600080fd5b505af1158015612090573d6000803e3d6000fd5b5050505050505b5050565b816120a581610b66565b61210b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610b0f565b60026000541415612178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b0f565b6002600081905560008481526008602052604090206004015474010000000000000000000000000000000000000000900460ff1660058111156121bd576121bd615dd0565b14612224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7420436c6f736500000000000000000000000000000000000000000000006044820152606401610b0f565b60048054604080517f19af3253000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926319af3253928282019260209290829003018186803b15801561228c57600080fd5b505afa1580156122a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c491906154a4565b6000848152600b60205260409020600101546122e69163ffffffff1690615c95565b42101561234f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f44656c6179206c696d69740000000000000000000000000000000000000000006044820152606401610b0f565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663edd3159d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156123b957600080fd5b505afa1580156123cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f19190614e7a565b73ffffffffffffffffffffffffffffffffffffffff1663463fb8c6856040518263ffffffff1660e01b815260040161242b91815260200190565b60206040518083038186803b15801561244357600080fd5b505afa158015612457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247b91906154a4565b905060008163ffffffff16116124ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f7420447261776e00000000000000000000000000000000000000000000006044820152606401610b0f565b6000848152600b602052604090205463ffffffff8216111561256b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e76616c69642066696e616c4e756d626572000000000000000000000000006044820152606401610b0f565b6000612577858361410d565b80519091506125e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f43616e27742066696e642077696e6e65720000000000000000000000000000006044820152606401610b0f565b600085815260086020908152604080832060040180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740300000000000000000000000000000000000000001790558351600b9092529182902060020155810151612653908690600187613d06565b61266185826040015161424d565b604081810151815187815273ffffffffffffffffffffffffffffffffffffffff909116602082015263ffffffff84168183015290517f3f3025585478f6771e5973f8ff9aa514d8592d3648a98da300f46bb7e1cc05169181900360600190a150506001600055505050565b816126d681610b66565b61273c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610b0f565b600260005414156127a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b0f565b6002600055600160008481526008602052604090206004015474010000000000000000000000000000000000000000900460ff1660058111156127ee576127ee615dd0565b14612855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74204f70656e0000000000000000000000000000000000000000000000006044820152606401610b0f565b60008381526008602052604090206007810154600c9091015410158061288b575060008381526008602052604090206006015442115b6128f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e6f7420726561636820746172676574206f72206e6f742065787069726564006044820152606401610b0f565b6000838152600b6020908152604080832042600190910155600890915290206007810154600c9091015410612f5e5760008381526008602052604090206004018054600291907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000083021790555060048054604080517fedd3159d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263edd3159d928282019260209290829003018186803b1580156129dd57600080fd5b505afa1580156129f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a159190614e7a565b6000848152600b6020526040908190205490517f19c0198900000000000000000000000000000000000000000000000000000000815260048101869052602481019190915273ffffffffffffffffffffffffffffffffffffffff91909116906319c0198990604401600060405180830381600087803b158015612a9757600080fd5b505af1158015612aab573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633156a58d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b2f57600080fd5b505afa158015612b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b679190614e7a565b73ffffffffffffffffffffffffffffffffffffffff1614612d5c5760048054604080517f3156a58d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921692633156a58d928282019260209290829003018186803b158015612bea57600080fd5b505afa158015612bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c229190614e7a565b73ffffffffffffffffffffffffffffffffffffffff1662b34ebd84600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319af32536040518163ffffffff1660e01b815260040160206040518083038186803b158015612ca557600080fd5b505afa158015612cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdd91906154a4565b612ced9063ffffffff1642615c95565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401600060405180830381600087803b158015612d4357600080fd5b505af1158015612d57573d6000803e3d6000fd5b505050505b60008381526008602052604090205473ffffffffffffffffffffffffffffffffffffffff1633148015612e47575060048054604080517f23961975000000000000000000000000000000000000000000000000000000008152905160009373ffffffffffffffffffffffffffffffffffffffff90931692632396197592808201926020929091829003018186803b158015612df657600080fd5b505afa158015612e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2e9190614e7a565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612f595760048054604080517f23961975000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926323961975928282019260209290829003018186803b158015612eb457600080fd5b505afa158015612ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eec9190614e7a565b73ffffffffffffffffffffffffffffffffffffffff1663c3084117846040518263ffffffff1660e01b8152600401612f2691815260200190565b600060405180830381600087803b158015612f4057600080fd5b505af1158015612f54573d6000803e3d6000fd5b505050505b612fd1565b60008381526008602052604081206004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167404000000000000000000000000000000000000000017905554612fd191859173ffffffffffffffffffffffffffffffffffffffff169085613d06565b600083815260086020526040908190206004015490517f8bd3be2963318bc29de9701e2edec7b2546ea1b285e0d51596a7bc9e6aa7fe3091611c4291869133917401000000000000000000000000000000000000000090910460ff1690615ac4565b60015473ffffffffffffffffffffffffffffffffffffffff1633146130b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b0f565b73ffffffffffffffffffffffffffffffffffffffff8116613157576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b0f565b61316081613a2f565b50565b8061316d81610b66565b6131d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610b0f565b600082815260086020908152604080832081516101e081018352815473ffffffffffffffffffffffffffffffffffffffff80821683527401000000000000000000000000000000000000000090910461ffff16828601526001830154168184015260028201805484518187028101870190955280855291949293606086019390929083018282801561328457602002820191906000526020600020905b815481526020019060010190808311613270575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156132dc57602002820191906000526020600020905b8154815260200190600101908083116132c8575b5050509183525050600482015473ffffffffffffffffffffffffffffffffffffffff8116602083015260409091019074010000000000000000000000000000000000000000900460ff16600581111561333757613337615dd0565b600581111561334857613348615dd0565b8152600582015460208083019190915260068301546040808401919091526007840154606084015260088401546080840152600984015461ffff1660a08401528051808201909152600a84015473ffffffffffffffffffffffffffffffffffffffff168152600b8401549181019190915260c0820152600c82015460e0820152600d909101546101009091015290506133e083611c54565b613446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74204661696c0000000000000000000000000000000000000000000000006044820152606401610b0f565b336000908152600d60209081526040808320868452909152902054156134c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f436c61696d6564000000000000000000000000000000000000000000000000006044820152606401610b0f565b336000908152600c602090815260408083208684529091528120546101408301516134f291613aa6565b336000818152600d60209081526040808320898452909152902082905560a0840151919250613522919083614801565b60a08201516040805186815233602082015290810183905273ffffffffffffffffffffffffffffffffffffffff90911660608201527f8519296219951e1d116256cc20f1ea8c0aa35633f684a8b3bc42e4b6ffa17a5b906080015b60405180910390a150505050565b60075474010000000000000000000000000000000000000000900460ff1661360f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f436861696e206e6f7420616c6c6f77207461736b0000000000000000000000006044820152606401610b0f565b600480546040517fc735fd7400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169163c735fd74916136649186910161598c565b60206040518083038186803b15801561367c57600080fd5b505afa158015613690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b49190614f79565b50600380549060006136c583615d68565b909155505060035460018360c0015160058111156136e5576136e5615dd0565b141561370c57428360e00151106136fc5742613702565b8260e001515b60e0840152613796565b8260e00151421115801561372857508261010001518360e00151105b61378e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642074696d652072616e676500000000000000000000000000006044820152606401610b0f565b600060c08401525b600081815260086020908152604091829020855181548388015161ffff1674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff9283161717825592860151600182018054919094167fffffffffffffffffffffffff000000000000000000000000000000000000000091909116179092556060850151805186939261385d926002850192910190614a3a565b5060808201518051613879916003840191602090910190614a3a565b5060a082015160048201805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117825560c0850151927fffffffffffffffffffffff00000000000000000000000000000000000000000016177401000000000000000000000000000000000000000083600581111561391557613915615dd0565b021790555060e082015160058201556101008201516006820155610120820151600782015561014082015160088201556101608201516009820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff9092169190911790556101808201518051600a830180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560200151600b8201556101a0820151600c8201556101c090910151600d909101556040517f0c51dc45078ee7d51611387251b9b023fb2b4c14ab4bdac08bca2820f8a101ea90613a2290839086908690615b41565b60405180910390a1505050565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000613ab28284615ce8565b9392505050565b6000838152600b60205260408120548190613ad5906001613cfa565b90506000613af76001613af18463ffffffff808a1690613cfa16565b9061489a565b905060405180606001604052808281526020018663ffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152506009600088815260200190815260200160002060008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050600a60008781526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150558463ffffffff16600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000206000828254613c6f9190615c95565b90915550506000868152600b6020908152604091829020839055815188815273ffffffffffffffffffffffffffffffffffffffff87169181019190915263ffffffff871681830152606081018490526080810183905290517fae00b050d09a294dbf7d73b4f1087967802e04b95ba34f770bb22cc1fca4e7429181900360a00190a195945050505050565b6000613ab28284615c95565b6000848152600860205260409020547f000000000000000000000000000000000000000000000000000000000000000061ffff90811674010000000000000000000000000000000000000000909204161415613dff5760055460008581526008602052604090819020600d015490517ef714ce000000000000000000000000000000000000000000000000000000008152600481019190915273ffffffffffffffffffffffffffffffffffffffff85811660248301529091169062f714ce90604401600060405180830381600087803b158015613de257600080fd5b505af1158015613df6573d6000803e3d6000fd5b50505050611fd9565b8115611fd957600754600085815260086020526040908190208054600d9091015491517f31e51b0600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316926331e51b06923492613e94927401000000000000000000000000000000000000000090910461ffff169189918890600401615a0a565b6000604051808303818588803b158015613ead57600080fd5b505af1158015613ec1573d6000803e3d6000fd5b505050505050505050565b81613ed681610b66565b613f3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5461736b206e6f742065786973747300000000000000000000000000000000006044820152606401610b0f565b60008381526008602052604090205473ffffffffffffffffffffffffffffffffffffffff16613f6a84611c54565b613fd0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74204661696c0000000000000000000000000000000000000000000000006044820152606401610b0f565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d6020908152604080832087845290915290205415614068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f436c61696d6564000000000000000000000000000000000000000000000000006044820152606401610b0f565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d6020908152604080832087845290915290206001908190556140ac908590839086613d06565b60008481526008602052604090819020600181015491517f3090bc03795e5c190b39b7112509502697a7212984f74dabf6842a2b48ee1e779261357d928892869273ffffffffffffffffffffffffffffffffffffffff169160020190615a49565b6040805160608101825260008082526020820181905291810191909152600083815260096020908152604080832063ffffffff868116855290835292819020815160608101835281548082526001909201549485169381019390935264010000000090930473ffffffffffffffffffffffffffffffffffffffff169082015290613ab2576000848152600a602052604081206141b29063ffffffff808716906148a616565b6000868152600a6020526040812080549293509091839081106141d7576141d7615dff565b6000918252602080832091909101548883526009825260408084209184529082529182902082516060810184528154815260019091015463ffffffff81169282019290925264010000000090910473ffffffffffffffffffffffffffffffffffffffff1691810191909152925050509392505050565b6000828152600860209081526040808320600480820154600c90920154815484517fa5a41031000000000000000000000000000000000000000000000000000000008152945173ffffffffffffffffffffffffffffffffffffffff948516979296879693956143289561271095614322959092169363a5a410319383830193909290829003018186803b1580156142e357600080fd5b505afa1580156142f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061431b9190615195565b8690613aa6565b90614969565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372c8fc0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561439457600080fd5b505afa1580156143a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143cc9190614e7a565b90506143d8838361489a565b600088815260086020526040812060090154919450908190606090819061ffff161561468a5760048054604080517f93f1c911000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926393f1c911928282019260209290829003018186803b15801561446657600080fd5b505afa15801561447a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061449e9190614e7a565b60008c815260086020526040908190206009015490517f74a0a25100000000000000000000000000000000000000000000000000000000815261ffff909116600482015273ffffffffffffffffffffffffffffffffffffffff8c81166024830152604482018e905291909116906374a0a2519060640160006040518083038186803b15801561452c57600080fd5b505afa158015614540573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261458691908101906151ae565b919450925090506113888311156145f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c6964207374726174656779000000000000000000000000000000006044820152606401610b0f565b600a82511115614665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c69642073706c6974536861726500000000000000000000000000006044820152606401610b0f565b821561468a5761467b6127106143228a86613aa6565b9350614687878561489a565b96505b60008b8152600860205260409020546146bb908a9073ffffffffffffffffffffffffffffffffffffffff1689614801565b6146c6898688614801565b83156147f457600082511180156146de575080518251145b156147e95761271060005b83518110156147e257600061472085838151811061470957614709615dff565b60200260200101518461489a90919063ffffffff16565b101580156147475750600084828151811061473d5761473d615dff565b6020026020010151115b156147d0576147a18b84838151811061476257614762615dff565b602002602001015161479c61271061432289878151811061478557614785615dff565b60200260200101518c613aa690919063ffffffff16565b614801565b6147cd8482815181106147b6576147b6615dff565b60200260200101518361496990919063ffffffff16565b91505b806147da81615d68565b9150506146e9565b50506147f4565b6147f4898b86614801565b5050505050505050505050565b6006546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528581166024830152604482018490529091169063d9caed1290606401600060405180830381600087803b15801561487d57600080fd5b505af1158015614891573d6000803e3d6000fd5b50505050505050565b6000613ab28284615d25565b81546000906148b757506000610b7b565b82546000905b808210156149135760006148d18383614975565b9050848682815481106148e6576148e6615dff565b906000526020600020015411156148ff5780915061490d565b61490a816001615c95565b92505b506148bd565b6000821180156149485750838561492b600185615d25565b8154811061493b5761493b615dff565b9060005260206000200154145b1561496157614958600183615d25565b92505050610b7b565b509050610b7b565b6000613ab28284615cad565b60006149846002848418615cad565b613ab290848416615c95565b604080516101e0810182526000808252602082018190529181018290526060808201819052608082015260a081018290529060c0820190815260200160008152602001600081526020016000815260200160008152602001600061ffff168152602001614a266040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b815260200160008152602001600081525090565b828054828255906000526020600020908101928215614a75579160200282015b82811115614a75578251825591602001919060010190614a5a565b50614a81929150614a85565b5090565b5b80821115614a815760008155600101614a86565b8035614aa581615e5d565b919050565b8051614aa581615e5d565b600082601f830112614ac657600080fd5b81356020614adb614ad683615c2b565b615bdc565b80838252828201915082860187848660051b8901011115614afb57600080fd5b60005b85811015614b1a57813584529284019290840190600101614afe565b5090979650505050505050565b600082601f830112614b3857600080fd5b81516020614b48614ad683615c2b565b80838252828201915082860187848660051b8901011115614b6857600080fd5b60005b85811015614b1a57815184529284019290840190600101614b6b565b600082601f830112614b9857600080fd5b8135614ba6614ad682615c4f565b818152846020838601011115614bbb57600080fd5b816020850160208301376000918101602001919091529392505050565b8035614aa581615e8d565b8051614aa581615e8d565b600082601f830112614bff57600080fd5b8151614c0d614ad682615c4f565b818152846020838601011115614c2257600080fd5b614c33826020830160208701615d3c565b949350505050565b600060408284031215614c4d57600080fd5b614c55615b6c565b90508135614c6281615e5d565b808252506020820135602082015292915050565b600060408284031215614c8857600080fd5b614c90615b6c565b90508151614c9d81615e5d565b808252506020820151602082015292915050565b600060608284031215614cc357600080fd5b614ccb615b95565b90508135614cd881615e9a565b8152602082013567ffffffffffffffff80821115614cf557600080fd5b614d0185838601614b87565b60208401526040840135915080821115614d1a57600080fd5b50614d2784828501614b87565b60408301525092915050565b600060608284031215614d4557600080fd5b614d4d615b95565b90508151614d5a81615e9a565b8152602082015167ffffffffffffffff80821115614d7757600080fd5b614d8385838601614bee565b60208401526040840151915080821115614d9c57600080fd5b50614d2784828501614bee565b600060808284031215614dbb57600080fd5b6040516080810167ffffffffffffffff8282108183111715614ddf57614ddf615e2e565b8160405282935084358352602085013560208401526040850135915080821115614e0857600080fd5b614e1486838701614b87565b60408401526060850135915080821115614e2d57600080fd5b50614e3a85828601614b87565b6060830152505092915050565b8035614aa581615e9a565b8051614aa581615e9a565b600060208284031215614e6f57600080fd5b8135613ab281615e5d565b600060208284031215614e8c57600080fd5b8151613ab281615e5d565b60008060408385031215614eaa57600080fd5b8235614eb581615e5d565b946020939093013593505050565b600060208284031215614ed557600080fd5b813567ffffffffffffffff811115614eec57600080fd5b614c3384828501614ab5565b60008060408385031215614f0b57600080fd5b823567ffffffffffffffff80821115614f2357600080fd5b614f2f86838701614ab5565b93506020850135915080821115614f4557600080fd5b50614f5285828601614da9565b9150509250929050565b600060208284031215614f6e57600080fd5b8135613ab281615e7f565b600060208284031215614f8b57600080fd5b8151613ab281615e7f565b600080600060608486031215614fab57600080fd5b8335614fb681615e5d565b92506020840135614fc681615e5d565b91506040840135614fd681615e5d565b809150509250925092565b600080600060608486031215614ff657600080fd5b833567ffffffffffffffff8082111561500e57600080fd5b90850190610200828803121561502357600080fd5b61502b615bb8565b61503483614a9a565b815261504260208401614e47565b602082015261505360408401614a9a565b604082015260608301358281111561506a57600080fd5b61507689828601614ab5565b60608301525060808301358281111561508e57600080fd5b61509a89828601614ab5565b6080830152506150ac60a08401614a9a565b60a08201526150bd60c08401614bd8565b60c082015260e083810135908201526101008084013590820152610120808401359082015261014080840135908201526101606150fb818501614e47565b9082015261018061510e89858301614c3b565b81830152506101c0808401356101a08301526101e0840135818301525080955050602086013591508082111561514357600080fd5b61514f87838801614cb1565b9350604086013591508082111561516557600080fd5b5061517286828701614da9565b9150509250925092565b60006020828403121561518e57600080fd5b5035919050565b6000602082840312156151a757600080fd5b5051919050565b6000806000606084860312156151c357600080fd5b8351925060208085015167ffffffffffffffff808211156151e357600080fd5b6151ef88838901614b27565b9450604087015191508082111561520557600080fd5b508501601f8101871361521757600080fd5b8051615225614ad682615c2b565b8082825284820191508484018a868560051b870101111561524557600080fd5b600094505b8385101561527157805161525d81615e5d565b83526001949094019391850191850161524a565b5080955050505050509250925092565b60008060006060848603121561529657600080fd5b83519250602084015167ffffffffffffffff808211156152b557600080fd5b9085019061020082880312156152ca57600080fd5b6152d2615bb8565b6152db83614aaa565b81526152e960208401614e52565b60208201526152fa60408401614aaa565b604082015260608301518281111561531157600080fd5b61531d89828601614b27565b60608301525060808301518281111561533557600080fd5b61534189828601614b27565b60808301525061535360a08401614aaa565b60a082015261536460c08401614be3565b60c082015260e083810151908201526101008084015190820152610120808401519082015261014080840151908201526101606153a2818501614e52565b908201526101806153b589858301614c76565b908201526101c0838101516101a08301526101e090930151928101929092526040860151919350808211156153e957600080fd5b5061517286828701614d33565b6000806040838503121561540957600080fd5b82359150602083013567ffffffffffffffff81111561542757600080fd5b614f5285828601614da9565b6000806040838503121561544657600080fd5b50508035926020909101359150565b60008060006060848603121561546a57600080fd5b83359250602084013561547c81615eaa565b9150604084013567ffffffffffffffff81111561549857600080fd5b61517286828701614b87565b6000602082840312156154b657600080fd5b8151613ab281615eaa565b6000806000606084860312156154d657600080fd5b83516154e181615ebc565b60208501519093506154f281615e5d565b80925050604084015190509250925092565b6000806040838503121561551757600080fd5b823561552281615ebc565b9150602083013567ffffffffffffffff81111561553e57600080fd5b614f5285828601614b87565b600081518084526020808501945080840160005b8381101561557a5781518752958201959082019060010161555e565b509495945050505050565b6000815180845261559d816020860160208601615d3c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60068110615606577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b61ffff8151168252600060208201516060602085015261562d6060850182615585565b9050604083015184820360408601526156468282615585565b95945050505050565b805173ffffffffffffffffffffffffffffffffffffffff16825260006102006020830151615683602086018261ffff169052565b5060408301516156ab604086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060608301518160608601526156c38286018261554a565b915050608083015184820360808601526156dd828261554a565b91505060a083015161570760a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015161571a60c08601826155cf565b5060e083810151908501526101008084015190850152610120808401519085015261014080840151908501526101608084015161ffff811682870152505061018083810151805173ffffffffffffffffffffffffffffffffffffffff168683015260208101516101a087015250506101a08301516101c085810191909152909201516101e090930192909252919050565b805182526020810151602083015260006040820151608060408501526157d46080850182615585565b9050606083015184820360608601526156468282615585565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525060a0604083015261582660a083018661554a565b8281036060840152615838818661554a565b9150508260808301529695505050505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000614c33604083018461564f565b73ffffffffffffffffffffffffffffffffffffffff8e8116825261ffff8e1660208301528c811660408301528b1660608201526101c081016158bf608083018c6155cf565b8960a08301528860c08301528760e08301528661010083015261ffff8616610120830152615911610140830186805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b6101808201939093526101a001529b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8516815283602082015263ffffffff8316604082015260806060820152600061596f6080830184615585565b9695505050505050565b602081526000613ab2602083018461560a565b602081526000613ab2602083018461564f565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a0604082015260006159d860a083018661564f565b82810360608401526159ea818661560a565b905082810360808401526159fe81856157ab565b98975050505050505050565b61ffff8516815273ffffffffffffffffffffffffffffffffffffffff8416602082015282604082015260806060820152600061596f60808301846157ab565b600060808201868352602073ffffffffffffffffffffffffffffffffffffffff808816828601528087166040860152506080606085015281855480845260a0860191508660005282600020935060005b81811015615ab557845483526001948501949284019201615a99565b50909998505050505050505050565b83815273ffffffffffffffffffffffffffffffffffffffff8316602082015260608101614c3360408301846155cf565b86815273ffffffffffffffffffffffffffffffffffffffff8616602082015284604082015263ffffffff8416606082015282608082015260c060a082015260006159fe60c0830184615585565b838152606060208201526000615b5a606083018561564f565b828103604084015261596f818561560a565b6040805190810167ffffffffffffffff81118282101715615b8f57615b8f615e2e565b60405290565b6040516060810167ffffffffffffffff81118282101715615b8f57615b8f615e2e565b6040516101e0810167ffffffffffffffff81118282101715615b8f57615b8f615e2e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715615c2357615c23615e2e565b604052919050565b600067ffffffffffffffff821115615c4557615c45615e2e565b5060051b60200190565b600067ffffffffffffffff821115615c6957615c69615e2e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008219821115615ca857615ca8615da1565b500190565b600082615ce3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615d2057615d20615da1565b500290565b600082821015615d3757615d37615da1565b500390565b60005b83811015615d57578181015183820152602001615d3f565b83811115611fd95750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615d9a57615d9a615da1565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461316057600080fd5b801515811461316057600080fd5b6006811061316057600080fd5b61ffff8116811461316057600080fd5b63ffffffff8116811461316057600080fd5b60ff8116811461316057600080fdfea2646970667358221220b22cd42d3fdf78db1a470f74c7a3d65f6442a3da7775e994f92db3c6d9abecc664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_allowTask": "allow running task",
          "_chainId": "layerZero chainId",
          "_helper": "protocol helper address",
          "_prevId": "previous taskId"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Openluck LucksTrade.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelTask(uint256,(uint256,uint256,bytes,bytes))": {
        "notice": "seller cancel the task, only when task status equal to 'Pending' or no funds amount"
      },
      "claimNFTs(uint256[],(uint256,uint256,bytes,bytes))": {
        "notice": "when taskItem Fail, user can claim NFTs back (cross-chain case)"
      },
      "claimTokens(uint256[])": {
        "notice": "when taskItem Fail, user can claim tokens back "
      },
      "closeTask(uint256,(uint256,uint256,bytes,bytes))": {
        "notice": "finish a Task,  case 1: reach target crowd amount, status success, and start to pick a winner case 2: time out and not reach the target amount, status close, and returns funds to claimable pool"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "joinTask(uint256,uint32,string)": {
        "notice": "buyer join a task num: how many ticket"
      },
      "pickWinner(uint256,(uint256,uint256,bytes,bytes))": {
        "notice": "start to picker a winner via chainlink VRF"
      }
    },
    "notice": "It is the core contract for crowd funds to buy NFTs result to one lucky winner randomness provided externally.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 507,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 307,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5659,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "prevId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5661,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "currentId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5664,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "HELPER",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ILucksHelper)9499"
      },
      {
        "astId": 5667,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "PROXY_NFT",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IProxyNFTStation)9806"
      },
      {
        "astId": 5670,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "PROXY_TOKEN",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IProxyTokenStation)9847"
      },
      {
        "astId": 5673,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "BRIDGE",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ILucksBridge)9030"
      },
      {
        "astId": 5677,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "isAllowTask",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 5682,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "tasks",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(TaskItem)9081_storage)"
      },
      {
        "astId": 5689,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "tickets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Ticket)9095_storage))"
      },
      {
        "astId": 5694,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "ticketIds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5699,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "infos",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(TaskInfo)9102_storage)"
      },
      {
        "astId": 5705,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "userTickets",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5711,
        "contract": "contracts/LucksExecutor.sol:LucksExecutor",
        "label": "userClaimeds",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILucksBridge)9030": {
        "encoding": "inplace",
        "label": "contract ILucksBridge",
        "numberOfBytes": "20"
      },
      "t_contract(ILucksHelper)9499": {
        "encoding": "inplace",
        "label": "contract ILucksHelper",
        "numberOfBytes": "20"
      },
      "t_contract(IProxyNFTStation)9806": {
        "encoding": "inplace",
        "label": "contract IProxyNFTStation",
        "numberOfBytes": "20"
      },
      "t_contract(IProxyTokenStation)9847": {
        "encoding": "inplace",
        "label": "contract IProxyTokenStation",
        "numberOfBytes": "20"
      },
      "t_enum(TaskStatus)9041": {
        "encoding": "inplace",
        "label": "enum TaskStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Ticket)9095_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Ticket))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Ticket)9095_storage)"
      },
      "t_mapping(t_uint256,t_struct(TaskInfo)9102_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TaskInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TaskInfo)9102_storage"
      },
      "t_mapping(t_uint256,t_struct(TaskItem)9081_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TaskItem)",
        "numberOfBytes": "32",
        "value": "t_struct(TaskItem)9081_storage"
      },
      "t_mapping(t_uint256,t_struct(Ticket)9095_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ticket)",
        "numberOfBytes": "32",
        "value": "t_struct(Ticket)9095_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ExclusiveToken)9046_storage": {
        "encoding": "inplace",
        "label": "struct ExclusiveToken",
        "members": [
          {
            "astId": 9043,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9045,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TaskInfo)9102_storage": {
        "encoding": "inplace",
        "label": "struct TaskInfo",
        "members": [
          {
            "astId": 9097,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "lastTID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9099,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "closeTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9101,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "finalNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TaskItem)9081_storage": {
        "encoding": "inplace",
        "label": "struct TaskItem",
        "members": [
          {
            "astId": 9048,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9050,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "nftChainId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 9052,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9055,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "tokenIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9058,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "tokenAmounts",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9060,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "acceptToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9063,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "status",
            "offset": 20,
            "slot": "4",
            "type": "t_enum(TaskStatus)9041"
          },
          {
            "astId": 9065,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9067,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "endTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9069,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "targetAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9071,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "price",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 9073,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "paymentStrategy",
            "offset": 0,
            "slot": "9",
            "type": "t_uint16"
          },
          {
            "astId": 9076,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "exclusiveToken",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(ExclusiveToken)9046_storage"
          },
          {
            "astId": 9078,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "amountCollected",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 9080,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "depositId",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Ticket)9095_storage": {
        "encoding": "inplace",
        "label": "struct Ticket",
        "members": [
          {
            "astId": 9090,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9092,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "count",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 9094,
            "contract": "contracts/LucksExecutor.sol:LucksExecutor",
            "label": "owner",
            "offset": 4,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}